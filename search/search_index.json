{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Yvan Blog \u96c4\u5173\u6f2b\u9053\u771f\u5982\u94c1\uff0c\u800c\u4eca\u8fc8\u6b65\u4ece\u5934\u8d8a\u3002 \u524d\u8a00\u8bf4\u660e \u8be5\u535a\u5ba2\u7531 github \uff0c mkdocs \u63d0\u4f9b\u652f\u6301,\u8868\u793a\u611f\u8c22\u3002 \u8be5\u535a\u5ba2\u539f\u4e3a yvanhome.top \u524d\u4e00\u6bb5\u65f6\u95f4\uff0c\u670d\u52a1\u5668\u4e0e\u57df\u540d\u5230\u671f\uff0c\u6700\u8fd1\u6b63\u5728\u9010\u6b65\u6062\u590d\u4ee5\u524d\u7684\u6587\u7ae0\u3002 \u8be5\u535a\u5ba2\u4e3b\u8981\u5b58\u653e\u4e2a\u4eba\u90e8\u5206\u7b14\u8bb0\uff0c\u4e2a\u4eba\u5206\u4eab\uff0c\u4f46\u4e0d\u5bf9\u5185\u5bb9\u6b63\u786e\u4e0e\u5426\u8d1f\u8d23\u3002 \u4e3a\u5565\u4e0d\u7528 Jekyll \u56e0\u4e3a\u5acc\u9ebb\u70e6... \u5185\u5bb9\u8bf4\u660e \u4e3b\u8981\u5206\u4e3a\u4e24\u4e2a\u677f\u5757\uff1a \u4e2a\u4eba\u5206\u4eab: \u539f\u6765\u5f88\u591a\u5185\u5bb9\u67b6\u8bbe\u5728\u52a8\u6001\u7f51\u7ad9\u4e2d,\u8fc1\u79fb\u8fc7\u7a0b\u7e41\u7410\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u76ee\u524d\u5728\u627e\u5de5\u4f5c\uff0c\u7b49\u6709\u65f6\u95f4\u540e\u4f1a\u91cd\u65b0\u5012\u817e\u6570\u636e\u5e93\u4e2d\u7684\u5185\u5bb9\u3002 \u4e2a\u4eba\u5b66\u4e60\u7b14\u8bb0\uff1a\u5f88\u591a\u539f\u672c\u7684\u7b14\u8bb0\u5c31\u662f markdown \u7f16\u5199\uff0c\u8fd9\u4e9b\u5185\u5bb9\u8fc1\u79fb\u8f83\u5feb\uff0c\u76ee\u524d\u4e5f\u4e3b\u8981\u5728\u505a\u8fd9\u4e9b\u5185\u5bb9","title":"\u524d\u8a00"},{"location":"#yvan-blog","text":"\u96c4\u5173\u6f2b\u9053\u771f\u5982\u94c1\uff0c\u800c\u4eca\u8fc8\u6b65\u4ece\u5934\u8d8a\u3002","title":"Yvan Blog"},{"location":"#_1","text":"\u8be5\u535a\u5ba2\u7531 github \uff0c mkdocs \u63d0\u4f9b\u652f\u6301,\u8868\u793a\u611f\u8c22\u3002 \u8be5\u535a\u5ba2\u539f\u4e3a yvanhome.top \u524d\u4e00\u6bb5\u65f6\u95f4\uff0c\u670d\u52a1\u5668\u4e0e\u57df\u540d\u5230\u671f\uff0c\u6700\u8fd1\u6b63\u5728\u9010\u6b65\u6062\u590d\u4ee5\u524d\u7684\u6587\u7ae0\u3002 \u8be5\u535a\u5ba2\u4e3b\u8981\u5b58\u653e\u4e2a\u4eba\u90e8\u5206\u7b14\u8bb0\uff0c\u4e2a\u4eba\u5206\u4eab\uff0c\u4f46\u4e0d\u5bf9\u5185\u5bb9\u6b63\u786e\u4e0e\u5426\u8d1f\u8d23\u3002 \u4e3a\u5565\u4e0d\u7528 Jekyll \u56e0\u4e3a\u5acc\u9ebb\u70e6...","title":"\u524d\u8a00\u8bf4\u660e"},{"location":"#_2","text":"\u4e3b\u8981\u5206\u4e3a\u4e24\u4e2a\u677f\u5757\uff1a \u4e2a\u4eba\u5206\u4eab: \u539f\u6765\u5f88\u591a\u5185\u5bb9\u67b6\u8bbe\u5728\u52a8\u6001\u7f51\u7ad9\u4e2d,\u8fc1\u79fb\u8fc7\u7a0b\u7e41\u7410\u3002\u53e6\u4e00\u65b9\u9762\uff0c\u76ee\u524d\u5728\u627e\u5de5\u4f5c\uff0c\u7b49\u6709\u65f6\u95f4\u540e\u4f1a\u91cd\u65b0\u5012\u817e\u6570\u636e\u5e93\u4e2d\u7684\u5185\u5bb9\u3002 \u4e2a\u4eba\u5b66\u4e60\u7b14\u8bb0\uff1a\u5f88\u591a\u539f\u672c\u7684\u7b14\u8bb0\u5c31\u662f markdown \u7f16\u5199\uff0c\u8fd9\u4e9b\u5185\u5bb9\u8fc1\u79fb\u8f83\u5feb\uff0c\u76ee\u524d\u4e5f\u4e3b\u8981\u5728\u505a\u8fd9\u4e9b\u5185\u5bb9","title":"\u5185\u5bb9\u8bf4\u660e"},{"location":"about/","text":"\u8054\u7cfb\u65b9\u5f0f E-mail: yvanlv@outlook.com","title":"\u5173\u4e8e"},{"location":"about/#_1","text":"E-mail: yvanlv@outlook.com","title":"\u8054\u7cfb\u65b9\u5f0f"},{"location":"book/","text":"\u4e2a\u4eba\u56fe\u4e66 \u51c6\u5907\u8bfb\u4e66\u76ee\u5f55 \u541b\u4e3b\u8bba \u6f5c\u89c4\u5219 \u8840\u916c\u5b9a\u5f8b \u8d44\u672c\u8bba \u7231\u7684\u535a\u5f08 \u6d1e\u7a74\u5947\u6848 \u6bdb\u9009","title":"\u56fe\u4e66\u5206\u4eab"},{"location":"book/#_1","text":"","title":"\u4e2a\u4eba\u56fe\u4e66"},{"location":"book/#_2","text":"\u541b\u4e3b\u8bba \u6f5c\u89c4\u5219 \u8840\u916c\u5b9a\u5f8b \u8d44\u672c\u8bba \u7231\u7684\u535a\u5f08 \u6d1e\u7a74\u5947\u6848 \u6bdb\u9009","title":"\u51c6\u5907\u8bfb\u4e66\u76ee\u5f55"},{"location":"calendar/","text":"\u65e5\u5386 \u8fd1\u671f\u76ee\u6807\u4e0e\u4efb\u52a1 \u5b66\u4e60 golang \u91cd\u5b66\u82f1\u8bed\uff0c\u82f1\u8bed\u80fd\u529b\u611f\u89c9\u5e9f\u4e86...","title":"\u65e5\u5386"},{"location":"calendar/#_1","text":"","title":"\u65e5\u5386"},{"location":"calendar/#_2","text":"\u5b66\u4e60 golang \u91cd\u5b66\u82f1\u8bed\uff0c\u82f1\u8bed\u80fd\u529b\u611f\u89c9\u5e9f\u4e86...","title":"\u8fd1\u671f\u76ee\u6807\u4e0e\u4efb\u52a1"},{"location":"cshirp/","text":"","title":"C#"},{"location":"mongodb/","text":"mongodb mongodb\u7684\u57fa\u672c\u64cd\u4f5c 1. \u67e5\u770b\u5f53\u524d\u7684\u6570\u636e\u5e93\uff1adb 2. \u67e5\u770b\u6240\u6709\u7684\u6570\u636e\u5e93\uff1ashow dbs / show databases 3. \u5207\u6362\u6570\u636e\u5e93 use db_name 4. \u5220\u9664\u5f53\u524d\u7684\u6570\u636e\u5e93 db.dropDatabase() mongodb \u96c6\u5408\u7684\u57fa\u7840\u547d\u4ee4 1. \u975e\u624b\u52a8\u521b\u5efa\u96c6\u5408\uff0c\u60f3\u4e0d\u5b58\u5728\u7684\u96c6\u5408\u4e2d\u7b2c\u4e00\u6b21\u52a0\u5165\u6570\u636e\u65f6\uff0c\u96c6\u5408\u4f1a\u88ab\u81ea\u52a8\u521b\u5efa\u51fa\u6765\u3002 2. \u624b\u52a8\u521b\u5efa\u96c6\u5408\uff1a > db.createCollection(name, options) > db.createCollection(\"stu\") > db.createCollection(\"sub\", {capped: true, size: 10}) > \u53c2\u6570capped\uff1a\u9ed8\u8ba4\u503c\u4e3afalse\uff0c\u8868\u793a\u4e0d\u8bbe\u7f6e\u4e0a\u7ebf\uff0c\u503c\u4e3atrue\u65f6\u8868\u793a\u8bbe\u7f6e\u4e0a\u9650\u3002 > \u53c2\u6570size\uff1a\u5f53capped\u503c\u4e3atrue\u65f6\uff0c\u9700\u8981\u6307\u5b9a\u6b64\u53c2\u6570\uff0c\u8868\u793a\u4e0a\u9650\u5927\u5c0f\uff0c\u5f53\u6587\u6863\u8fbe\u5230\u4e0a\u9650\u65f6\uff0c\u4f1a\u5c06\u4e4b\u524d\u7684\u6570\u636e\u8986\u76d6\uff0c\u5355\u4f4d\u4e3a\u5b57\u8282\u3002 3. \u53c2\u770b\u96c6\u5408\uff1ashow collections 4. \u5220\u9664\u96c6\u5408\uff1adb.\u96c6\u5408\u540d\u79f0.drop() \u6570\u636e\u7c7b\u578b Object ID: \u6587\u6863id String: \u5b57\u7b26\u4e32\uff0c\u6700\u5e38\u7528\uff0c\u5fc5\u987b\u662f\u6709\u6548\u7684UTF-8 Boolean: \u5b58\u50a8\u4e00\u4e2a\u5e03\u5c14\u503c\uff0ctrue\u6216false Integer: \u6574\u6570\u53ef\u4ee5\u662f32\u4f4d\u621664\u4f4d\uff0c\u8fd9\u53d6\u51b3\u4e8e\u670d\u52a1\u5668\u3002 Bouble: \u5b58\u50a8\u6d6e\u70b9\u503c Arrays: \u6570\u7ec4\u6216\u5217\u8868\uff0c\u591a\u4e2a\u503c\u5b58\u50a8\u5230\u4e00\u4e2a\u952e Object: \u7528\u4e8e\u5d4c\u5165\u5f0f\u7684\u6587\u6863\uff0c\u5373\u4e00\u4e2a\u503c\u4e3a\u4e00\u4e2a\u6587\u6863 Null: \u5b58\u50a8Null\u503c Timestamp: \u65f6\u95f4\u6233\uff0c\u8868\u793a\u4ece1970-1-1\u5230\u73b0\u5728\u7684\u603b\u79d2\u6570 Date: \u5b58\u50a8\u5f53\u524d\u65e5\u671f\u6216\u65f6\u95f4\u7684UNIX\u65f6\u95f4\u683c\u5f0f > \u521b\u5efa\u65e5\u671f\u8bed\u53e5\u5982\u4e0b: \u53c2\u6570\u7684\u683c\u5f0f\u4e3aYYYY-MM-DD > new Date('2017-12-20') > \u6bcf\u4e2a\u6587\u6863\u90fd\u6709\u4e00\u4e2a\u5c5e\u6027\uff0c\u4e3a_id\uff0c\u4fdd\u8bc1\u6bcf\u4e2a\u6587\u6863\u7684\u552f\u4e00\u6027 > \u53ef\u4ee5\u81ea\u5df1\u53bb\u8bbe\u7f6e_id\u63d2\u5165\u6587\u6863\uff0c\u5982\u679c\u6ca1\u6709\u63d0\u4f9b\uff0c\u90a3\u4e48MongoDB\u4e3a\u6bcf\u4e2a\u6587\u6863\u63d0\u4f9b\u4e00\u4e2a\u72ec\u7279\u7684_id\uff0c\u7c7b\u578b\u4e3aobjectID > ObjectID\u662f\u4e00\u4e2a12\u5b57\u8282\u7684\u5341\u516d\u8fdb\u5236\u6570 a. 4\u4e2a\u5b57\u8282\u4e3a\u5f53\u524d\u65f6\u95f4\u6233 b. 3\u4e2a\u5b57\u8282\u7684\u673a\u5668ID c. 2\u4e2a\u5b57\u8282\u4e3aMongoDB\u7684\u670d\u52a1\u8fdb\u7a0bid object\u64cd\u4f5c 1. \u63d2\u5165 > \u63d2\u5165 db.[\u96c6\u5408\u540d\u79f0].insert(document) > db.stu.insert({[json]}) > db.stu.insert({_id:\"obj_id\", [json]}) > \u63d2\u5165\u6587\u6863\u65f6\uff0c\u5982\u679c\u4e0d\u6307\u5b9a_id\u53c2\u6570\uff0cMongoDB\u4f1a\u4e3a\u6587\u6863\u5206\u914d\u4e00\u4e2a\u552f\u4e00\u7684Objectd 2. \u4fdd\u5b58 > db.[\u96c6\u5408\u540d\u8bcd].save(document) > \u5982\u679c\u6587\u6863\u7684_id\u5df2\u7ecf\u5b58\u5728\u5219\u4fee\u6539\uff0c\u5982\u679c\u6587\u6863\u7684_id\u4e0d\u5b58\u5728\u5219\u6dfb\u52a0 3. \u66f4\u65b0 > db.[\u96c6\u5408\u540d\u8bcd].update(<query>, <update>, {multi:<boolean>}) > \u53c2\u6570query: \u67e5\u8be2\u6761\u4ef6 > \u53c2\u6570update\uff1a\u66f4\u65b0\u64cd\u4f5c\u7b26 > \u53c2\u6570muluti: \u53ef\u9009\uff0c\u9ed8\u8ba4\u662ffalse\uff0c\u8868\u793a\u53ea\u66f4\u65b0\u627e\u5230\u7684\u7b2c\u4e00\u6761\u8bb0\u5f55\uff0c\u503c\u4e3aTrue\u8868\u793a\u628a\u6ee1\u8db3\u6761\u4ef6\u7684\u6587\u6863\u5168\u90e8\u66f4\u65b0 > \u6ce8\u610f\uff1a multi update only works with $ operators 4. \u5220\u9664 > db.[\u96c6\u5408\u540d\u79f0].remove(<query>, {justOne:<boolean>}) > \u53c2\u6570query\uff1a\u53ef\u9009\uff0c\u5220\u9664\u7684\u6587\u6863\u6761\u4ef6 > \u53c2\u6570justOne: \u53ef\u9009\uff0c\u5982\u679c\u8bbe\u7f6e\u4e3atrue\u62161\uff0c\u5219\u53ea\u5220\u9664\u4e00\u6761\uff0c\u9ed8\u8ba4\u4e3afalse\uff0c\u8868\u793a\u5220\u9664\u591a\u6761\u3002 > \u6ce8\u610f\uff1a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f1a\u5c06\u7b26\u5408\u6761\u4ef6\u7684\u6587\u6863\u5168\u90e8\u5220\u9664\uff0c\u8fd9\u4e0e\u4fee\u6539\u7684\u9ed8\u8ba4\u7b56\u7565\u622a\u7136\u4e0d\u540c 5. \u67e5\u8be2 > \u65b9\u6cd5find(): \u67e5\u8be2 db.[\u96c6\u5408\u540d\u8bcd].find({\u6761\u4ef6json}) > \u65b9\u6cd5findOne(): \u67e5\u8be2,\u53ea\u8fd4\u56de\u7b2c\u4e00\u4e2a db.\u96c6\u5408\u540d\u8bcd.findOne({\u6761\u4ef6json}) > \u65b9\u6cd5pretty(): \u5c06\u7ed3\u679c\u683c\u5f0f\u5316 db.[\u96c6\u5408\u540d\u8bcd].find({\u6761\u4ef6\u6587\u6863}).pretty() 6. \u6bd4\u8f83\u8fd0\u7b97\u7b26 = \u9ed8\u8ba4\u662f\u7b49\u4e8e\u5224\u65ad\uff0c\u6ca1\u6709\u8fd0\u7b97\u7b26 < $lt (less than) >= $lte (less than equal) > $gt (greater than) >= $gte != $ne 7. \u8303\u56f4\u8fd0\u7b97\u7b26 (*)= $in (\u591a\u7b49\u4e8e) (*)!= $nin (\u591a\u4e0d\u7b49\u4e8e) 8. \u903b\u8f91\u8fd0\u7b97\u7b26 > and: \u5728json\u4e2d\u5199\u591a\u4e2a\u6761\u4ef6\u5373\u53ef. > or: \u4f7f\u7528$or,\u503c\u4e3a\u6570\u7ec4,\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4e3a{json} 9. \u6b63\u5219\u8868\u8fbe\u5f0f > \u4f7f\u7528 // \u6216 $regex \u7f16\u5199\u6b63\u5219\u8868\u8fbe\u5f0f 10. limit skip > limit(): \u7528\u4e8e\u8bfb\u53d6\u6307\u5b9a\u6570\u91cf\u7684\u6587\u6863 > skip(): \u7528\u4e8e\u8df3\u8fc7\u6307\u5b9a\u6570\u91cf\u7684\u6587\u6863 > \u6ce8\u610f\uff1a\u4e8c\u8005\u53ef\u540c\u65f6\u4f7f\u7528 11. \u81ea\u5b9a\u4e49\u67e5\u8be2 > \u4f7f\u7528 $where \u540e\u9762\u5199\u4e00\u4e2a\u51fd\u6570,\u8fd4\u56de\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u636e\u3002 12. \u6295\u5f71 > \u5728\u67e5\u8be2\u5230\u7684\u8fd4\u56de\u7ed3\u679c\u4e2d\uff0c\u53ea\u9009\u62e9\u5fc5\u8981\u7684\u5b57\u6bb5 > db.[\u96c6\u5408\u540d\u79f0].find({\u5b57\u6bb5\u540d\u79f0:1,...}) > \u53c2\u6570\u5b57\u6bb5\u4e0e\u503c\uff0c\u503c\u4e3a\u8868\u793a\u663e\u793a,\u503c\u4e3a0\u4e0d\u663e\u793a. > \u5bf9\u4e8e_id\u5217\u9ed8\u8ba4\u662f\u663e\u793a\u7684\uff0c\u5982\u679c\u4e0d\u663e\u793a\u9700\u8981\u660e\u786e\u8bbe\u7f6e\u4e3a0 13.\u6392\u5e8f > \u65b9\u6cd5sort(),\u7528\u4e8e\u5bf9\u96c6\u8fdb\u884c\u6392\u5e8f > db.\u96c6\u5408\u540d\u79f0.find().sort({\u5b57\u6bb5:1,...}) > \u53c2\u65701\u4e3a\u5347\u5e8f\u6392\u5217,\u53c2\u6570-1\u4e3a\u964d\u5e8f\u6392\u5217 14.\u7edf\u8ba1\u4e2a\u6570 > \u65b9\u6cd5count() \u7528\u4e8e\u7edf\u8ba1\u7ed3\u679c\u96c6\u4e2d\u7684\u6587\u6863\u6761\u6570 15.\u53bb\u91cd > \u65b9\u6cd5 distinct(\"\u53bb\u91cd\u952e\", {json\u6761\u4ef6}) \u5bf9\u6570\u636e\u8fdb\u884c\u53bb\u91cd \u6570\u636e\u7684\u5907\u4efd\u4e0e\u6062\u590d 1. \u5907\u4efd\u8bed\u6cd5 > mongodump -h dbhost -d dbname -o dbdirectory > -h \u670d\u52a1\u5668\u5730\u5740,\u4e5f\u53ef\u4ee5\u6307\u5b9a\u7aef\u53e3\u53f7 > -d \u9700\u8981\u5907\u4efd\u7684\u6570\u636e\u5e93\u540d\u79f0 > -o \u5907\u4efd\u7684\u6570\u636e\u5b58\u653e\u4f4d\u7f6e,\u6b64\u76ee\u5f55\u4e2d\u5b58\u653e\u7740\u5907\u4efd\u51fa\u6765\u7684\u6570\u636e\u3002 2. \u6062\u590d\u8bed\u6cd5 > mongorestore -h dbhost -d dbname --dirdb directory > -h \u670d\u52a1\u5668\u5730\u5740 > -d \u9700\u8981\u6062\u590d\u7684\u6570\u636e\u5e93\u5b9e\u4f8b > --dir \u5907\u4efd\u6570\u636e\u6240\u5728\u4f4d\u7f6e \u805a\u5408aggregate \u805a\u5408(aggregate)\u662f\u57fa\u4e8e\u6570\u636e\u5904\u7406\u7684\u805a\u5408\u7ba1\u9053\uff0c\u6bcf\u4e2a\u6587\u6863\u901a\u8fc7\u4e00\u4e2a\u7531\u591a\u4e2a\u9636\u6bb5(stage)\u7ec4\u6210\u7684\u7ba1\u9053,\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u9636\u6bb5\u7684\u7ba1\u9053\u8fdb\u884c\u5206\u7ec4\uff0c\u8fc7\u6ee4\u7b49\u529f\u80fd\uff0c\u7136\u540e\u7ecf\u8fc7\u4e00\u7cfb\u5217\u7684\u5904\u7406\uff0c\u8f93\u51fa\u76f8\u5e94\u7684\u7ed3\u679c\u3002 db.[\u96c6\u5408\u540d\u79f0.aggregate]({\u7ba1\u9053:{\u8868\u8fbe\u5f0f}}) 1. \u8868\u8fbe\u5f0f > \u5904\u7406\u8f93\u5165\u6587\u6863\u5e76\u8f93\u51fa > \u8bed\u6cd5\uff1a\u8868\u8fbe\u5f0f:'$\u5217\u540d' > $sum: \u8ba1\u7b97\u603b\u548c\uff0c $sum:1 \u8868\u793a\u4ee5\u4e00\u500d\u8ba1\u6570 > $avg: \u8ba1\u7b97\u5e73\u5747\u503c > $min: \u83b7\u53d6\u6700\u5c0f\u503c > $max: \u83b7\u53d6\u6700\u5927\u503c > $push: \u5728\u7ed3\u679c\u6587\u6863\u4e2d\u63d2\u5165\u503c\u5230\u4e00\u4e2a\u6570\u7ec4\u4e2d > $first: \u6839\u636e\u8d44\u6e90\u6587\u6863\u7684\u6392\u5e8f\u83b7\u53d6\u7b2c\u4e00\u4e2a\u6587\u6863\u6570\u636e > $last: \u6839\u636e\u8d44\u6e90\u6587\u6863\u7684\u6392\u5e8f\u83b7\u53d6\u6700\u540e\u4e00\u4e2a\u6587\u6863\u6570\u636e 2. $group \u5c06\u96c6\u5408\u4e2d\u7684\u6587\u6863\u5206\u7ec4,\u53ef\u7528\u4e8e\u7edf\u8ba1\u7ed3\u679c > _id\u8868\u793a\u5206\u7ec4\u7684\u4f9d\u636e,\u4f7f\u7528\u6bcf\u4e2a\u5b57\u6bb5\u7684\u683c\u5f0f\u4e3a'$\u5b57\u6bb5' > $group \u5bf9\u5e94\u7684\u5b57\u5178\u4e2d\u6709\u51e0\u4e2a\u952e\uff0c\u7ed3\u679c\u4e2d\u5c31\u6709\u51e0\u4e2a\u952e > \u53d6\u4e0d\u540c\u7684\u5b57\u6bb5\u7684\u503c\u9700\u8981\u4f7f\u7528$, $gender, $age > \u53d6\u5b57\u5178\u5d4c\u5957\u7684\u5b57\u5178\u4e2d\u7684\u503c\u7684\u65f6\u5019 $_id.country > \u80fd\u591f\u540c\u65f6\u6309\u7167\u591a\u4e2a\u952e\u8fdb\u884c\u5206\u7ec4{$group:{_id:{country:\"$country\", province:\"$province\"}}} 3. $project > \u4fee\u6539\u8f93\u5165\u6587\u6863\u7684\u7ed3\u6784\uff0c\u5982\u91cd\u547d\u540d\uff0c\u589e\u52a0\uff0c\u5220\u9664\u5b57\u6bb5\uff0c\u521b\u5efa\u8ba1\u7b97\u7ed3\u679c 4. $match > \u7528\u4e8e\u8fc7\u6ee4\u6570\u636e,\u53ea\u8f93\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u6587\u6863 5. $sort > \u5c06\u8f93\u5165\u6587\u6863\u6392\u5e8f\u540e\u8f93\u51fa 6. $limit > \u9650\u5236\u805a\u5408\u7ba1\u9053\u8fd4\u56de\u7684\u6587\u6863\u6570 7. $skip > \u8df3\u8fc7\u6307\u5b9a\u6570\u91cf\u7684\u6587\u6863\uff0c\u5e76\u8fd4\u56de\u4f59\u4e0b\u7684\u6587\u6863 > \u6ce8\u610f\uff0c\u5148\u4f7f\u7528skip,\u540e\u4f7f\u7528limit,\u4ee5\u63d0\u9ad8\u6027\u80fd 8. $unwind > \u5c06\u6587\u6863\u4e2d\u7684\u67d0\u4e00\u4e2a\u6570\u7ec4\u7c7b\u578b\u5b57\u6bb5\u62c6\u5206\u6210\u591a\u6761\uff0c\u6bcf\u6761\u5305\u542b\u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u503c > unwind\u5728\u5b57\u6bb5\u7b49\u4e8e null, []\u7684\u65f6\u5019,\u5c5e\u6027 preserveNullAndEmptyArrays\u503c\u4e3atrue\uff0c\u8868\u793a\u4fdd\u7559\u5c5e\u6027\u503c\u4e3a\u7a7a\u7684\u6587\u6863 > db.t.aggregate({$unwind:{path:'$\u5b57\u6bb5\u540d', preserveNullAndEmptyArrays:<boolean>}}) \u521b\u5efa\u7d22\u5f15 \u7d22\u5f15: \u4ee5\u63d0\u5347\u67e5\u8be2\u901f\u5ea6 \u8bed\u6cd5: db.\u96c6\u5408.ensureIndex({\u5c5e\u6027:1}), 1\u8868\u793a\u5347\u5e8f, -1\u8868\u793a\u964d\u5e8f > \u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b,\u7d22\u5f15\u7684\u5347\u964d\u5e8f\u8fc7\u5ea6\u7684\u5f71\u54cd\u67e5\u8be2\u901f\u5ea6 > \u4f46\u5728 sort \u60c5\u51b5\u4e0b, \u540c\u5e8f\u6027\u80fd\u4f1a\u66f4\u4f18 > .explain('executionStats') \u53ef\u83b7\u5f97\u67e5\u8be2\u65f6\u95f4\u7b49\u76f8\u5173\u4fe1\u606f > db.t.getindexes() \u67e5\u770b\u5f53\u524d\u96c6\u5408\u7684\u6240\u6709\u7d22\u5f15 > db.t.dropIndex('\u7d22\u5f15\u540d') > \u7d22\u5f15unique db.t.ensureIndex({\"name\":1}, {\"unique\": true}) > \u8054\u5408\u7d22\u5f15 db.t.ensureIndex({name:1, age:1}) pymongo from pymongo import MongoClint # conding=utf-8 from pymongo import MongoClient class TestMongo: def __init__(self): client = MongoClient(host=\"127.0.0.1\", port=27017) collection = client[\"test\"][\"test1\"] # \u63d2\u5165\u591a\u6761\u6570\u636e, \u8fd4\u56de\u63d2\u5165\u7684_id # ret1 = collection.insert({\"name\":\"xiaohong\", \"age\": 10}) # print(ret1) # \u63d2\u5165\u591a\u6761\u6570\u636e # data_list = [{\"name\": \"test{}\".format(i)} for i in range(15,20)] # rets = collection.insert_many(data_list) # print(rets) # \u67e5\u8be2\u4e00\u4e2a\u8bb0\u5f55 :{'_id': ObjectId('5e81eba91968627157ad0349'), 'name': 'test15'} # t = collection.find_one({\"name\": \"test15\"}) # print(t) # \u67e5\u8be2\u6240\u6709\u8bb0\u5f55 # cu = collection.find({\"name\": \"test15\"}) # print(cu) # for i in cu: # print(i) # cu_lst = list(cu) # <pymongo.cursor.Cu rsor object at 0x0000023E264D9490> # {'_id': ObjectId('5e81eba91968627157ad0349'), 'name': 'test15'} # Cursor \u6e38\u6807 # \u66f4\u65b0\u4e00\u6761\u8bb0\u5f55 # ret = collection.update_one({\"name\": \"test16\"}, {\"$set\": {\"name\": \"new_test16\"}}) # print(ret) # <pymongo.results.UpdateResult object at 0x0000024593F60900> # \u66f4\u65b0\u5168\u90e8 # collection.update_many({}) # \u5220\u9664 # collection.delete_one() # collection.delete_many() class main(): TestMongo() if __name__ == \"__main__\": main() In [1]: import datetime In [2]: datetime.datetime.now() Out[2]: datetime.datetime(2020, 3, 27, 11, 16, 51, 308012) In [3]: type(datetime.datetime.now()) Out[3]: datetime.datetime > show collections > new Date(\"2019-12-12\") # ISODate\u5bf9\u5e94datetime.datetime\u7c7b\u578b ISODate(\"2019-12-12T00:00:00Z\") > db.test1.insert({\"name\": \"xiaowang\", \"age\":10}) WriteResult({ \"nInserted\" : 1 }) > db.test1.find() { \"_id\" : ObjectId(\"5e7d71a5b36e3c138608d6c3\"), \"name\" : \"xiaowang\", \"age\" : 10 } > db.test1.insert({name:\"xiaohong\", age:18}) WriteResult({ \"nInserted\" : 1 }) > db.test1.find() { \"_id\" : ObjectId(\"5e7d71a5b36e3c138608d6c3\"), \"name\" : \"xiaowang\", \"age\" : 10 } { \"_id\" : ObjectId(\"5e7d72cfb36e3c138608d6c4\"), \"name\" : \"xiaohong\", \"age\" : 18 } > db.test1.save({ \"_id\" : ObjectId(\"5e7d72cfb36e3c138608d6c4\"), \"name\" : \"xiaohong\", \"age\" : 16 }) WriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 }) > db.test1.find() { \"_id\" : ObjectId(\"5e7d71a5b36e3c138608d6c3\"), \"name\" : \"xiaowang\", \"age\" : 10 } { \"_id\" : ObjectId(\"5e7d72cfb36e3c138608d6c4\"), \"name\" : \"xiaohong\", \"age\" : 16 } # \u4fee\u6539update > db.test1.update({\"name\" : \"xiaowang\"}, {\"name\" : \"xiaoming\"}) WriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 }) > db.test1.find() { \"_id\" : ObjectId(\"5e7d71a5b36e3c138608d6c3\"), \"name\" : \"xiaoming\" } { \"_id\" : ObjectId(\"5e7d72cfb36e3c138608d6c4\"), \"name\" : \"xiaohong\", \"age\" : 16 } # \u4f7f\u7528 $set:{json} \u8fdb\u884c\u9009\u5b9a\u5b57\u7b26\u4e32\u4fee\u6539 > db.test1.update({\"name\" : \"xiaohong\"}, {$set:{\"name\": \"xiaoqiang\"}}) WriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 }) { \"_id\" : ObjectId(\"5e7d71a5b36e3c138608d6c3\"), \"name\" : \"xiaoming\" } { \"_id\" : ObjectId(\"5e7d72cfb36e3c138608d6c4\"), \"name\" : \"xiaoqiang\", \"age\" : 16 } # \u5220\u9664 > db.test1.remove({name:\"xiaoming\"},{justOne:true}) WriteResult({ \"nRemoved\" : 1 }) > db.test1.find() { \"_id\" : ObjectId(\"5e7d72cfb36e3c138608d6c4\"), \"name\" : \"xiaoqiang\", \"age\" : 16 } # \u67e5\u8be2 > db.test1.find({age:{$lte:18}}) { \"_id\" : ObjectId(\"5e7d72cfb36e3c138608d6c4\"), \"name\" : \"xiaoqiang\", \"age\" : 16 } > db.test1.find({age:{$in:[16, 18]}}) { \"_id\" : ObjectId(\"5e7d72cfb36e3c138608d6c4\"), \"name\" : \"xiaoqiang\", \"age\" : 16 } # \u4f7f\u7528 $where:function > db.test1.find({$where:function(){return this.age<=18}}) { \"_id\" : ObjectId(\"5e7d72cfb36e3c138608d6c4\"), \"name\" : \"xiaoqiang\", \"age\" : 16 } # \u53ea\u8fd4\u56de\u7279\u5b9a\u6570\u636e > db.test1.find({$where:function(){return this.age<=18}},{name:1}) { \"_id\" : ObjectId(\"5e7d72cfb36e3c138608d6c4\"), \"name\" : \"xiaoqiang\"} # \u5907\u4efd PS C:\\Users\\Night\\code\\mongodb> mongodump -d test1 -o . 2020-03-27T23:31:54.301+0800 writing test1.test1 to 2020-03-27T23:31:54.384+0800 done dumping test1.test1 (1 document) PS C:\\Users\\Night\\code\\mongodb> ls \u76ee\u5f55: C:\\Users\\Night\\code\\mongodb Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 2020/3/27 23:31 test1 # \u6062\u590d PS C:\\Users\\Night\\code\\mongodb> mongorestore -d test2 --dir test1 2020-03-27T23:39:34.469+0800 the --db and --collection args should only be used when restoring from a BSON file. Other uses are deprecated and will not exist in the future; use --nsInclude instead 2020-03-27T23:39:34.501+0800 building a list of collections to restore from test1 dir 2020-03-27T23:39:34.504+0800 reading metadata for test2.test1 from test1\\test1.metadata.json 2020-03-27T23:39:34.539+0800 restoring test2.test1 from test1\\test1.bson 2020-03-27T23:39:34.544+0800 no indexes to restore 2020-03-27T23:39:34.544+0800 finished restoring test2.test1 (1 document, 0 failures) 2020-03-27T23:39:34.544+0800 1 document(s) restored successfully. 0 document(s) failed to restore. # \u805a\u5408 aggregate > db.test1.aggregate( {$group:{_id:\"$age\", count:{$sum:1}}} ) { \"_id\" : 16 } > db.test1.aggregate( ... {$group:{_id:\"$age\", count:{$sum:1}}} ... ) { \"_id\" : 16, \"count\" : 1 } > db.test1.aggregate( ... {$group:{_id:\"$age\", ... count:{$sum:1}, ... avg_age:{$avg:\"$age\"} ... }} ... ) { \"_id\" : 16, \"count\" : 1, \"avg_age\" : 16 } > db.test1.aggregate( ... { ... $group:{ ... _id:\"$age\", ... count:{$sum:1}, ... avg_age:{$avg:\"$age\"} ... } ... }, ... { ... $project:{ ... gender:\"$_id\", ... count:\"$count\", ... avg_age:\"$avg_age\" ... } ... } ... ) { \"_id\" : 16, \"gender\" : 16, \"count\" : 1, \"avg_age\" : 16 } > db.test1.insert({\"username\": \"Alex\", \"tags\":['C#', 'Java', 'C++']}) WriteResult({ \"nInserted\" : 1 }) > db.test1.find() { \"_id\" : ObjectId(\"5e7d72cfb36e3c138608d6c4\"), \"name\" : \"xiaoqiang\", \"age\" : 16 } { \"_id\" : ObjectId(\"5e8001f313c2dc467a07b8d8\"), \"username\" : \"Alex\", \"tags\" : [ \"C#\", \"Java\", \"C++\" ] } > db.test1.aggregate({$match:{username:\"Alex\"}}) { \"_id\" : ObjectId(\"5e8001f313c2dc467a07b8d8\"), \"username\" : \"Alex\", \"tags\" : [ \"C#\", \"Java\", \"C++\" ] } > db.test1.aggregate({$match:{username:\"Alex\"}},{$unwind:\"$tags\"}) { \"_id\" : ObjectId(\"5e8001f313c2dc467a07b8d8\"), \"username\" : \"Alex\", \"tags\" : \"C#\" } { \"_id\" : ObjectId(\"5e8001f313c2dc467a07b8d8\"), \"username\" : \"Alex\", \"tags\" : \"Java\" } { \"_id\" : ObjectId(\"5e8001f313c2dc467a07b8d8\"), \"username\" : \"Alex\", \"tags\" : \"C++\" } > db.test1.aggregate({$match:{username:\"Alex\"}},{$unwind:\"$tags\"},{$group:{_id:null, sum:{$sum:1}}}) { \"_id\" : null, \"sum\" : 3 } # \u7d22\u5f15 > use test2 switched to db test2 > for(i=0; i<100000; i++){db.test2.insert({name:'test'+i, age:i})} WriteResult({ \"nInserted\" : 1 }) > db.test2.find().count() 100000 > db.test2.find() { \"_id\" : ObjectId(\"5e80087a13c2dc467a07b8d9\"), \"name\" : \"test0\", \"age\" : 0 } Type \"it\" for more > db.test2.find({name:\"test99999\"}) { \"_id\" : ObjectId(\"5e8008b813c2dc467a093f78\"), \"name\" : \"test99999\", \"age\" : 99999 } > db.test2.find({name:\"test99999\"}).explain('executionStats') { ... } # \u521b\u5efa\u7d22\u5f15 > db.test2.ensureIndex({name:1}) { \"createdCollectionAutomatically\" : false, \"numIndexesBefore\" : 1, \"numIndexesAfter\" : 2, \"ok\" : 1 } # \u67e5\u770b\u5f53\u524d\u5e93\u7684\u6240\u6709\u7d22\u5f15 > db.test2.getIndexes() [ { \"v\" : 2, \"key\" : { \"_id\" : 1 }, \"name\" : \"_id_\", \"ns\" : \"test2.test2\" }, { \"v\" : 2, \"key\" : { \"name\" : 1 }, \"name\" : \"name_1\", \"ns\" : \"test2.test2\" } ] # \u5220\u9664\u7d22\u5f15 > db.test2.dropIndex({name:1}) { \"nIndexesWas\" : 2, \"ok\" : 1 } > db.test2.getIndexes() [ { \"v\" : 2, \"key\" : { \"_id\" : 1 }, \"name\" : \"_id_\", \"ns\" : \"test2.test2\" } ] db.test1.aggregate( { $match:{ $or:[ {age:{$gt:15}}, {name:{ $in:[\"xiaoming\",\"xiaoqiang\",\"xiaohong\"] } } ] } }, { $group:{ _id:\"$age\", count:{$sum:1}, avg_age:{$avg:\"$age\"} } }, { $project:{ gender:\"$_id\", count:\"$count\", avg_age:\"$avg_age\" } } )","title":"MongoDB"},{"location":"mongodb/#mongodb","text":"","title":"mongodb"},{"location":"mongodb/#mongodb_1","text":"1. \u67e5\u770b\u5f53\u524d\u7684\u6570\u636e\u5e93\uff1adb 2. \u67e5\u770b\u6240\u6709\u7684\u6570\u636e\u5e93\uff1ashow dbs / show databases 3. \u5207\u6362\u6570\u636e\u5e93 use db_name 4. \u5220\u9664\u5f53\u524d\u7684\u6570\u636e\u5e93 db.dropDatabase()","title":"mongodb\u7684\u57fa\u672c\u64cd\u4f5c"},{"location":"mongodb/#mongodb_2","text":"1. \u975e\u624b\u52a8\u521b\u5efa\u96c6\u5408\uff0c\u60f3\u4e0d\u5b58\u5728\u7684\u96c6\u5408\u4e2d\u7b2c\u4e00\u6b21\u52a0\u5165\u6570\u636e\u65f6\uff0c\u96c6\u5408\u4f1a\u88ab\u81ea\u52a8\u521b\u5efa\u51fa\u6765\u3002 2. \u624b\u52a8\u521b\u5efa\u96c6\u5408\uff1a > db.createCollection(name, options) > db.createCollection(\"stu\") > db.createCollection(\"sub\", {capped: true, size: 10}) > \u53c2\u6570capped\uff1a\u9ed8\u8ba4\u503c\u4e3afalse\uff0c\u8868\u793a\u4e0d\u8bbe\u7f6e\u4e0a\u7ebf\uff0c\u503c\u4e3atrue\u65f6\u8868\u793a\u8bbe\u7f6e\u4e0a\u9650\u3002 > \u53c2\u6570size\uff1a\u5f53capped\u503c\u4e3atrue\u65f6\uff0c\u9700\u8981\u6307\u5b9a\u6b64\u53c2\u6570\uff0c\u8868\u793a\u4e0a\u9650\u5927\u5c0f\uff0c\u5f53\u6587\u6863\u8fbe\u5230\u4e0a\u9650\u65f6\uff0c\u4f1a\u5c06\u4e4b\u524d\u7684\u6570\u636e\u8986\u76d6\uff0c\u5355\u4f4d\u4e3a\u5b57\u8282\u3002 3. \u53c2\u770b\u96c6\u5408\uff1ashow collections 4. \u5220\u9664\u96c6\u5408\uff1adb.\u96c6\u5408\u540d\u79f0.drop()","title":"mongodb \u96c6\u5408\u7684\u57fa\u7840\u547d\u4ee4"},{"location":"mongodb/#_1","text":"Object ID: \u6587\u6863id String: \u5b57\u7b26\u4e32\uff0c\u6700\u5e38\u7528\uff0c\u5fc5\u987b\u662f\u6709\u6548\u7684UTF-8 Boolean: \u5b58\u50a8\u4e00\u4e2a\u5e03\u5c14\u503c\uff0ctrue\u6216false Integer: \u6574\u6570\u53ef\u4ee5\u662f32\u4f4d\u621664\u4f4d\uff0c\u8fd9\u53d6\u51b3\u4e8e\u670d\u52a1\u5668\u3002 Bouble: \u5b58\u50a8\u6d6e\u70b9\u503c Arrays: \u6570\u7ec4\u6216\u5217\u8868\uff0c\u591a\u4e2a\u503c\u5b58\u50a8\u5230\u4e00\u4e2a\u952e Object: \u7528\u4e8e\u5d4c\u5165\u5f0f\u7684\u6587\u6863\uff0c\u5373\u4e00\u4e2a\u503c\u4e3a\u4e00\u4e2a\u6587\u6863 Null: \u5b58\u50a8Null\u503c Timestamp: \u65f6\u95f4\u6233\uff0c\u8868\u793a\u4ece1970-1-1\u5230\u73b0\u5728\u7684\u603b\u79d2\u6570 Date: \u5b58\u50a8\u5f53\u524d\u65e5\u671f\u6216\u65f6\u95f4\u7684UNIX\u65f6\u95f4\u683c\u5f0f > \u521b\u5efa\u65e5\u671f\u8bed\u53e5\u5982\u4e0b: \u53c2\u6570\u7684\u683c\u5f0f\u4e3aYYYY-MM-DD > new Date('2017-12-20') > \u6bcf\u4e2a\u6587\u6863\u90fd\u6709\u4e00\u4e2a\u5c5e\u6027\uff0c\u4e3a_id\uff0c\u4fdd\u8bc1\u6bcf\u4e2a\u6587\u6863\u7684\u552f\u4e00\u6027 > \u53ef\u4ee5\u81ea\u5df1\u53bb\u8bbe\u7f6e_id\u63d2\u5165\u6587\u6863\uff0c\u5982\u679c\u6ca1\u6709\u63d0\u4f9b\uff0c\u90a3\u4e48MongoDB\u4e3a\u6bcf\u4e2a\u6587\u6863\u63d0\u4f9b\u4e00\u4e2a\u72ec\u7279\u7684_id\uff0c\u7c7b\u578b\u4e3aobjectID > ObjectID\u662f\u4e00\u4e2a12\u5b57\u8282\u7684\u5341\u516d\u8fdb\u5236\u6570 a. 4\u4e2a\u5b57\u8282\u4e3a\u5f53\u524d\u65f6\u95f4\u6233 b. 3\u4e2a\u5b57\u8282\u7684\u673a\u5668ID c. 2\u4e2a\u5b57\u8282\u4e3aMongoDB\u7684\u670d\u52a1\u8fdb\u7a0bid","title":"\u6570\u636e\u7c7b\u578b"},{"location":"mongodb/#object","text":"1. \u63d2\u5165 > \u63d2\u5165 db.[\u96c6\u5408\u540d\u79f0].insert(document) > db.stu.insert({[json]}) > db.stu.insert({_id:\"obj_id\", [json]}) > \u63d2\u5165\u6587\u6863\u65f6\uff0c\u5982\u679c\u4e0d\u6307\u5b9a_id\u53c2\u6570\uff0cMongoDB\u4f1a\u4e3a\u6587\u6863\u5206\u914d\u4e00\u4e2a\u552f\u4e00\u7684Objectd 2. \u4fdd\u5b58 > db.[\u96c6\u5408\u540d\u8bcd].save(document) > \u5982\u679c\u6587\u6863\u7684_id\u5df2\u7ecf\u5b58\u5728\u5219\u4fee\u6539\uff0c\u5982\u679c\u6587\u6863\u7684_id\u4e0d\u5b58\u5728\u5219\u6dfb\u52a0 3. \u66f4\u65b0 > db.[\u96c6\u5408\u540d\u8bcd].update(<query>, <update>, {multi:<boolean>}) > \u53c2\u6570query: \u67e5\u8be2\u6761\u4ef6 > \u53c2\u6570update\uff1a\u66f4\u65b0\u64cd\u4f5c\u7b26 > \u53c2\u6570muluti: \u53ef\u9009\uff0c\u9ed8\u8ba4\u662ffalse\uff0c\u8868\u793a\u53ea\u66f4\u65b0\u627e\u5230\u7684\u7b2c\u4e00\u6761\u8bb0\u5f55\uff0c\u503c\u4e3aTrue\u8868\u793a\u628a\u6ee1\u8db3\u6761\u4ef6\u7684\u6587\u6863\u5168\u90e8\u66f4\u65b0 > \u6ce8\u610f\uff1a multi update only works with $ operators 4. \u5220\u9664 > db.[\u96c6\u5408\u540d\u79f0].remove(<query>, {justOne:<boolean>}) > \u53c2\u6570query\uff1a\u53ef\u9009\uff0c\u5220\u9664\u7684\u6587\u6863\u6761\u4ef6 > \u53c2\u6570justOne: \u53ef\u9009\uff0c\u5982\u679c\u8bbe\u7f6e\u4e3atrue\u62161\uff0c\u5219\u53ea\u5220\u9664\u4e00\u6761\uff0c\u9ed8\u8ba4\u4e3afalse\uff0c\u8868\u793a\u5220\u9664\u591a\u6761\u3002 > \u6ce8\u610f\uff1a\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u4f1a\u5c06\u7b26\u5408\u6761\u4ef6\u7684\u6587\u6863\u5168\u90e8\u5220\u9664\uff0c\u8fd9\u4e0e\u4fee\u6539\u7684\u9ed8\u8ba4\u7b56\u7565\u622a\u7136\u4e0d\u540c 5. \u67e5\u8be2 > \u65b9\u6cd5find(): \u67e5\u8be2 db.[\u96c6\u5408\u540d\u8bcd].find({\u6761\u4ef6json}) > \u65b9\u6cd5findOne(): \u67e5\u8be2,\u53ea\u8fd4\u56de\u7b2c\u4e00\u4e2a db.\u96c6\u5408\u540d\u8bcd.findOne({\u6761\u4ef6json}) > \u65b9\u6cd5pretty(): \u5c06\u7ed3\u679c\u683c\u5f0f\u5316 db.[\u96c6\u5408\u540d\u8bcd].find({\u6761\u4ef6\u6587\u6863}).pretty() 6. \u6bd4\u8f83\u8fd0\u7b97\u7b26 = \u9ed8\u8ba4\u662f\u7b49\u4e8e\u5224\u65ad\uff0c\u6ca1\u6709\u8fd0\u7b97\u7b26 < $lt (less than) >= $lte (less than equal) > $gt (greater than) >= $gte != $ne 7. \u8303\u56f4\u8fd0\u7b97\u7b26 (*)= $in (\u591a\u7b49\u4e8e) (*)!= $nin (\u591a\u4e0d\u7b49\u4e8e) 8. \u903b\u8f91\u8fd0\u7b97\u7b26 > and: \u5728json\u4e2d\u5199\u591a\u4e2a\u6761\u4ef6\u5373\u53ef. > or: \u4f7f\u7528$or,\u503c\u4e3a\u6570\u7ec4,\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u4e3a{json} 9. \u6b63\u5219\u8868\u8fbe\u5f0f > \u4f7f\u7528 // \u6216 $regex \u7f16\u5199\u6b63\u5219\u8868\u8fbe\u5f0f 10. limit skip > limit(): \u7528\u4e8e\u8bfb\u53d6\u6307\u5b9a\u6570\u91cf\u7684\u6587\u6863 > skip(): \u7528\u4e8e\u8df3\u8fc7\u6307\u5b9a\u6570\u91cf\u7684\u6587\u6863 > \u6ce8\u610f\uff1a\u4e8c\u8005\u53ef\u540c\u65f6\u4f7f\u7528 11. \u81ea\u5b9a\u4e49\u67e5\u8be2 > \u4f7f\u7528 $where \u540e\u9762\u5199\u4e00\u4e2a\u51fd\u6570,\u8fd4\u56de\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u636e\u3002 12. \u6295\u5f71 > \u5728\u67e5\u8be2\u5230\u7684\u8fd4\u56de\u7ed3\u679c\u4e2d\uff0c\u53ea\u9009\u62e9\u5fc5\u8981\u7684\u5b57\u6bb5 > db.[\u96c6\u5408\u540d\u79f0].find({\u5b57\u6bb5\u540d\u79f0:1,...}) > \u53c2\u6570\u5b57\u6bb5\u4e0e\u503c\uff0c\u503c\u4e3a\u8868\u793a\u663e\u793a,\u503c\u4e3a0\u4e0d\u663e\u793a. > \u5bf9\u4e8e_id\u5217\u9ed8\u8ba4\u662f\u663e\u793a\u7684\uff0c\u5982\u679c\u4e0d\u663e\u793a\u9700\u8981\u660e\u786e\u8bbe\u7f6e\u4e3a0 13.\u6392\u5e8f > \u65b9\u6cd5sort(),\u7528\u4e8e\u5bf9\u96c6\u8fdb\u884c\u6392\u5e8f > db.\u96c6\u5408\u540d\u79f0.find().sort({\u5b57\u6bb5:1,...}) > \u53c2\u65701\u4e3a\u5347\u5e8f\u6392\u5217,\u53c2\u6570-1\u4e3a\u964d\u5e8f\u6392\u5217 14.\u7edf\u8ba1\u4e2a\u6570 > \u65b9\u6cd5count() \u7528\u4e8e\u7edf\u8ba1\u7ed3\u679c\u96c6\u4e2d\u7684\u6587\u6863\u6761\u6570 15.\u53bb\u91cd > \u65b9\u6cd5 distinct(\"\u53bb\u91cd\u952e\", {json\u6761\u4ef6}) \u5bf9\u6570\u636e\u8fdb\u884c\u53bb\u91cd","title":"object\u64cd\u4f5c"},{"location":"mongodb/#_2","text":"1. \u5907\u4efd\u8bed\u6cd5 > mongodump -h dbhost -d dbname -o dbdirectory > -h \u670d\u52a1\u5668\u5730\u5740,\u4e5f\u53ef\u4ee5\u6307\u5b9a\u7aef\u53e3\u53f7 > -d \u9700\u8981\u5907\u4efd\u7684\u6570\u636e\u5e93\u540d\u79f0 > -o \u5907\u4efd\u7684\u6570\u636e\u5b58\u653e\u4f4d\u7f6e,\u6b64\u76ee\u5f55\u4e2d\u5b58\u653e\u7740\u5907\u4efd\u51fa\u6765\u7684\u6570\u636e\u3002 2. \u6062\u590d\u8bed\u6cd5 > mongorestore -h dbhost -d dbname --dirdb directory > -h \u670d\u52a1\u5668\u5730\u5740 > -d \u9700\u8981\u6062\u590d\u7684\u6570\u636e\u5e93\u5b9e\u4f8b > --dir \u5907\u4efd\u6570\u636e\u6240\u5728\u4f4d\u7f6e","title":"\u6570\u636e\u7684\u5907\u4efd\u4e0e\u6062\u590d"},{"location":"mongodb/#aggregate","text":"\u805a\u5408(aggregate)\u662f\u57fa\u4e8e\u6570\u636e\u5904\u7406\u7684\u805a\u5408\u7ba1\u9053\uff0c\u6bcf\u4e2a\u6587\u6863\u901a\u8fc7\u4e00\u4e2a\u7531\u591a\u4e2a\u9636\u6bb5(stage)\u7ec4\u6210\u7684\u7ba1\u9053,\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u9636\u6bb5\u7684\u7ba1\u9053\u8fdb\u884c\u5206\u7ec4\uff0c\u8fc7\u6ee4\u7b49\u529f\u80fd\uff0c\u7136\u540e\u7ecf\u8fc7\u4e00\u7cfb\u5217\u7684\u5904\u7406\uff0c\u8f93\u51fa\u76f8\u5e94\u7684\u7ed3\u679c\u3002 db.[\u96c6\u5408\u540d\u79f0.aggregate]({\u7ba1\u9053:{\u8868\u8fbe\u5f0f}}) 1. \u8868\u8fbe\u5f0f > \u5904\u7406\u8f93\u5165\u6587\u6863\u5e76\u8f93\u51fa > \u8bed\u6cd5\uff1a\u8868\u8fbe\u5f0f:'$\u5217\u540d' > $sum: \u8ba1\u7b97\u603b\u548c\uff0c $sum:1 \u8868\u793a\u4ee5\u4e00\u500d\u8ba1\u6570 > $avg: \u8ba1\u7b97\u5e73\u5747\u503c > $min: \u83b7\u53d6\u6700\u5c0f\u503c > $max: \u83b7\u53d6\u6700\u5927\u503c > $push: \u5728\u7ed3\u679c\u6587\u6863\u4e2d\u63d2\u5165\u503c\u5230\u4e00\u4e2a\u6570\u7ec4\u4e2d > $first: \u6839\u636e\u8d44\u6e90\u6587\u6863\u7684\u6392\u5e8f\u83b7\u53d6\u7b2c\u4e00\u4e2a\u6587\u6863\u6570\u636e > $last: \u6839\u636e\u8d44\u6e90\u6587\u6863\u7684\u6392\u5e8f\u83b7\u53d6\u6700\u540e\u4e00\u4e2a\u6587\u6863\u6570\u636e 2. $group \u5c06\u96c6\u5408\u4e2d\u7684\u6587\u6863\u5206\u7ec4,\u53ef\u7528\u4e8e\u7edf\u8ba1\u7ed3\u679c > _id\u8868\u793a\u5206\u7ec4\u7684\u4f9d\u636e,\u4f7f\u7528\u6bcf\u4e2a\u5b57\u6bb5\u7684\u683c\u5f0f\u4e3a'$\u5b57\u6bb5' > $group \u5bf9\u5e94\u7684\u5b57\u5178\u4e2d\u6709\u51e0\u4e2a\u952e\uff0c\u7ed3\u679c\u4e2d\u5c31\u6709\u51e0\u4e2a\u952e > \u53d6\u4e0d\u540c\u7684\u5b57\u6bb5\u7684\u503c\u9700\u8981\u4f7f\u7528$, $gender, $age > \u53d6\u5b57\u5178\u5d4c\u5957\u7684\u5b57\u5178\u4e2d\u7684\u503c\u7684\u65f6\u5019 $_id.country > \u80fd\u591f\u540c\u65f6\u6309\u7167\u591a\u4e2a\u952e\u8fdb\u884c\u5206\u7ec4{$group:{_id:{country:\"$country\", province:\"$province\"}}} 3. $project > \u4fee\u6539\u8f93\u5165\u6587\u6863\u7684\u7ed3\u6784\uff0c\u5982\u91cd\u547d\u540d\uff0c\u589e\u52a0\uff0c\u5220\u9664\u5b57\u6bb5\uff0c\u521b\u5efa\u8ba1\u7b97\u7ed3\u679c 4. $match > \u7528\u4e8e\u8fc7\u6ee4\u6570\u636e,\u53ea\u8f93\u51fa\u7b26\u5408\u6761\u4ef6\u7684\u6587\u6863 5. $sort > \u5c06\u8f93\u5165\u6587\u6863\u6392\u5e8f\u540e\u8f93\u51fa 6. $limit > \u9650\u5236\u805a\u5408\u7ba1\u9053\u8fd4\u56de\u7684\u6587\u6863\u6570 7. $skip > \u8df3\u8fc7\u6307\u5b9a\u6570\u91cf\u7684\u6587\u6863\uff0c\u5e76\u8fd4\u56de\u4f59\u4e0b\u7684\u6587\u6863 > \u6ce8\u610f\uff0c\u5148\u4f7f\u7528skip,\u540e\u4f7f\u7528limit,\u4ee5\u63d0\u9ad8\u6027\u80fd 8. $unwind > \u5c06\u6587\u6863\u4e2d\u7684\u67d0\u4e00\u4e2a\u6570\u7ec4\u7c7b\u578b\u5b57\u6bb5\u62c6\u5206\u6210\u591a\u6761\uff0c\u6bcf\u6761\u5305\u542b\u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u503c > unwind\u5728\u5b57\u6bb5\u7b49\u4e8e null, []\u7684\u65f6\u5019,\u5c5e\u6027 preserveNullAndEmptyArrays\u503c\u4e3atrue\uff0c\u8868\u793a\u4fdd\u7559\u5c5e\u6027\u503c\u4e3a\u7a7a\u7684\u6587\u6863 > db.t.aggregate({$unwind:{path:'$\u5b57\u6bb5\u540d', preserveNullAndEmptyArrays:<boolean>}})","title":"\u805a\u5408aggregate"},{"location":"mongodb/#_3","text":"\u7d22\u5f15: \u4ee5\u63d0\u5347\u67e5\u8be2\u901f\u5ea6 \u8bed\u6cd5: db.\u96c6\u5408.ensureIndex({\u5c5e\u6027:1}), 1\u8868\u793a\u5347\u5e8f, -1\u8868\u793a\u964d\u5e8f > \u5728\u5927\u90e8\u5206\u60c5\u51b5\u4e0b,\u7d22\u5f15\u7684\u5347\u964d\u5e8f\u8fc7\u5ea6\u7684\u5f71\u54cd\u67e5\u8be2\u901f\u5ea6 > \u4f46\u5728 sort \u60c5\u51b5\u4e0b, \u540c\u5e8f\u6027\u80fd\u4f1a\u66f4\u4f18 > .explain('executionStats') \u53ef\u83b7\u5f97\u67e5\u8be2\u65f6\u95f4\u7b49\u76f8\u5173\u4fe1\u606f > db.t.getindexes() \u67e5\u770b\u5f53\u524d\u96c6\u5408\u7684\u6240\u6709\u7d22\u5f15 > db.t.dropIndex('\u7d22\u5f15\u540d') > \u7d22\u5f15unique db.t.ensureIndex({\"name\":1}, {\"unique\": true}) > \u8054\u5408\u7d22\u5f15 db.t.ensureIndex({name:1, age:1})","title":"\u521b\u5efa\u7d22\u5f15"},{"location":"mongodb/#pymongo","text":"from pymongo import MongoClint # conding=utf-8 from pymongo import MongoClient class TestMongo: def __init__(self): client = MongoClient(host=\"127.0.0.1\", port=27017) collection = client[\"test\"][\"test1\"] # \u63d2\u5165\u591a\u6761\u6570\u636e, \u8fd4\u56de\u63d2\u5165\u7684_id # ret1 = collection.insert({\"name\":\"xiaohong\", \"age\": 10}) # print(ret1) # \u63d2\u5165\u591a\u6761\u6570\u636e # data_list = [{\"name\": \"test{}\".format(i)} for i in range(15,20)] # rets = collection.insert_many(data_list) # print(rets) # \u67e5\u8be2\u4e00\u4e2a\u8bb0\u5f55 :{'_id': ObjectId('5e81eba91968627157ad0349'), 'name': 'test15'} # t = collection.find_one({\"name\": \"test15\"}) # print(t) # \u67e5\u8be2\u6240\u6709\u8bb0\u5f55 # cu = collection.find({\"name\": \"test15\"}) # print(cu) # for i in cu: # print(i) # cu_lst = list(cu) # <pymongo.cursor.Cu rsor object at 0x0000023E264D9490> # {'_id': ObjectId('5e81eba91968627157ad0349'), 'name': 'test15'} # Cursor \u6e38\u6807 # \u66f4\u65b0\u4e00\u6761\u8bb0\u5f55 # ret = collection.update_one({\"name\": \"test16\"}, {\"$set\": {\"name\": \"new_test16\"}}) # print(ret) # <pymongo.results.UpdateResult object at 0x0000024593F60900> # \u66f4\u65b0\u5168\u90e8 # collection.update_many({}) # \u5220\u9664 # collection.delete_one() # collection.delete_many() class main(): TestMongo() if __name__ == \"__main__\": main() In [1]: import datetime In [2]: datetime.datetime.now() Out[2]: datetime.datetime(2020, 3, 27, 11, 16, 51, 308012) In [3]: type(datetime.datetime.now()) Out[3]: datetime.datetime > show collections > new Date(\"2019-12-12\") # ISODate\u5bf9\u5e94datetime.datetime\u7c7b\u578b ISODate(\"2019-12-12T00:00:00Z\") > db.test1.insert({\"name\": \"xiaowang\", \"age\":10}) WriteResult({ \"nInserted\" : 1 }) > db.test1.find() { \"_id\" : ObjectId(\"5e7d71a5b36e3c138608d6c3\"), \"name\" : \"xiaowang\", \"age\" : 10 } > db.test1.insert({name:\"xiaohong\", age:18}) WriteResult({ \"nInserted\" : 1 }) > db.test1.find() { \"_id\" : ObjectId(\"5e7d71a5b36e3c138608d6c3\"), \"name\" : \"xiaowang\", \"age\" : 10 } { \"_id\" : ObjectId(\"5e7d72cfb36e3c138608d6c4\"), \"name\" : \"xiaohong\", \"age\" : 18 } > db.test1.save({ \"_id\" : ObjectId(\"5e7d72cfb36e3c138608d6c4\"), \"name\" : \"xiaohong\", \"age\" : 16 }) WriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 }) > db.test1.find() { \"_id\" : ObjectId(\"5e7d71a5b36e3c138608d6c3\"), \"name\" : \"xiaowang\", \"age\" : 10 } { \"_id\" : ObjectId(\"5e7d72cfb36e3c138608d6c4\"), \"name\" : \"xiaohong\", \"age\" : 16 } # \u4fee\u6539update > db.test1.update({\"name\" : \"xiaowang\"}, {\"name\" : \"xiaoming\"}) WriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 }) > db.test1.find() { \"_id\" : ObjectId(\"5e7d71a5b36e3c138608d6c3\"), \"name\" : \"xiaoming\" } { \"_id\" : ObjectId(\"5e7d72cfb36e3c138608d6c4\"), \"name\" : \"xiaohong\", \"age\" : 16 } # \u4f7f\u7528 $set:{json} \u8fdb\u884c\u9009\u5b9a\u5b57\u7b26\u4e32\u4fee\u6539 > db.test1.update({\"name\" : \"xiaohong\"}, {$set:{\"name\": \"xiaoqiang\"}}) WriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 }) { \"_id\" : ObjectId(\"5e7d71a5b36e3c138608d6c3\"), \"name\" : \"xiaoming\" } { \"_id\" : ObjectId(\"5e7d72cfb36e3c138608d6c4\"), \"name\" : \"xiaoqiang\", \"age\" : 16 } # \u5220\u9664 > db.test1.remove({name:\"xiaoming\"},{justOne:true}) WriteResult({ \"nRemoved\" : 1 }) > db.test1.find() { \"_id\" : ObjectId(\"5e7d72cfb36e3c138608d6c4\"), \"name\" : \"xiaoqiang\", \"age\" : 16 } # \u67e5\u8be2 > db.test1.find({age:{$lte:18}}) { \"_id\" : ObjectId(\"5e7d72cfb36e3c138608d6c4\"), \"name\" : \"xiaoqiang\", \"age\" : 16 } > db.test1.find({age:{$in:[16, 18]}}) { \"_id\" : ObjectId(\"5e7d72cfb36e3c138608d6c4\"), \"name\" : \"xiaoqiang\", \"age\" : 16 } # \u4f7f\u7528 $where:function > db.test1.find({$where:function(){return this.age<=18}}) { \"_id\" : ObjectId(\"5e7d72cfb36e3c138608d6c4\"), \"name\" : \"xiaoqiang\", \"age\" : 16 } # \u53ea\u8fd4\u56de\u7279\u5b9a\u6570\u636e > db.test1.find({$where:function(){return this.age<=18}},{name:1}) { \"_id\" : ObjectId(\"5e7d72cfb36e3c138608d6c4\"), \"name\" : \"xiaoqiang\"} # \u5907\u4efd PS C:\\Users\\Night\\code\\mongodb> mongodump -d test1 -o . 2020-03-27T23:31:54.301+0800 writing test1.test1 to 2020-03-27T23:31:54.384+0800 done dumping test1.test1 (1 document) PS C:\\Users\\Night\\code\\mongodb> ls \u76ee\u5f55: C:\\Users\\Night\\code\\mongodb Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 2020/3/27 23:31 test1 # \u6062\u590d PS C:\\Users\\Night\\code\\mongodb> mongorestore -d test2 --dir test1 2020-03-27T23:39:34.469+0800 the --db and --collection args should only be used when restoring from a BSON file. Other uses are deprecated and will not exist in the future; use --nsInclude instead 2020-03-27T23:39:34.501+0800 building a list of collections to restore from test1 dir 2020-03-27T23:39:34.504+0800 reading metadata for test2.test1 from test1\\test1.metadata.json 2020-03-27T23:39:34.539+0800 restoring test2.test1 from test1\\test1.bson 2020-03-27T23:39:34.544+0800 no indexes to restore 2020-03-27T23:39:34.544+0800 finished restoring test2.test1 (1 document, 0 failures) 2020-03-27T23:39:34.544+0800 1 document(s) restored successfully. 0 document(s) failed to restore. # \u805a\u5408 aggregate > db.test1.aggregate( {$group:{_id:\"$age\", count:{$sum:1}}} ) { \"_id\" : 16 } > db.test1.aggregate( ... {$group:{_id:\"$age\", count:{$sum:1}}} ... ) { \"_id\" : 16, \"count\" : 1 } > db.test1.aggregate( ... {$group:{_id:\"$age\", ... count:{$sum:1}, ... avg_age:{$avg:\"$age\"} ... }} ... ) { \"_id\" : 16, \"count\" : 1, \"avg_age\" : 16 } > db.test1.aggregate( ... { ... $group:{ ... _id:\"$age\", ... count:{$sum:1}, ... avg_age:{$avg:\"$age\"} ... } ... }, ... { ... $project:{ ... gender:\"$_id\", ... count:\"$count\", ... avg_age:\"$avg_age\" ... } ... } ... ) { \"_id\" : 16, \"gender\" : 16, \"count\" : 1, \"avg_age\" : 16 } > db.test1.insert({\"username\": \"Alex\", \"tags\":['C#', 'Java', 'C++']}) WriteResult({ \"nInserted\" : 1 }) > db.test1.find() { \"_id\" : ObjectId(\"5e7d72cfb36e3c138608d6c4\"), \"name\" : \"xiaoqiang\", \"age\" : 16 } { \"_id\" : ObjectId(\"5e8001f313c2dc467a07b8d8\"), \"username\" : \"Alex\", \"tags\" : [ \"C#\", \"Java\", \"C++\" ] } > db.test1.aggregate({$match:{username:\"Alex\"}}) { \"_id\" : ObjectId(\"5e8001f313c2dc467a07b8d8\"), \"username\" : \"Alex\", \"tags\" : [ \"C#\", \"Java\", \"C++\" ] } > db.test1.aggregate({$match:{username:\"Alex\"}},{$unwind:\"$tags\"}) { \"_id\" : ObjectId(\"5e8001f313c2dc467a07b8d8\"), \"username\" : \"Alex\", \"tags\" : \"C#\" } { \"_id\" : ObjectId(\"5e8001f313c2dc467a07b8d8\"), \"username\" : \"Alex\", \"tags\" : \"Java\" } { \"_id\" : ObjectId(\"5e8001f313c2dc467a07b8d8\"), \"username\" : \"Alex\", \"tags\" : \"C++\" } > db.test1.aggregate({$match:{username:\"Alex\"}},{$unwind:\"$tags\"},{$group:{_id:null, sum:{$sum:1}}}) { \"_id\" : null, \"sum\" : 3 } # \u7d22\u5f15 > use test2 switched to db test2 > for(i=0; i<100000; i++){db.test2.insert({name:'test'+i, age:i})} WriteResult({ \"nInserted\" : 1 }) > db.test2.find().count() 100000 > db.test2.find() { \"_id\" : ObjectId(\"5e80087a13c2dc467a07b8d9\"), \"name\" : \"test0\", \"age\" : 0 } Type \"it\" for more > db.test2.find({name:\"test99999\"}) { \"_id\" : ObjectId(\"5e8008b813c2dc467a093f78\"), \"name\" : \"test99999\", \"age\" : 99999 } > db.test2.find({name:\"test99999\"}).explain('executionStats') { ... } # \u521b\u5efa\u7d22\u5f15 > db.test2.ensureIndex({name:1}) { \"createdCollectionAutomatically\" : false, \"numIndexesBefore\" : 1, \"numIndexesAfter\" : 2, \"ok\" : 1 } # \u67e5\u770b\u5f53\u524d\u5e93\u7684\u6240\u6709\u7d22\u5f15 > db.test2.getIndexes() [ { \"v\" : 2, \"key\" : { \"_id\" : 1 }, \"name\" : \"_id_\", \"ns\" : \"test2.test2\" }, { \"v\" : 2, \"key\" : { \"name\" : 1 }, \"name\" : \"name_1\", \"ns\" : \"test2.test2\" } ] # \u5220\u9664\u7d22\u5f15 > db.test2.dropIndex({name:1}) { \"nIndexesWas\" : 2, \"ok\" : 1 } > db.test2.getIndexes() [ { \"v\" : 2, \"key\" : { \"_id\" : 1 }, \"name\" : \"_id_\", \"ns\" : \"test2.test2\" } ] db.test1.aggregate( { $match:{ $or:[ {age:{$gt:15}}, {name:{ $in:[\"xiaoming\",\"xiaoqiang\",\"xiaohong\"] } } ] } }, { $group:{ _id:\"$age\", count:{$sum:1}, avg_age:{$avg:\"$age\"} } }, { $project:{ gender:\"$_id\", count:\"$count\", avg_age:\"$avg_age\" } } )","title":"pymongo"},{"location":"python1/","text":"Python \u57fa\u7840 Print 1. \u683c\u5f0f\u7b26\u53f7\u8f6c\u6362 \u7b26\u53f7 \u8bf4\u660e %c \u5b57\u7b26 %s \u901a\u8fc7str( ) \u5b57\u7b26\u4e32\u8f6c\u6362\u6765\u683c\u5f0f\u5316 %i \u6709\u7b26\u53f7\u5341\u8fdb\u5236\u6574\u6570 %d \u6709\u7b26\u53f7\u5341\u8fdb\u5236\u6574\u6570 %o \u516b\u8fdb\u5236\u6574\u6570 %x \u5341\u516d\u8fdb\u5236\u6574\u6570\uff08\u5b57\u6bcd\u5c0f\u5199\uff09 %X \u5341\u516d\u8fdb\u5236\u6574\u6570\uff08\u5b57\u6bcd\u5927\u5199\uff09 %e \u7d22\u5f15\u7b26\u53f7\uff08\u5c0f\u5199'e'\uff09 %E \u7d22\u5f15\u7b26\u53f7\uff08\u5927\u5199\"E\"\uff09 %f \u6d6e\u70b9\u5b9e\u6570 %g %f \u548c %e \u7684\u7b80\u5199 %G %f \u548c %E\u7684\u7b80\u5199 2. Print(\" %s, %d, %s\"%(name, age, addr)) Python2 , Python3 \u7684\u533a\u522b \u4e2d\u6587\u5904\u7406 a. #coding=utf-8 b. #_*_* coding:utf-8 _*_ Input(\"\") a. Py3 \u5c06 i = input() \u4f5c\u4e3a\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u4fe1\u606f\u5b58\u5165\u53d8\u91cf I b. Py2 \u5c06 i = input (\"\") \u5c06\u8f93\u5165\u7684\u5185\u5bb9\u5f53\u4f5c\u4ee3\u7801\u6267\u884c\uff0c\u5728python2\u4e2d\u5c06\u4f7f\u7528 raw_input() \u7c7b\u578b\u8f6c\u6362 \u5e38\u7528\u7684\u6570\u636e\u7c7b\u578b\u8f6c\u6362 \u51fd\u6570 \u8bf4\u660e int(x [,base ]) \u5c06x\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6574\u6570 long(x [,base ]) \u5c06x\u8f6c\u6362\u4e3a\u4e00\u4e2a\u957f\u6574\u6570 float(x ) \u5c06x\u8f6c\u6362\u5230\u4e00\u4e2a\u6d6e\u70b9\u6570 complex(real [,imag ]) \u521b\u5efa\u4e00\u4e2a\u590d\u6570 str(x ) \u5c06\u5bf9\u8c61 x \u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32 repr(x ) \u5c06\u5bf9\u8c61 x \u8f6c\u6362\u4e3a\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32 eval(str ) \u7528\u6765\u8ba1\u7b97\u5728\u5b57\u7b26\u4e32\u4e2d\u7684\u6709\u6548Python\u8868\u8fbe\u5f0f,\u5e76\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61 tuple(s ) \u5c06\u5e8f\u5217 s \u8f6c\u6362\u4e3a\u4e00\u4e2a\u5143\u7ec4 list(s ) \u5c06\u5e8f\u5217 s \u8f6c\u6362\u4e3a\u4e00\u4e2a\u5217\u8868 chr(x ) \u5c06\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5b57\u7b26 unichr(x ) \u5c06\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u4e3aUnicode\u5b57\u7b26 ord(x ) \u5c06\u4e00\u4e2a\u5b57\u7b26\u8f6c\u6362\u4e3a\u5b83\u7684\u6574\u6570\u503c hex(x ) \u5c06\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32 oct(x ) \u5c06\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u4e3a\u4e00\u4e2a\u516b\u8fdb\u5236\u5b57\u7b26\u4e32 If\u5224\u65ad 1. If x: else 2. If x: elif x: .. else \u5173\u952e\u5b57 >>> import keyword >>> keyword.kwlist ['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'] \u8fd0\u7b97\u7b26 + - * % // \u6574\u9664 ** \u5e42 / \u9664 \"xxx\" * n \u5b57\u7b26\u4e32\u7d2f\u52a0 N \u6b21 <> != != or || and && not() ! += -= (\u81ea\u8eab)\u4fee\u6539 while while x: pass for a. for i in range(): b. for \u2026(break) else: break continue \u7565 \u5b57\u7b26\u4e32 a. + b. \" .. %s ..\"%x c. A = \"names\" A[2] => m d. \u5b57\u7b26\u4e32\u5206\u5272 A[1:3] = am X[\u8d77\u59cb\u4f4d: \u7ec8\u503c\u4f4d] A[1:-1]= am X[\u8d77\u59cb\u4f4d: \u5012\u6570\u7ec8\u503c\u4f4d] A[1:] = ames x[\u8d77\u59cb\u4f4d: ] A[1:-1:2] X[\u8d77\u59cb\u4f4d: \u7ec8\u6b62\u4f4d\uff1a\u6b65\u957f] e. \u9006\u5e8f name = \"yurisa\"; print(name[::-1]) f. \u5b57\u7b26\u4e32\u7684\u5e38\u89c1\u64cd\u4f5c Find \u6b63\u67e5\u627e\uff0c\u5982\u679c\u662f\u8fd4\u56de\u5f00\u59cb\u7684\u7d22\u5f15\u503c\uff0c\u5426\u5219\u8fd4\u56de-1 Rfind \u9006\u5411\u67e5\u627e Index \u6b63\u67e5\u627e\uff0c\u672a\u67e5\u5230\u5219\u629b\u51fa\u5f02\u5e38 Rindex \u9006\u5411\u67e5\u627e Count \u7edf\u8ba1\u51fa\u73b0\u7684\u4e2a\u6570 Replace(\"XXX\", \"xxx\"\uff0cx) \u66ff\u6362,\u66ff\u6362\u6b21\u6570 Split(\" \") \u5207\u5272 capitalize \u628a\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5927\u5199 title \u628a\u5b57\u7b26\u4e32\u7684\u6bcf\u4e2a\u5355\u8bcd\u9996\u5b57\u6bcd\u5927\u5199 startswith \u68c0\u67e5\u5b57\u7b26\u4e32\u662f\u5426\u662f\u4ee5 x \u5f00\u5934, \u662f\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False endswith \u68c0\u67e5\u5b57\u7b26\u4e32\u662f\u5426\u4ee5 X \u7ed3\u675f\uff0c\u5982\u679c\u662f\u8fd4\u56deTrue,\u5426\u5219\u8fd4\u56de False Lower \u8f6c\u6362 x \u4e2d\u6240\u6709\u5927\u5199\u5b57\u7b26\u4e3a\u5c0f\u5199 upper \u8f6c\u6362 x \u4e2d\u7684\u5c0f\u5199\u5b57\u6bcd\u4e3a\u5927\u5199 Ljust \u8fd4\u56de\u4e00\u4e2a\u539f\u5b57\u7b26\u4e32\u5de6\u5bf9\u9f50,\u5e76\u4f7f\u7528\u7a7a\u683c\u586b\u5145\u81f3\u957f\u5ea6 width \u7684\u65b0\u5b57\u7b26\u4e32 rjust \u8fd4\u56de\u4e00\u4e2a\u539f\u5b57\u7b26\u4e32\u53f3\u5bf9\u9f50,\u5e76\u4f7f\u7528\u7a7a\u683c\u586b\u5145\u81f3\u957f\u5ea6 width \u7684\u65b0\u5b57\u7b26\u4e32 center \u8fd4\u56de\u4e00\u4e2a\u539f\u5b57\u7b26\u4e32\u5c45\u4e2d,\u5e76\u4f7f\u7528\u7a7a\u683c\u586b\u5145\u81f3\u957f\u5ea6 width \u7684\u65b0\u5b57\u7b26\u4e32 lstrip \u5220\u9664 mystr \u5de6\u8fb9\u7684\u7a7a\u767d\u5b57\u7b26 rstrip \u5220\u9664 mystr \u5b57\u7b26\u4e32\u672b\u5c3e\u7684\u7a7a\u767d\u5b57\u7b26 strip \u5220\u9664mystr\u5b57\u7b26\u4e32\u4e24\u7aef\u7684\u7a7a\u767d\u5b57\u7b26 partition \u628amystr\u4ee5str\u5206\u5272\u6210\u4e09\u90e8\u5206,str\u524d\uff0cstr\u548cstr\u540e rpartition \u7c7b\u4f3c\u4e8e partition()\u51fd\u6570,\u4e0d\u8fc7\u662f\u4ece\u53f3\u8fb9\u5f00\u59cb splitlines \u6309\u7167\u884c\u5206\u9694\uff0c\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u5404\u884c\u4f5c\u4e3a\u5143\u7d20\u7684\u5217\u8868 Isalpha \u5982\u679c mystr \u6240\u6709\u5b57\u7b26\u90fd\u662f\u5b57\u6bcd \u5219\u8fd4\u56de True,\u5426\u5219\u8fd4\u56de False isdigit \u5982\u679c mystr \u53ea\u5305\u542b\u6570\u5b57\u5219\u8fd4\u56de True \u5426\u5219\u8fd4\u56de False isalnum \u5982\u679c mystr \u6240\u6709\u5b57\u7b26\u90fd\u662f\u5b57\u6bcd\u6216\u6570\u5b57\u5219\u8fd4\u56de True,\u5426\u5219\u8fd4\u56de False isspace \u5982\u679c mystr \u4e2d\u53ea\u5305\u542b\u7a7a\u683c\uff0c\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False join mystr \u4e2d\u6bcf\u4e2a\u5b57\u7b26\u540e\u9762\u63d2\u5165str,\u6784\u9020\u51fa\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32 \u5217\u8868 1. \u540c\u65f6\u5b58\u50a8\u591a\u79cd\u6570\u636e\u7c7b\u578b `a = []` 2. a.append(\"\") \u6dfb\u52a0 a.insert(n,\"\") \u63d2\u5165 a=b + c / a.extend(b) \u96c6\u5408\u8ffd\u52a0/\u5408\u5e76 a.pop() \u628a\u6700\u540e\u4e00\u4e2a\u51fa\u6808 a.remove(\" x \") \u6839\u636e\u5185\u5bb9\u5220\u9664\uff0c\u53ea\u5220\u9664\u4e00\u6b21 a[x :x :x] \u5217\u8868\u4e0b\u6807\u5207\u7247 Del a[x] \u6839\u636e\u4e0b\u6807\u5220\u9664 a[x] = x \u4fee\u6539 If \"xx\" in a \u67e5\u627e\u5b58\u5728 If \"xx\" not in a \u67e5\u627e\u4e0d\u5b58\u5728 3. \u5e8f\u5217\u7c7b\u578b \u6392\u5e8f a.sort(); \u9006\u6392\u5e8f a.sort(reverse = True) \u9006\u5e8f a.reverse() \u5b57\u5178 1. Key:value 1) Info = {\u201cxx\u201d, \"XX\"} \u521d\u59cb\u5316\u5b57\u5178 Info[\"xx\"] = \"ZZ\" \u6dfb\u52a0/\u4fee\u6539 Del info[\"xx\"] \u5220\u9664 Info.get(\"xx\") \u83b7\u53d6 Len(info) \u957f\u5ea6 Info.keys() \u83b7\u53d6\u952e\uff082\u5217\u8868\uff0c3\u5bf9\u8c61\uff09 Info.values() \u83b7\u53d6\u503c\uff082\u5217\u8868\uff0c3\u5bf9\u8c61\uff09 Info.items\uff08\uff09 2. \u6392\u5e8f Info.sort(key = lambda x:x['age']) \u51fd\u6570 1. def name(): pass 2. global \u5168\u5c40\u4fee\u9970 1) \u5728\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c\u5bf9\u5168\u5c40\u53d8\u91cf\u8fdb\u884c\u4fee\u6539\u7684\u65f6\uff0c\u662f\u5426\u4f7f\u7528global\uff0c\u662f\u5426\u4fee\u6539\u4e86\u5168\u5c40\u53d8\u91cf\u7684\u6307\u5411 a) \u5982\u679c\u4fee\u6539\u4e86\u6307\u5411\uff0c\u5373\u8ba9\u5168\u5c40\u53d8\u91cf\u6307\u5411\u4e00\u4e2a\u65b0\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5219\u5fc5\u987b\u4f7f\u7528global b) \u5982\u679c\u4ec5\u4ec5\u4fee\u6539\u4e86 \u6307\u5411\u7684\u7a7a\u95f41\u4e2d\u7684\u6570\u636e\uff0c\u5219\u6b64\u65f6\u4e0d\u5fc5\u4f7f\u7528global 3. \u7f3a\u7701\u53c2\u6570, \u547d\u540d\u53c2\u6570 4. \u4e0d\u5b9a\u957f\u53c2\u6570 1) *args \u5143\u7ec4 **kwargs \u5b57\u5178 key = value 5. \u62c6\u5305 1) \u5728\u51fd\u6570\u8c03\u7528\u65f6\uff0c\u5c06\u8d4b\u503c\u7684\u5143\u7ec4/\u5b57\u5178\u96c6\u5408 \u52a0 * / ** \u62c6\u5305\u540e\u5206\u522b\u8d4b\u503c\u7ed9 *args **kwargs 2) \u62c6\u5143\u7ec4 * 3) \u62c6\u5b57\u5178 ** 4) \u4ea4\u6362 a = 5; b = 6; a, b = b, a; 5) Enumerate(\u5217\u8868) \u8f93\u51fa =>\uff080\uff0c\"xx\"\uff09 6. \u533f\u540d\u51fd\u6570 lambda def test(a, b, func): return func(a,b); #lambda x, y: x + y print(test(11, 22, eval(input(\"\u8bf7\u8f93\u5165\u4e00\u4e2alambda\u8868\u8fbe\u5f0f\\n\")))); \u5143\u7ec4 1. \u5143\u7ec4\u7684\u5143\u7d20\u4e0d\u80fd\u4fee\u6539(\u589e\uff0c\u5220\uff0c\u6539 \u90fd\u4e0d\u53ef\u4ee5) 2. Info = (11, 22, 33); \u5f15\u7528 i. Id() \u67e5\u770b\u53d8\u91cf\u7684\u5730\u5740 ii. \u96c6\u5408\u4e0e\u5b57\u5178\u90fd\u662f\u5f15\u7528\u7c7b\u578b \u6587\u4ef6 1. \u6253\u5f00\u5173\u95ed\u6587\u4ef6 2. \u6587\u4ef6\u8bfb\u5199 \u8bbf\u95ee\u6a21\u5f0f \u8bf4\u660e r \u4ee5\u53ea\u8bfb\u65b9\u5f0f\u6253\u5f00\u6587\u4ef6\u3002\u6587\u4ef6\u7684\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u5f00\u5934\u3002\u8fd9\u662f\u9ed8\u8ba4\u6a21\u5f0f\u3002 w \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u53ea\u7528\u4e8e\u5199\u5165\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\u5219\u5c06\u5176\u8986\u76d6\u3002 \u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u3002 a \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8ffd\u52a0\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u6587\u4ef6\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u7ed3\u5c3e\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u65b0\u7684\u5185\u5bb9\u5c06\u4f1a\u88ab\u5199\u5165\u5230\u5df2\u6709\u5185\u5bb9\u4e4b\u540e\u3002\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u8fdb\u884c\u5199\u5165\u3002 rb \u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u53ea\u8bfb\u3002\u6587\u4ef6\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u5f00\u5934\u3002\u8fd9\u662f\u9ed8\u8ba4\u6a21\u5f0f\u3002 wb \u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u53ea\u7528\u4e8e\u5199\u5165\u3002 \u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\u5219\u5c06\u5176\u8986\u76d6\u3002\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u3002 ab \u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8ffd\u52a0\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u6587\u4ef6\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u7ed3\u5c3e\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u65b0\u7684\u5185\u5bb9\u5c06\u4f1a\u88ab\u5199\u5165\u5230\u5df2\u6709\u5185\u5bb9\u4e4b\u540e\u3002\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u8fdb\u884c\u5199\u5165\u3002 r+ \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\u3002\u6587\u4ef6\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u5f00\u5934\u3002 w+ \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\u5219\u5c06\u5176\u8986\u76d6\u3002\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u3002 a+ \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u6587\u4ef6\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u7ed3\u5c3e\u3002 \u6587\u4ef6\u6253\u5f00\u65f6\u4f1a\u662f\u8ffd\u52a0\u6a21\u5f0f\u3002\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\u3002 rb+ \u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\u3002\u6587\u4ef6\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u5f00\u5934\u3002 wb+ \u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\u5219\u5c06\u5176\u8986\u76d6\u3002 \u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u3002 ab+ \u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8ffd\u52a0\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u6587\u4ef6\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u7ed3\u5c3e\u3002 \u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\u3002 3. \u5b9a\u4f4d\u8bfb\u5199 tell() \u5728\u8bfb\u5199\u6587\u4ef6\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u60f3\u77e5\u9053\u5f53\u524d\u7684\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u7528\u6765\u83b7\u53d6 seek() \u5b9a\u4f4d\u5230\u67d0\u4e2a\u4f4d\u7f6e seek(offset, from)\u67092\u4e2a\u53c2\u6570 \u2022 offset:\u504f\u79fb\u91cf \u2022 from:\u65b9\u5411 \u25cb 0:\u8868\u793a\u6587\u4ef6\u5f00\u5934 \u25cb 1:\u8868\u793a\u5f53\u524d\u4f4d\u7f6e \u25cb 2:\u8868\u793a\u6587\u4ef6\u672b\u5c3e 4. \u6587\u4ef6\u7684\u76f8\u5173\u64cd\u4f5c Import os rename(\u9700\u8981\u4fee\u6539\u7684\u6587\u4ef6\u540d, \u65b0\u7684\u6587\u4ef6\u540d) os\u6a21\u5757\u4e2d\u7684rename()\u53ef\u4ee5\u5b8c\u6210\u5bf9\u6587\u4ef6\u7684\u91cd\u547d\u540d\u64cd\u4f5c remove(\u5f85\u5220\u9664\u7684\u6587\u4ef6\u540d) os\u6a21\u5757\u4e2d\u7684remove()\u53ef\u4ee5\u5b8c\u6210\u5bf9\u6587\u4ef6\u7684\u5220\u9664\u64cd\u4f5c 5. \u6587\u4ef6\u5939\u7684\u76f8\u5173\u64cd\u4f5c import os os.mkdir(\"xxx\") \u521b\u5efa\u6587\u4ef6\u5939 os.getcwd() \u83b7\u53d6\u5f53\u524d\u76ee\u5f55 os.chdir(\"../\") \u6539\u53d8\u9ed8\u8ba4\u76ee\u5f55 os.listdir(\"./\") \u83b7\u53d6\u76ee\u5f55\u5217\u8868 os.rmdir(\"xxx\") \u5220\u9664\u6587\u4ef6\u5939 file = open(\"testFile\", \"r+\") if file != None: print(file.read()) file.close() #-*- coding:utf-8 -*- #Test word file = open(\"testFile\", \"r+\") if file != None: file.write(\"text\") #\u8fd9\u91cc\u5199\u5165\u6587\u4ef6\u540e\uff0c\u6307\u9488\u4f1a\u6307\u5411\u6587\u4ef6\u7684\u672b\u5c3e\uff0c\u5bfc\u81f4\u65e0\u6cd5\u76f4\u63a5\u8bfb\u53d6 #\u9650\u4e8e\u76ee\u524d\u80fd\u529b\u6709\u9650\uff0c\u4f7f\u7528\u5173\u95ed\u6587\u4ef6\u518d\u6253\u5f00\u7684\u65b9\u5f0f\u91cd\u7f6e\u6307\u9488\uff0c\u8bfb\u53d6\u5199\u5165\u7684\u5185\u5bb9 file.close() file = open(\"testFile\", \"r+\") print(file.read()) # Readlines \u5c31\u50cfread\u6ca1\u6709\u53c2\u6570\u65f6\u4e00\u6837\uff0creadlines\u53ef\u4ee5\u6309\u7167\u884c\u7684\u65b9\u5f0f\u628a\u6574\u4e2a\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u8fdb\u884c\u4e00\u6b21\u6027\u8bfb\u53d6\uff0c # \u5e76\u4e14\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e00\u884c\u7684\u6570\u636e\u4e3a\u4e00\u4e2a\u5143\u7d20 # Readline \u8bfb\u4e00\u884c oldFile = open(\"testFile\", \"r\") fcp = open(\"testFileCP\", \"w\") n = 1 while True: fileCon = oldFile.read(1024 * n) if len(fileCon) == 0: break fcp.write(fileCon) oldFile.close() fcp.close() # \u6587\u4ef6\u5b9a\u4f4d #-*- coding:utf-8 -*- #Test word f = open(\"testFile\", \"r\") fcon = f.seek(2, 0) print(f.read()) print(f.tell()) f.close() # \u6587\u4ef6\u64cd\u4f5c\u76f8\u5173 #-*- coding:utf-8 -*- #Test word import os #os.rename(\"TestF\",\"testFile\") os.remove(\"testFile\")","title":"Python \u57fa\u7840"},{"location":"python1/#python","text":"","title":"Python \u57fa\u7840"},{"location":"python1/#print","text":"1. \u683c\u5f0f\u7b26\u53f7\u8f6c\u6362 \u7b26\u53f7 \u8bf4\u660e %c \u5b57\u7b26 %s \u901a\u8fc7str( ) \u5b57\u7b26\u4e32\u8f6c\u6362\u6765\u683c\u5f0f\u5316 %i \u6709\u7b26\u53f7\u5341\u8fdb\u5236\u6574\u6570 %d \u6709\u7b26\u53f7\u5341\u8fdb\u5236\u6574\u6570 %o \u516b\u8fdb\u5236\u6574\u6570 %x \u5341\u516d\u8fdb\u5236\u6574\u6570\uff08\u5b57\u6bcd\u5c0f\u5199\uff09 %X \u5341\u516d\u8fdb\u5236\u6574\u6570\uff08\u5b57\u6bcd\u5927\u5199\uff09 %e \u7d22\u5f15\u7b26\u53f7\uff08\u5c0f\u5199'e'\uff09 %E \u7d22\u5f15\u7b26\u53f7\uff08\u5927\u5199\"E\"\uff09 %f \u6d6e\u70b9\u5b9e\u6570 %g %f \u548c %e \u7684\u7b80\u5199 %G %f \u548c %E\u7684\u7b80\u5199 2. Print(\" %s, %d, %s\"%(name, age, addr))","title":"Print"},{"location":"python1/#python2-python3","text":"\u4e2d\u6587\u5904\u7406 a. #coding=utf-8 b. #_*_* coding:utf-8 _*_ Input(\"\") a. Py3 \u5c06 i = input() \u4f5c\u4e3a\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u4fe1\u606f\u5b58\u5165\u53d8\u91cf I b. Py2 \u5c06 i = input (\"\") \u5c06\u8f93\u5165\u7684\u5185\u5bb9\u5f53\u4f5c\u4ee3\u7801\u6267\u884c\uff0c\u5728python2\u4e2d\u5c06\u4f7f\u7528 raw_input()","title":"Python2 , Python3 \u7684\u533a\u522b"},{"location":"python1/#_1","text":"\u5e38\u7528\u7684\u6570\u636e\u7c7b\u578b\u8f6c\u6362 \u51fd\u6570 \u8bf4\u660e int(x [,base ]) \u5c06x\u8f6c\u6362\u4e3a\u4e00\u4e2a\u6574\u6570 long(x [,base ]) \u5c06x\u8f6c\u6362\u4e3a\u4e00\u4e2a\u957f\u6574\u6570 float(x ) \u5c06x\u8f6c\u6362\u5230\u4e00\u4e2a\u6d6e\u70b9\u6570 complex(real [,imag ]) \u521b\u5efa\u4e00\u4e2a\u590d\u6570 str(x ) \u5c06\u5bf9\u8c61 x \u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32 repr(x ) \u5c06\u5bf9\u8c61 x \u8f6c\u6362\u4e3a\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32 eval(str ) \u7528\u6765\u8ba1\u7b97\u5728\u5b57\u7b26\u4e32\u4e2d\u7684\u6709\u6548Python\u8868\u8fbe\u5f0f,\u5e76\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61 tuple(s ) \u5c06\u5e8f\u5217 s \u8f6c\u6362\u4e3a\u4e00\u4e2a\u5143\u7ec4 list(s ) \u5c06\u5e8f\u5217 s \u8f6c\u6362\u4e3a\u4e00\u4e2a\u5217\u8868 chr(x ) \u5c06\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5b57\u7b26 unichr(x ) \u5c06\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u4e3aUnicode\u5b57\u7b26 ord(x ) \u5c06\u4e00\u4e2a\u5b57\u7b26\u8f6c\u6362\u4e3a\u5b83\u7684\u6574\u6570\u503c hex(x ) \u5c06\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u4e3a\u4e00\u4e2a\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32 oct(x ) \u5c06\u4e00\u4e2a\u6574\u6570\u8f6c\u6362\u4e3a\u4e00\u4e2a\u516b\u8fdb\u5236\u5b57\u7b26\u4e32","title":"\u7c7b\u578b\u8f6c\u6362"},{"location":"python1/#if","text":"1. If x: else 2. If x: elif x: .. else","title":"If\u5224\u65ad"},{"location":"python1/#_2","text":">>> import keyword >>> keyword.kwlist ['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']","title":"\u5173\u952e\u5b57"},{"location":"python1/#_3","text":"+ - * % // \u6574\u9664 ** \u5e42 / \u9664 \"xxx\" * n \u5b57\u7b26\u4e32\u7d2f\u52a0 N \u6b21 <> != != or || and && not() ! += -= (\u81ea\u8eab)\u4fee\u6539","title":"\u8fd0\u7b97\u7b26"},{"location":"python1/#while","text":"while x: pass","title":"while"},{"location":"python1/#for","text":"a. for i in range(): b. for \u2026(break) else:","title":"for"},{"location":"python1/#break-continue","text":"\u7565","title":"break continue"},{"location":"python1/#_4","text":"a. + b. \" .. %s ..\"%x c. A = \"names\" A[2] => m d. \u5b57\u7b26\u4e32\u5206\u5272 A[1:3] = am X[\u8d77\u59cb\u4f4d: \u7ec8\u503c\u4f4d] A[1:-1]= am X[\u8d77\u59cb\u4f4d: \u5012\u6570\u7ec8\u503c\u4f4d] A[1:] = ames x[\u8d77\u59cb\u4f4d: ] A[1:-1:2] X[\u8d77\u59cb\u4f4d: \u7ec8\u6b62\u4f4d\uff1a\u6b65\u957f] e. \u9006\u5e8f name = \"yurisa\"; print(name[::-1]) f. \u5b57\u7b26\u4e32\u7684\u5e38\u89c1\u64cd\u4f5c Find \u6b63\u67e5\u627e\uff0c\u5982\u679c\u662f\u8fd4\u56de\u5f00\u59cb\u7684\u7d22\u5f15\u503c\uff0c\u5426\u5219\u8fd4\u56de-1 Rfind \u9006\u5411\u67e5\u627e Index \u6b63\u67e5\u627e\uff0c\u672a\u67e5\u5230\u5219\u629b\u51fa\u5f02\u5e38 Rindex \u9006\u5411\u67e5\u627e Count \u7edf\u8ba1\u51fa\u73b0\u7684\u4e2a\u6570 Replace(\"XXX\", \"xxx\"\uff0cx) \u66ff\u6362,\u66ff\u6362\u6b21\u6570 Split(\" \") \u5207\u5272 capitalize \u628a\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u5927\u5199 title \u628a\u5b57\u7b26\u4e32\u7684\u6bcf\u4e2a\u5355\u8bcd\u9996\u5b57\u6bcd\u5927\u5199 startswith \u68c0\u67e5\u5b57\u7b26\u4e32\u662f\u5426\u662f\u4ee5 x \u5f00\u5934, \u662f\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False endswith \u68c0\u67e5\u5b57\u7b26\u4e32\u662f\u5426\u4ee5 X \u7ed3\u675f\uff0c\u5982\u679c\u662f\u8fd4\u56deTrue,\u5426\u5219\u8fd4\u56de False Lower \u8f6c\u6362 x \u4e2d\u6240\u6709\u5927\u5199\u5b57\u7b26\u4e3a\u5c0f\u5199 upper \u8f6c\u6362 x \u4e2d\u7684\u5c0f\u5199\u5b57\u6bcd\u4e3a\u5927\u5199 Ljust \u8fd4\u56de\u4e00\u4e2a\u539f\u5b57\u7b26\u4e32\u5de6\u5bf9\u9f50,\u5e76\u4f7f\u7528\u7a7a\u683c\u586b\u5145\u81f3\u957f\u5ea6 width \u7684\u65b0\u5b57\u7b26\u4e32 rjust \u8fd4\u56de\u4e00\u4e2a\u539f\u5b57\u7b26\u4e32\u53f3\u5bf9\u9f50,\u5e76\u4f7f\u7528\u7a7a\u683c\u586b\u5145\u81f3\u957f\u5ea6 width \u7684\u65b0\u5b57\u7b26\u4e32 center \u8fd4\u56de\u4e00\u4e2a\u539f\u5b57\u7b26\u4e32\u5c45\u4e2d,\u5e76\u4f7f\u7528\u7a7a\u683c\u586b\u5145\u81f3\u957f\u5ea6 width \u7684\u65b0\u5b57\u7b26\u4e32 lstrip \u5220\u9664 mystr \u5de6\u8fb9\u7684\u7a7a\u767d\u5b57\u7b26 rstrip \u5220\u9664 mystr \u5b57\u7b26\u4e32\u672b\u5c3e\u7684\u7a7a\u767d\u5b57\u7b26 strip \u5220\u9664mystr\u5b57\u7b26\u4e32\u4e24\u7aef\u7684\u7a7a\u767d\u5b57\u7b26 partition \u628amystr\u4ee5str\u5206\u5272\u6210\u4e09\u90e8\u5206,str\u524d\uff0cstr\u548cstr\u540e rpartition \u7c7b\u4f3c\u4e8e partition()\u51fd\u6570,\u4e0d\u8fc7\u662f\u4ece\u53f3\u8fb9\u5f00\u59cb splitlines \u6309\u7167\u884c\u5206\u9694\uff0c\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u5404\u884c\u4f5c\u4e3a\u5143\u7d20\u7684\u5217\u8868 Isalpha \u5982\u679c mystr \u6240\u6709\u5b57\u7b26\u90fd\u662f\u5b57\u6bcd \u5219\u8fd4\u56de True,\u5426\u5219\u8fd4\u56de False isdigit \u5982\u679c mystr \u53ea\u5305\u542b\u6570\u5b57\u5219\u8fd4\u56de True \u5426\u5219\u8fd4\u56de False isalnum \u5982\u679c mystr \u6240\u6709\u5b57\u7b26\u90fd\u662f\u5b57\u6bcd\u6216\u6570\u5b57\u5219\u8fd4\u56de True,\u5426\u5219\u8fd4\u56de False isspace \u5982\u679c mystr \u4e2d\u53ea\u5305\u542b\u7a7a\u683c\uff0c\u5219\u8fd4\u56de True\uff0c\u5426\u5219\u8fd4\u56de False join mystr \u4e2d\u6bcf\u4e2a\u5b57\u7b26\u540e\u9762\u63d2\u5165str,\u6784\u9020\u51fa\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32","title":"\u5b57\u7b26\u4e32"},{"location":"python1/#_5","text":"1. \u540c\u65f6\u5b58\u50a8\u591a\u79cd\u6570\u636e\u7c7b\u578b `a = []` 2. a.append(\"\") \u6dfb\u52a0 a.insert(n,\"\") \u63d2\u5165 a=b + c / a.extend(b) \u96c6\u5408\u8ffd\u52a0/\u5408\u5e76 a.pop() \u628a\u6700\u540e\u4e00\u4e2a\u51fa\u6808 a.remove(\" x \") \u6839\u636e\u5185\u5bb9\u5220\u9664\uff0c\u53ea\u5220\u9664\u4e00\u6b21 a[x :x :x] \u5217\u8868\u4e0b\u6807\u5207\u7247 Del a[x] \u6839\u636e\u4e0b\u6807\u5220\u9664 a[x] = x \u4fee\u6539 If \"xx\" in a \u67e5\u627e\u5b58\u5728 If \"xx\" not in a \u67e5\u627e\u4e0d\u5b58\u5728 3. \u5e8f\u5217\u7c7b\u578b \u6392\u5e8f a.sort(); \u9006\u6392\u5e8f a.sort(reverse = True) \u9006\u5e8f a.reverse()","title":"\u5217\u8868"},{"location":"python1/#_6","text":"1. Key:value 1) Info = {\u201cxx\u201d, \"XX\"} \u521d\u59cb\u5316\u5b57\u5178 Info[\"xx\"] = \"ZZ\" \u6dfb\u52a0/\u4fee\u6539 Del info[\"xx\"] \u5220\u9664 Info.get(\"xx\") \u83b7\u53d6 Len(info) \u957f\u5ea6 Info.keys() \u83b7\u53d6\u952e\uff082\u5217\u8868\uff0c3\u5bf9\u8c61\uff09 Info.values() \u83b7\u53d6\u503c\uff082\u5217\u8868\uff0c3\u5bf9\u8c61\uff09 Info.items\uff08\uff09 2. \u6392\u5e8f Info.sort(key = lambda x:x['age'])","title":"\u5b57\u5178"},{"location":"python1/#_7","text":"1. def name(): pass 2. global \u5168\u5c40\u4fee\u9970 1) \u5728\u4e00\u4e2a\u51fd\u6570\u4e2d\uff0c\u5bf9\u5168\u5c40\u53d8\u91cf\u8fdb\u884c\u4fee\u6539\u7684\u65f6\uff0c\u662f\u5426\u4f7f\u7528global\uff0c\u662f\u5426\u4fee\u6539\u4e86\u5168\u5c40\u53d8\u91cf\u7684\u6307\u5411 a) \u5982\u679c\u4fee\u6539\u4e86\u6307\u5411\uff0c\u5373\u8ba9\u5168\u5c40\u53d8\u91cf\u6307\u5411\u4e00\u4e2a\u65b0\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5219\u5fc5\u987b\u4f7f\u7528global b) \u5982\u679c\u4ec5\u4ec5\u4fee\u6539\u4e86 \u6307\u5411\u7684\u7a7a\u95f41\u4e2d\u7684\u6570\u636e\uff0c\u5219\u6b64\u65f6\u4e0d\u5fc5\u4f7f\u7528global 3. \u7f3a\u7701\u53c2\u6570, \u547d\u540d\u53c2\u6570 4. \u4e0d\u5b9a\u957f\u53c2\u6570 1) *args \u5143\u7ec4 **kwargs \u5b57\u5178 key = value 5. \u62c6\u5305 1) \u5728\u51fd\u6570\u8c03\u7528\u65f6\uff0c\u5c06\u8d4b\u503c\u7684\u5143\u7ec4/\u5b57\u5178\u96c6\u5408 \u52a0 * / ** \u62c6\u5305\u540e\u5206\u522b\u8d4b\u503c\u7ed9 *args **kwargs 2) \u62c6\u5143\u7ec4 * 3) \u62c6\u5b57\u5178 ** 4) \u4ea4\u6362 a = 5; b = 6; a, b = b, a; 5) Enumerate(\u5217\u8868) \u8f93\u51fa =>\uff080\uff0c\"xx\"\uff09 6. \u533f\u540d\u51fd\u6570 lambda def test(a, b, func): return func(a,b); #lambda x, y: x + y print(test(11, 22, eval(input(\"\u8bf7\u8f93\u5165\u4e00\u4e2alambda\u8868\u8fbe\u5f0f\\n\"))));","title":"\u51fd\u6570"},{"location":"python1/#_8","text":"1. \u5143\u7ec4\u7684\u5143\u7d20\u4e0d\u80fd\u4fee\u6539(\u589e\uff0c\u5220\uff0c\u6539 \u90fd\u4e0d\u53ef\u4ee5) 2. Info = (11, 22, 33);","title":"\u5143\u7ec4"},{"location":"python1/#_9","text":"i. Id() \u67e5\u770b\u53d8\u91cf\u7684\u5730\u5740 ii. \u96c6\u5408\u4e0e\u5b57\u5178\u90fd\u662f\u5f15\u7528\u7c7b\u578b","title":"\u5f15\u7528"},{"location":"python1/#_10","text":"1. \u6253\u5f00\u5173\u95ed\u6587\u4ef6 2. \u6587\u4ef6\u8bfb\u5199 \u8bbf\u95ee\u6a21\u5f0f \u8bf4\u660e r \u4ee5\u53ea\u8bfb\u65b9\u5f0f\u6253\u5f00\u6587\u4ef6\u3002\u6587\u4ef6\u7684\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u5f00\u5934\u3002\u8fd9\u662f\u9ed8\u8ba4\u6a21\u5f0f\u3002 w \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u53ea\u7528\u4e8e\u5199\u5165\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\u5219\u5c06\u5176\u8986\u76d6\u3002 \u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u3002 a \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8ffd\u52a0\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u6587\u4ef6\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u7ed3\u5c3e\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u65b0\u7684\u5185\u5bb9\u5c06\u4f1a\u88ab\u5199\u5165\u5230\u5df2\u6709\u5185\u5bb9\u4e4b\u540e\u3002\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u8fdb\u884c\u5199\u5165\u3002 rb \u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u53ea\u8bfb\u3002\u6587\u4ef6\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u5f00\u5934\u3002\u8fd9\u662f\u9ed8\u8ba4\u6a21\u5f0f\u3002 wb \u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u53ea\u7528\u4e8e\u5199\u5165\u3002 \u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\u5219\u5c06\u5176\u8986\u76d6\u3002\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u3002 ab \u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8ffd\u52a0\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u6587\u4ef6\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u7ed3\u5c3e\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u65b0\u7684\u5185\u5bb9\u5c06\u4f1a\u88ab\u5199\u5165\u5230\u5df2\u6709\u5185\u5bb9\u4e4b\u540e\u3002\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u8fdb\u884c\u5199\u5165\u3002 r+ \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\u3002\u6587\u4ef6\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u5f00\u5934\u3002 w+ \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\u5219\u5c06\u5176\u8986\u76d6\u3002\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u3002 a+ \u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u6587\u4ef6\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u7ed3\u5c3e\u3002 \u6587\u4ef6\u6253\u5f00\u65f6\u4f1a\u662f\u8ffd\u52a0\u6a21\u5f0f\u3002\u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\u3002 rb+ \u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\u3002\u6587\u4ef6\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u5f00\u5934\u3002 wb+ \u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\u5219\u5c06\u5176\u8986\u76d6\u3002 \u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u3002 ab+ \u4ee5\u4e8c\u8fdb\u5236\u683c\u5f0f\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8ffd\u52a0\u3002\u5982\u679c\u8be5\u6587\u4ef6\u5df2\u5b58\u5728\uff0c\u6587\u4ef6\u6307\u9488\u5c06\u4f1a\u653e\u5728\u6587\u4ef6\u7684\u7ed3\u5c3e\u3002 \u5982\u679c\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u65b0\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199\u3002 3. \u5b9a\u4f4d\u8bfb\u5199 tell() \u5728\u8bfb\u5199\u6587\u4ef6\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u60f3\u77e5\u9053\u5f53\u524d\u7684\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u4f7f\u7528\u6765\u83b7\u53d6 seek() \u5b9a\u4f4d\u5230\u67d0\u4e2a\u4f4d\u7f6e seek(offset, from)\u67092\u4e2a\u53c2\u6570 \u2022 offset:\u504f\u79fb\u91cf \u2022 from:\u65b9\u5411 \u25cb 0:\u8868\u793a\u6587\u4ef6\u5f00\u5934 \u25cb 1:\u8868\u793a\u5f53\u524d\u4f4d\u7f6e \u25cb 2:\u8868\u793a\u6587\u4ef6\u672b\u5c3e 4. \u6587\u4ef6\u7684\u76f8\u5173\u64cd\u4f5c Import os rename(\u9700\u8981\u4fee\u6539\u7684\u6587\u4ef6\u540d, \u65b0\u7684\u6587\u4ef6\u540d) os\u6a21\u5757\u4e2d\u7684rename()\u53ef\u4ee5\u5b8c\u6210\u5bf9\u6587\u4ef6\u7684\u91cd\u547d\u540d\u64cd\u4f5c remove(\u5f85\u5220\u9664\u7684\u6587\u4ef6\u540d) os\u6a21\u5757\u4e2d\u7684remove()\u53ef\u4ee5\u5b8c\u6210\u5bf9\u6587\u4ef6\u7684\u5220\u9664\u64cd\u4f5c 5. \u6587\u4ef6\u5939\u7684\u76f8\u5173\u64cd\u4f5c import os os.mkdir(\"xxx\") \u521b\u5efa\u6587\u4ef6\u5939 os.getcwd() \u83b7\u53d6\u5f53\u524d\u76ee\u5f55 os.chdir(\"../\") \u6539\u53d8\u9ed8\u8ba4\u76ee\u5f55 os.listdir(\"./\") \u83b7\u53d6\u76ee\u5f55\u5217\u8868 os.rmdir(\"xxx\") \u5220\u9664\u6587\u4ef6\u5939 file = open(\"testFile\", \"r+\") if file != None: print(file.read()) file.close() #-*- coding:utf-8 -*- #Test word file = open(\"testFile\", \"r+\") if file != None: file.write(\"text\") #\u8fd9\u91cc\u5199\u5165\u6587\u4ef6\u540e\uff0c\u6307\u9488\u4f1a\u6307\u5411\u6587\u4ef6\u7684\u672b\u5c3e\uff0c\u5bfc\u81f4\u65e0\u6cd5\u76f4\u63a5\u8bfb\u53d6 #\u9650\u4e8e\u76ee\u524d\u80fd\u529b\u6709\u9650\uff0c\u4f7f\u7528\u5173\u95ed\u6587\u4ef6\u518d\u6253\u5f00\u7684\u65b9\u5f0f\u91cd\u7f6e\u6307\u9488\uff0c\u8bfb\u53d6\u5199\u5165\u7684\u5185\u5bb9 file.close() file = open(\"testFile\", \"r+\") print(file.read()) # Readlines \u5c31\u50cfread\u6ca1\u6709\u53c2\u6570\u65f6\u4e00\u6837\uff0creadlines\u53ef\u4ee5\u6309\u7167\u884c\u7684\u65b9\u5f0f\u628a\u6574\u4e2a\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u8fdb\u884c\u4e00\u6b21\u6027\u8bfb\u53d6\uff0c # \u5e76\u4e14\u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5217\u8868\uff0c\u5176\u4e2d\u6bcf\u4e00\u884c\u7684\u6570\u636e\u4e3a\u4e00\u4e2a\u5143\u7d20 # Readline \u8bfb\u4e00\u884c oldFile = open(\"testFile\", \"r\") fcp = open(\"testFileCP\", \"w\") n = 1 while True: fileCon = oldFile.read(1024 * n) if len(fileCon) == 0: break fcp.write(fileCon) oldFile.close() fcp.close() # \u6587\u4ef6\u5b9a\u4f4d #-*- coding:utf-8 -*- #Test word f = open(\"testFile\", \"r\") fcon = f.seek(2, 0) print(f.read()) print(f.tell()) f.close() # \u6587\u4ef6\u64cd\u4f5c\u76f8\u5173 #-*- coding:utf-8 -*- #Test word import os #os.rename(\"TestF\",\"testFile\") os.remove(\"testFile\")","title":"\u6587\u4ef6"},{"location":"python2/","text":"\u9762\u5411\u5bf9\u8c61 \u7c7b 1 \u5b9a\u4e49\u7c7b self.\u5c5e\u6027 \u5f53\u524d\u7c7b\u7684\u5bf9\u8c61 2 \u5c5e\u6027 1. \u4f7f\u7528\u65b9\u6cd5\uff0c\u9690\u85cf\u5c5e\u6027 2. \u79c1\u6709\u5c5e\u6027 __name\uff0c_\u7c7b\u540d__.\u5c5e\u6027\u540d 3. \u7c7b\u5c5e\u6027 4. \u5b9e\u4f8b\u5c5e\u6027 5. \u9b54\u6cd5\u5c5e\u6027 a. __doc__ #\u8f93\u51fa\uff1a\u7c7b\u7684\u63cf\u8ff0\u4fe1\u606f b. __module__ \u548c __class__ __module__\u8868\u793a\u5f53\u524d\u64cd\u4f5c\u7684\u5bf9\u8c61\u5728\u90a3\u4e2a\u6a21\u5757 __class__ \u8868\u793a\u5f53\u524d\u64cd\u4f5c\u7684\u5bf9\u8c61\u7684\u7c7b\u662f\u4ec0\u4e48 c. __init__ \u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u901a\u8fc7\u7c7b\u521b\u5efa\u5bf9\u8c61\u65f6\uff0c\u81ea\u52a8\u89e6\u53d1\u6267\u884c b. __del__ \u5f53\u5bf9\u8c61\u5728\u5185\u5b58\u4e2d\u88ab\u91ca\u653e\u65f6\uff0c\u81ea\u52a8\u89e6\u53d1\u6267\u884c\u3002 \u6ce8\uff1a\u6b64\u65b9\u6cd5\u4e00\u822c\u65e0\u987b\u5b9a\u4e49\uff0c\u56e0\u4e3a Python \u662f\u4e00\u95e8\u9ad8\u7ea7\u8bed\u8a00\uff0c \u7a0b\u5e8f\u5458\u5728\u4f7f\u7528\u65f6\u65e0\u9700\u5173\u5fc3\u5185\u5b58\u7684\u5206\u914d\u548c\u91ca\u653e\uff0c \u56e0\u4e3a\u6b64\u5de5\u4f5c\u90fd\u662f\u4ea4\u7ed9 Python \u89e3\u91ca\u5668\u6765\u6267\u884c\uff0c \u6240\u4ee5 __del__ \u7684\u8c03\u7528\u662f\u7531\u89e3\u91ca\u5668\u5728\u8fdb\u884c\u5783\u573e\u56de\u6536\u65f6\u81ea\u52a8\u89e6\u53d1\u6267\u884c\u7684\u3002 d. __call__ \u5bf9\u8c61\u540e\u9762\u52a0\u62ec\u53f7\uff0c\u89e6\u53d1\u6267\u884c\u3002 \u6ce8\uff1a __init__ \u65b9\u6cd5\u7684\u6267\u884c\u662f\u7531\u521b\u5efa\u5bf9\u8c61\u89e6\u53d1\u7684\uff0c\u5373\uff1a\u5bf9\u8c61 = \u7c7b\u540d() \u800c\u5bf9\u4e8e __call__ \u65b9\u6cd5\u7684\u6267\u884c\u662f\u7531\u5bf9\u8c61\u540e\u52a0\u62ec\u53f7\u89e6\u53d1\u7684\uff0c\u5373\uff1a\u5bf9\u8c61() \u6216\u8005 \u7c7b() e. __dict__ \u7c7b\u6216\u5bf9\u8c61\u4e2d\u7684\u6240\u6709\u5c5e\u6027 \u7c7b\u7684\u5b9e\u4f8b\u5c5e\u6027\u5c5e\u4e8e\u5bf9\u8c61\uff1b\u7c7b\u4e2d\u7684\u7c7b\u5c5e\u6027\u548c\u65b9\u6cd5\u7b49\u5c5e\u4e8e\u7c7b\uff0c\u5373\uff1a \u83b7\u53d6\u7c7b\u7684\u5c5e\u6027\uff0c\u5373\uff1a\u7c7b\u5c5e\u6027\u3001\u65b9\u6cd5\u3001 print(Province.__dict__) \u8f93\u51fa\uff1a {'__dict__': <attribute '__dict__' of 'Province' objects>, '__module__': '__main__', 'country': 'China', '__doc__': None, '__weakref__': <attribute '__weakref__' of 'Province' objects>, 'func': <function Province.func at 0x101897950>, '__init__': <function Province.__init__ at 0x1018978c8>} f. __str__ \u5982\u679c\u4e00\u4e2a\u7c7b\u4e2d\u5b9a\u4e49\u4e86`__str__`\u65b9\u6cd5\uff0c\u90a3\u4e48\u5728\u6253\u5370 \u5bf9\u8c61 \u65f6\uff0c\u9ed8\u8ba4\u8f93\u51fa\u8be5\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u3002 g. __getitem__\uff0c __setitem__\uff0c__delitem__ \u7528\u4e8e\u7d22\u5f15\u64cd\u4f5c\uff0c\u5982\u5b57\u5178\u3002\u4ee5\u4e0a\u5206\u522b\u8868\u793a\u83b7\u53d6\u3001\u8bbe\u7f6e\u3001\u5220\u9664\u6570\u636e h. __getslice__\uff0c _setslice__\uff0c __delslice__ \u8be5\u4e09\u4e2a\u65b9\u6cd5\u7528\u4e8e\u5206\u7247\u64cd\u4f5c\uff0c\u5982\uff1a\u5217\u8868 3. \u65b9\u6cd5 a. \u79c1\u6709\u65b9\u6cd5 __functionName( ), \u51fd\u6570\u5185\u90e8 self.__functionName() \u8c03\u7528 b. __del__\u65b9\u6cd5 \u5f53\u5bf9\u8c61\u88ab\u91ca\u653e\u7684\u65f6\u5019\uff0c\u89e6\u53d1\u8be5\u65b9\u6cd5\u3002 1) \u5982\u679c\u5728\u7a0b\u5e8f\u7ed3\u675f\u65f6\uff0c\u6709\u4e9b\u5bf9\u8c61\u8fd8\u5b58\u5728\uff0c \u5219python\u89e3\u91ca\u5668\u4f1a\u81ea\u52a8\u8c03\u7528\u4ed6\u4eec\u7684__del__\u65b9\u6cd5\u5b8c\u6210\u6e05\u7406\u5de5\u4f5c 2) \u5f15\u7528\u8ba1\u6570 import sys sys.getrefcount() c. \u9759\u6001\u65b9\u6cd5 d. __new__ \u65b9\u6cd5 #\u8c03\u7528\u7236\u7c7b\u7684new\u65b9\u6cd5\u521b\u5efa\u5bf9\u8c61 object.__new__(cls) e. \u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\uff0c3\u4ef6\u4e8b\u60c5 1) \u8c03\u7528 __new__ \u65b9\u6cd5\u521b\u5efa\u5bf9\u8c61\uff0c\u7136\u540e\u627e\u5230\u4e00\u4e2a\u53d8\u91cf\u6765\u63a5\u6536 __new__ \u7684\u8fd4\u56de\u503c\uff0c \u8fd9\u4e2a\u8fd4\u56de\u503c\u8868\u793a\u521b\u5efa\u51fa\u6765\u7684\u5bf9\u8c61\u7684\u5f15\u7528\u3002 2) __init__\uff08\u521a\u521a\u521b\u5efa\u51fa\u6765\u7684\u5bf9\u8c61\u7684\u5e94\u7528\uff09 3) \u8fd4\u56de\u5bf9\u8c61\u7684\u5f15\u7528 class ClassName: pass #\u5c5e\u6027 #\u65b9\u6cd5 def funcname(self, parameter_list): pass #\u5b9a\u4e49\u4e00\u4e2a\u7c7b class ClassName: pass #\u5c5e\u6027 #\u521d\u59cb\u5316\u5bf9\u8c61 -\u7c7b\u4f3c\u6784\u9020\u51fd\u6570 def __init__(self, a, b): #\u521d\u59cb\u5316\u5c5e\u6027 self.a = a self.b = b #\u8f93\u51fa\u5bf9\u8c61\u7684\u63cf\u8ff0\u4fe1\u606f,\u5728\u9700\u8981\u6253\u5370\u5bf9\u8c61\u65f6 def __str__(self): return \"%s -- %s\"%(self.a, self.b) #\u65b9\u6cd5 def funcname(self, parameter_list): print(\"%s - %s\", %(self.a, self.b)) #\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61 objectC = ClassName(a, b) #\u8c03\u7528\u5bf9\u8c61\u7684\u65b9\u6cd5 objectC.funcname() class Family: def __init__(self, area, info, addr): self.area = area self.info = info self.addr = addr self.leftArea = area self.containItem = [] def __str__(self): msg = \"\u9762\u79ef:%d M^2,\u53ef\u7528\u9762\u79ef:%d M^2,\u540d\u79f0\uff1a%s,\u5730\u5740\u662f%s,\u5206\u522b\u6709\" %(self.area, self.leftArea ,self.info, self.addr) homeNameitem = \":\" for item in self.containItem: homeNameitem += item.homeName + ',' homeNameitem += \"\u7b49\" msg += homeNameitem return msg def add_item(self, item): self.leftArea -= item.homeArea self.containItem.append(item) class Home: def __init__(self, homeName, homeArea): self.homeName = homeName self.homeArea = homeArea def __str__(self): return \"\u540d\u5b57\uff1a%s, \u9762\u79ef\uff1a%d M^2\"%(self.homeName, self.homeArea) family = Family(1000000, \"\u4e2d\u5357\u6d77\", \"\u897f\u957f\u5b89\u8857174\u53f7\u4e2d\u5357\u6d77\u65b0\u534e\u95e8\") ziGuangGe = Home(\"\u7d2b\u5149\u9601\", 1000) print(ziGuangGe) qinZhengDian = Home(\"\u52e4\u653f\u6bbf\", 8000) print(qinZhengDian) family.add_item(ziGuangGe) family.add_item(qinZhengDian) print(family) \u7ee7\u627f 1. \u5355\u7ee7\u627f 2. \u79c1\u6709\u65b9\u6cd5\uff0c\u79c1\u6709\u5c5e\u6027 1) \u79c1\u6709\u65b9\u6cd5\u4e0d\u4f1a\u88ab\u7ee7\u627f 2) \u79c1\u6709\u5c5e\u6027\u4e0d\u4f1a\u88ab\u7ee7\u627f _\u7c7b\u540d__\u5c5e\u6027\u540d 3) \u5982\u679c\u8c03\u7528\u7684\u65f6\u7ee7\u627f\u7684\u7236\u7c7b\u4e2d\u7684\u5171\u6709\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5728\u8fd9\u4e2a\u5171\u6709\u65b9\u6cd5\u7ea2\u8bbf\u95ee\u7236\u7c7b\u4e2d\u7684\u79c1\u6709\u5c5e\u6027\u548c\u79c1\u6709\u65b9\u6cd5 4) \u5982\u679c\u5b50\u7c7b\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u5171\u6709\u65b9\u6cd5\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65b9\u6cd5\u662f\u4e0d\u80fd\u591f\u8c03\u7528\u7ee7\u627f\u7684\u7236\u7c7b\u4e2d\u7684\u79c1\u6709\u65b9\u6cd5\u548c\u79c1\u6709\u5c5e\u6027\u7684 3. \u91cd\u5199 \u7236\u7c7b\u65b9\u6cd5\u540c\u540d\u8986\u76d6 1) \u5b50\u7c7b\u8c03\u7528\u7236\u7c7b\u65b9\u6cd5 4. \u591a\u7ee7\u627f 1) \u591a\u7ee7\u627f\u904d\u5386\u6811 # \u5355\u7ee7\u627f class ClassF: pass class ClassA(ClassF): pass # \u91cd\u5199 class ClassF: def funcName(self): pass #\u5b50\u7c7b\uff0c\u7ee7\u627f class ClassA(ClassF): pass #\u5b50\u7c7b\u91cd\u5199 class ClassB(ClassF): #\u91cd\u5199\u7236\u7c7b\u7684\u65b9\u6cd5 def funcName(self): pass # \u591a\u7ee7\u627f #\u7236\u7c7b class ClassF: def funcName(self): pass #\u5b50\u7c7b\uff0c\u7ee7\u627f class ClassA(ClassF): pass #\u5b50\u7c7b\u91cd\u5199 class ClassB(ClassF): #\u91cd\u5199\u7236\u7c7b\u7684\u65b9\u6cd5 def funcName(self): pass #\u5b50\u7c7b\u8c03\u7528\u7236\u7c7b\u7684\u65b9\u6cd5 #\u65b9\u6cd5\u4e00 ClassF.funcName(self) #\u65b9\u6cd5\u4e8c super().bark() class CatStore(object): def __init__(self): self.factory = Factory() def order(self, car_type): return self.factory.select_car_by_type(car_type) class Factory(object) def select_car_by_type(car_type): if car_type == 's': return Suonata() elif car_type == 'm': return Mingtu() # \u591a\u7ee7\u627f\u904d\u5386\u6811 #\u7236\u7c7b class ClassBase(object): pass #\u5b50\u7c7b\uff0c\u7ee7\u627f class ClassA(ClassBase): pass #\u5b50\u7c7b\u91cd\u5199 class ClassB(ClassBase): pass # \u591a\u7ee7\u627f class ClassAB(ClassA, ClassB): pass print(ClassAB.__mro__) # => (<class '__main__.ClassAB'>, # <class '__main__.ClassA'>, # <class '__main__.ClassB'>, # <class '__main__.ClassBase'>, # <class 'object'>) # C3\u7b97\u6cd5 \u591a\u6001 \u5355\u4e00\u51fd\u6570\u8868\u73b0\u591a\u79cd\u72b6\u6001 #-*- coding:utf-8 -*- #Test word class C1(object): def pr(self): print(\"C1\") class C2(C1): def pr(self): print(\"C2\") def intr(temp): temp.pr() c1 = C1() c2 = C2() intr(c1) intr(c2) \u7c7b\u5bf9\u8c61\uff0c\u5b9e\u4f8b\u5bf9\u8c61 1. \u7c7b\u5bf9\u8c61 1) \u7c7b\u5c5e\u6027\uff1a\u7c7b\u5c5e\u6027\u6240\u5c5e\u4e8e\u7c7b\u5bf9\u8c61\uff0c\u5e76\u4e14\u591a\u4e2a\u5b9e\u4f8b\u5bf9\u8c61\u4e4b\u95f4 \u7c7b\u540d.\u5c5e\u6027\u540d 2) \u7c7b\u65b9\u6cd5\uff1a\u53ef\u4ee5\u901a\u8fc7\u7c7b\u7684\u540d\u5b57\u8c03\u7528\u7c7b\u7684\u65b9\u6cd5\uff0c\u8fd8\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u7c7b\u521b\u5efa\u51fa\u6765\u7684\u5bf9\u8c61\uff0c\u53bb\u8c03\u7528\u8fd9\u4e2a\u7c7b\u7684\u65b9\u6cd5\u3002 2. \u5b9e\u4f8b\u5bf9\u8c61 1) \u5b9e\u4f8b\u5c5e\u6027\uff1a\u548c\u5177\u4f53\u7684\u67d0\u4e2a\u5b9e\u4f8b\u5bf9\u8c61\u6709\u5173\u7cfb\uff0c\u5e76\u4e14\u4e00\u4e2a\u5b9e\u4f8b\u5bf9\u8c61\u548c\u53e6\u4e00\u4e2a\u5b9e\u4f8b\u5bf9\u8c61\u662f\u4e0d\u5171\u4eab\u5c5e\u6027\u7684 2) \u5b9e\u4f8b\u65b9\u6cd5\uff1a\u5bf9\u8c61\u5185\u90e8\u65b9\u6cd5 3. \u9759\u6001\u65b9\u6cd5 a. Staticmethod b. Property \u7ecf\u5178\u7c7b\u4e2d\u7684\u5c5e\u6027\u53ea\u6709\u4e00\u79cd\u8bbf\u95ee\u65b9\u5f0f\uff0c\u5176\u5bf9\u5e94\u88ab @property \u4fee\u9970\u7684\u65b9\u6cd5 \u65b0\u5f0f\u7c7b\u4e2d\u7684\u5c5e\u6027\u6709\u4e09\u79cd\u8bbf\u95ee\u65b9\u5f0f\uff0c\u5e76\u5206\u522b\u5bf9\u5e94\u4e86\u4e09\u4e2a\u88ab @property @\u65b9\u6cd5\u540d.setter @\u65b9\u6cd5\u540d.deleter \u4fee\u9970\u7684\u65b9\u6cd5 \u7531\u4e8e\u65b0\u5f0f\u7c7b\u4e2d\u5177\u6709\u4e09\u79cd\u8bbf\u95ee\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u5b83\u4eec\u51e0\u4e2a\u5c5e\u6027\u7684\u8bbf\u95ee\u7279\u70b9\uff0c \u5206\u522b\u5c06\u4e09\u4e2a\u65b9\u6cd5\u5b9a\u4e49\u4e3a\u5bf9\u540c\u4e00\u4e2a\u5c5e\u6027\uff1a\u83b7\u53d6\u3001\u4fee\u6539\u3001\u5220\u9664 property \u65b9\u6cd5\u4e2d\u6709\u4e2a\u56db\u4e2a\u53c2\u6570 \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u65b9\u6cd5\u540d\uff0c\u8c03\u7528 `\u5bf9\u8c61.\u5c5e\u6027` \u65f6\u81ea\u52a8\u89e6\u53d1\u6267\u884c\u65b9\u6cd5 \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u65b9\u6cd5\u540d\uff0c\u8c03\u7528 `\u5bf9\u8c61.\u5c5e\u6027 \uff1d XXX` \u65f6\u81ea\u52a8\u89e6\u53d1\u6267\u884c\u65b9\u6cd5 \u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u65b9\u6cd5\u540d\uff0c\u8c03\u7528 `del \u5bf9\u8c61.\u5c5e\u6027` \u65f6\u81ea\u52a8\u89e6\u53d1\u6267\u884c\u65b9\u6cd5 \u7b2c\u56db\u4e2a\u53c2\u6570\u662f\u5b57\u7b26\u4e32\uff0c\u8c03\u7528 `\u5bf9\u8c61.\u5c5e\u6027.__doc__`,\u6b64\u53c2\u6570\u662f\u8be5\u5c5e\u6027\u7684\u63cf\u8ff0\u4fe1\u606f \u7531\u4e8e\u7c7b\u5c5e\u6027\u65b9\u5f0f\u521b\u5efa`property`\u5c5e\u6027\u5177\u67093\u79cd\u8bbf\u95ee\u65b9\u5f0f\uff0c \u6211\u4eec\u53ef\u4ee5\u6839\u636e\u5b83\u4eec\u51e0\u4e2a\u5c5e\u6027\u7684\u8bbf\u95ee\u7279\u70b9\uff0c\u5206\u522b\u5c06\u4e09\u4e2a\u65b9\u6cd5\u5b9a\u4e49\u4e3a\u5bf9\u540c\u4e00\u4e2a\u5c5e\u6027\uff1a\u83b7\u53d6\u3001\u4fee\u6539\u3001\u5220\u9664 4. \u65b9\u6cd5\u5305\u62ec\uff1a\u5b9e\u4f8b\u65b9\u6cd5\u3001\u9759\u6001\u65b9\u6cd5\u548c\u7c7b\u65b9\u6cd5\uff0c\u4e09\u79cd\u65b9\u6cd5\u5728\u5185\u5b58\u4e2d\u90fd\u5f52\u5c5e\u4e8e\u7c7b\uff0c\u533a\u522b\u5728\u4e8e\u8c03\u7528\u65b9\u5f0f\u4e0d\u540c\u3002 1) \u5b9e\u4f8b\u65b9\u6cd5\uff1a\u7531\u5bf9\u8c61\u8c03\u7528 \u81f3\u5c11\u4e00\u4e2a self \u53c2\u6570\uff1b \u6267\u884c\u5b9e\u4f8b\u65b9\u6cd5\u65f6\uff0c\u81ea\u52a8\u5c06\u8c03\u7528\u8be5\u65b9\u6cd5\u7684\u5bf9\u8c61\u8d4b\u503c\u7ed9 self ; 2) \u7c7b\u65b9\u6cd5\uff1a\u7531\u7c7b\u8c03\u7528 \u81f3\u5c11\u4e00\u4e2a cls \u53c2\u6570\uff1b \u6267\u884c\u7c7b\u65b9\u6cd5\u65f6\uff0c\u81ea\u52a8\u5c06\u8c03\u7528\u8be5\u65b9\u6cd5\u7684\u7c7b\u8d4b\u503c\u7ed9 cls ; 3) \u9759\u6001\u65b9\u6cd5\uff1a\u7531\u7c7b\u8c03\u7528\uff1b\u65e0\u9ed8\u8ba4\u53c2\u6570\uff1b 5. \u89e3\u8026 a. \u7b80\u5355\u5de5\u5382\u8bbe\u8ba1\u6a21\u5f0f b. \u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f c. \u5355\u4f8b # \u9759\u6001\u65b9\u6cd5 class Game(object): #\u7c7b\u5c5e\u6027 num = 0 #\u5b9e\u4f8b\u65b9\u6cd5 def __init__(self): #\u5b9e\u4f8b\u5c5e\u6027 self.name = \"AAA\" #\u7c7b\u65b9\u6cd5 @classmethod def add_num(cls): cls.num = 1 #\u9759\u6001\u65b9\u6cd5 @staticmethod def pri(): print(\"-------------------\") Game.pri() game = Game() Game.add_num() print(Game.num) print(game.num) game.pri() # \u7b80\u5355\u5de5\u5382\u6a21\u5f0f class Car(object): def move(self): print(\" ==> \") def music(self): print(\" ==Music== \") def stop(self): print(\" =X=> \") class Suonata(Car): pass class Mingtu(Car): pass car_store = CatStore() car = car_store.order('s') # Property class Foo(object): @property def prop(self): pass fo = Foo() ret = fo.prop #\u5355\u4f8b,\u5355\u521d\u59cb\u5316 class DanLiTest(object): __instance = None __initFlag = False def __new__(cls, a): if cls.__instance == None: cls = object.__new__(cls) return cls.__instance def __init__(self, a): if Dag.__initFlag == False: self.a = a DanLiTest.__init__ = True; a = DanLiTest(\"aaa\") print(id(a)) b = DanLiTest(\"bbb\") print(id(b)) \u5f02\u5e38 1. \u5f02\u5e38\u6355\u83b7 2. \u5f02\u5e38\u4f20\u9012 \u82e5\u5f02\u5e38\u5728\u8be5\u51fd\u6570\u4e2d\u6ca1\u6709\u88ab\u6355\u83b7\uff0c\u5219\u5411\u4e0a\u4e00\u7ea7\u51fd\u6570\u4f20\u9012\u8be5\u5f02\u5e38\uff0c\u76f4\u5230\u88ab\u6355\u83b7\u3002 3. \u629b\u51fa\u81ea\u5b9a\u4e49\u5f02\u5e38 4. \u5f02\u5e38\u5904\u7406\u4e2d\u91cd\u65b0\u629b\u51fa\u8be5\u5f02\u5e38 # \u5728\u5f02\u5e38\u5904\u7406\u9636\u6bb5\uff0c\u67d0\u79cd\u6761\u4ef6\u4e0d\u6ee1\u8db3\uff0c\u5bfc\u81f4\u5f02\u5e38\u88ab\u65e0\u6cd5\u5904\u7406 # \u5219\u53ef\u4ee5\u91cd\u65b0\u629b\u51fa\u8be5\u5f02\u5e38\u3002 Raise #\u53ef\u80fd\u51fa\u73b0\u7684\u5f02\u5e38\u4ee3\u7801 try: pass #\u9488\u5bf9\u67d0\u5143\u7ec4\u7c7b\u578b\u7684\u5f02\u5e38\u6355\u83b7 except (expression1,expression2) pass #\u9664\u5143\u7ec4\u5185\u7684\u5f02\u5e38\u7c7b\u578b\uff0c\u6355\u83b7\u5176\u4ed6\u7c7b\u578b\u7684\u5f02\u5e38 #\u5e76\u5c06\u5f02\u5e38\u7c7b\u578b\u5b58\u50a8\u4e8eidentifier except Exception as identifier: pass #\u6ca1\u6709\u5f02\u5e38\u7684\u60c5\u51b5\u6267\u884c else: pass #\u4e0d\u7ba1\u6709\u6ca1\u6709\u5f02\u5e38\u60c5\u51b5\uff0c\u90fd\u4f1a\u6267\u884c finally: pass #\u81ea\u5b9a\u4e49\u5f02\u5e38 class DefException(Exception): pass #\u624b\u52a8\u629b\u51fa\u8be5\u5f02\u5e38 raise DefException() \u6a21\u5757 1. \u6a21\u5757\u5bfc\u5165, \u5bfc\u5165\u6a21\u5757\u7684\u65b9\u5f0f \u5982\u679c\u4e00\u4e2a\u6587\u4ef6\u4e2d\u6709__all__\u53d8\u91cf\uff0c\u90a3\u4e48\u4e5f\u5c31\u610f\u5473\u7740\u8fd9\u4e2a\u53d8\u91cf\u4e2d\u7684\u5143\u7d20\uff0c \u4f1a\u88abfrom xxx import *\u65f6\u5bfc\u5165 \u800c\u6ca1\u6709\u5b58\u5728\u5728\u5217\u8868[\"xxx\"]\u4e2d\u5143\u7d20\u4e0d\u4f1a\u88ab\u5bfc\u5165 `__all__ = [\"defxxx1\", \"defxxx2\"]` 2. \u6a21\u5757\u522b\u540d #\u6a21\u5757\u522b\u540d 3. \u6a21\u5757\u6d4b\u8bd5 # 1 import impxxx impxxx.defxxx() from impxxx import defxxx1, defxxx2 defxxx1() from impxxx import * defxxx() # 2 import impxxx as ipmxxxx # 3 if __name__ == \"__impxxx__\": defxxx() python\u683c\u5f0f import impxxx def main(): pass if __name__ == '__main__': main() \u5305 1. \u5728\u5305\u6587\u4ef6\u5939\u4e0b\uff0c\u521b\u5efa __init__.py \u6587\u4ef6 __all__ = [\"impxxx\"] 2. \u5305\u5185\u6a21\u5757 #\u5305\u5185\u5bfc\u5165\u76f8\u5e94\u7684\u6a21\u5757 __all__ = [\"impxxx\"] # \u5bfc\u5165\u5305\u540e\uff0c\u518d\u5bfc\u5165\u6a21\u5757\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 # \u5305\u540d.\u6a21\u5757\u540d.\u7c7b\u540d/\u65b9\u6cd5\u540d # \u7684\u65b9\u5f0f\u4f7f\u7528\uff0c\u4e0d\u9700\u8981\u518d\u989d\u5916\u5bfc\u5165\u5305\u5185\u6a21\u5757 # python2 import impxxx # python3 from .import impxxx 3. \u521b\u5efa\uff0c\u6253\u5305\uff0c\u5206\u4eab\uff0c\u5b89\u88c5 setup.py from distutils.core import setup # \u540d\u5b57 \u7248\u672c \u63cf\u8ff0\u4fe1\u606f \u4f5c\u8005 tree \u5305\u540d.\u6a21\u5757\u540d setup(name=\"Yvan\", version=\"1.0\", description=\"Yvan's module\", author=\"dongGe\", py_modules=['Msg.msgipmxxx1','Msg.msgipmxxx2']) python3 setup.py build => running build running build_py creating build creating build/lib creating build/lib/Msg copying Msg/__init__.py -> build/lib/Msg copying Msg/msgipmxxx1.py -> build/lib/Msg copying Msg/msgipmxxx2.py -> build/lib/Msg python3 setup.py sdist => running sdist running check warning: check: missing required meta-data: url warning: check: missing meta-data: if 'author' supplied, 'author_email' must be supplied too warning: sdist: manifest template 'MANIFEST.in' does not exist (using default file list) warning: sdist: standard file not found: should have one of README, README.txt writing manifest file 'MANIFEST' creating Yvan-1.0 creating Yvan-1.0/Msg making hard links in Yvan-1.0... hard linking setup.py -> Yvan-1.0 hard linking Msg/__init__.py -> Yvan-1.0/Msg hard linking Msg/msgipmxxx1.py -> Yvan-1.0/Msg hard linking Msg/msgipmxxx2.py -> Yvan-1.0/Msg creating dist Creating tar archive removing 'Yvan-1.0' (and everything under it) \u251c\u2500\u2500 dist \u2502 \u2514\u2500\u2500 Yvan-1.0.tar.gz tar -zxvf Yvan-1.0.tar.gz python3 setup.py install \u7a0b\u5e8f\u53c2\u6570 import sys def main(): print(sys.argv) if __name__ == '__main__': main() \u5217\u8868\u751f\u6210\u5f0f #(10, 78) => 10 - 77 range(10, 78) #(10), 18, 2) => [10, 12, 14, 16] range(10, 18, 2) # range\u98ce\u9669 # python2 \u751f\u6210\u6570\u8f83\u5927\u65f6\uff0c\u4f1a\u5360\u7528\u5927\u91cf\u5185\u5b58\uff0c\u8fc7\u5927\u91cf\u5185\u5b58\u7cfb\u7edf\u6216\u5c06\u4e0d\u4e88\u5206\u914d # python3\u4e2d\u5ef6\u8fdf\u751f\u6210\uff0c\u5f53\u9700\u8981\u76f8\u5173\u6570\u636e\u65f6\uff0c\u4e34\u65f6\u751f\u6210 # => [1 - 17] a = [i for i in range(1, 18)] # => [0, 2, 4, 6, 8] b = [i for i in range(10) if i % 2 == 0] # => [0, 0, 1, 1, 2, 2] c = [i for i in range(3) for j in range(2)] # => [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)] d = [(i, j) for i in range(3) for j in range(2)] # => [(0, 0, 0), (0, 0, 1), ...] e = [(i, j, k) for i in range(3) for j in range(3) for k in range(3)] set\u3001list\u3001tuple set\u96c6\u5408 \u6ca1\u6709\u91cd\u590d\u9879 GIL (\u5168\u5c40\u89e3\u91ca\u5668\u9501) GIL\uff08\u5168\u5c40\u89e3\u91ca\u5668\u9501\uff09 GIL\u9762\u8bd5\u9898\u5982\u4e0b \u63cf\u8ff0Python GIL\u7684\u6982\u5ff5\uff0c \u4ee5\u53ca\u5b83\u5bf9python\u591a\u7ebf\u7a0b\u7684\u5f71\u54cd\uff1f \u7f16\u5199\u4e00\u4e2a\u591a\u7ebf\u7a0b\u6293\u53d6\u7f51\u9875\u7684\u7a0b\u5e8f\uff0c\u5e76\u9610\u660e\u591a\u7ebf\u7a0b\u6293\u53d6\u7a0b\u5e8f\u662f\u5426\u53ef\u6bd4\u5355\u7ebf\u7a0b\u6027\u80fd\u6709\u63d0\u5347\uff0c\u5e76\u89e3\u91ca\u539f\u56e0\u3002 Guido\u7684\u58f0\u660e\uff1ahttp://www.artima.com/forums/flat.jsp?forum=106&thread=214235 he language doesn't require the GIL -- it's only the CPython virtual machine that has historically been unable to shed it. \u53c2\u8003\u7b54\u6848: Python\u8bed\u8a00\u548cGIL\u6ca1\u6709\u534a\u6bdb\u94b1\u5173\u7cfb\u3002\u4ec5\u4ec5\u662f\u7531\u4e8e\u5386\u53f2\u539f\u56e0\u5728Cpython\u865a\u62df\u673a(\u89e3\u91ca\u5668)\uff0c\u96be\u4ee5\u79fb\u9664GIL\u3002 GIL\uff1a\u5168\u5c40\u89e3\u91ca\u5668\u9501\u3002\u6bcf\u4e2a\u7ebf\u7a0b\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u90fd\u9700\u8981\u5148\u83b7\u53d6GIL\uff0c\u4fdd\u8bc1\u540c\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u6267\u884c\u4ee3\u7801\u3002 \u7ebf\u7a0b\u91ca\u653eGIL\u9501\u7684\u60c5\u51b5\uff1a \u5728IO\u64cd\u4f5c\u7b49\u53ef\u80fd\u4f1a\u5f15\u8d77\u963b\u585e\u7684system call\u4e4b\u524d,\u53ef\u4ee5\u6682\u65f6\u91ca\u653eGIL, \u4f46\u5728\u6267\u884c\u5b8c\u6bd5\u540e,\u5fc5\u987b\u91cd\u65b0\u83b7\u53d6GIL Python 3.x\u4f7f\u7528\u8ba1\u65f6\u5668\uff08\u6267\u884c\u65f6\u95f4\u8fbe\u5230\u9608\u503c\u540e\uff0c \u5f53\u524d\u7ebf\u7a0b\u91ca\u653eGIL\uff09\u6216Python 2.x\uff0ctickets\u8ba1\u6570\u8fbe\u5230100 Python\u4f7f\u7528\u591a\u8fdb\u7a0b\u662f\u53ef\u4ee5\u5229\u7528\u591a\u6838\u7684CPU\u8d44\u6e90\u7684\u3002 \u591a\u7ebf\u7a0b\u722c\u53d6\u6bd4\u5355\u7ebf\u7a0b\u6027\u80fd\u6709\u63d0\u5347\uff0c\u56e0\u4e3a\u9047\u5230IO\u963b\u585e\u4f1a\u81ea\u52a8\u91ca\u653eGIL\u9501 \u80f6\u6c34\u7c98\u5408 C\u8bed\u8a00\u80f6\u6c34\u7c98\u5408\u793a\u4f8b import threading import ctypes def main(): lib = ctypes.cdll.LoadLibrary(\"./xxx.so\") t = threading.Thread(target = lib.xxx) t.start() while True: pass if __name__ == \"__main__\": main() \u6df1\u62f7\u8d1d\uff0c\u6d45\u62f7\u8d1d \u6df1\u6d45\u62f7\u8d1d\u5b9e\u4f8b import copy def main(): a = [11, 22] b = a b.append(33) # \u6d45\u62f7\u8d1d #copy.copy() # \u6df1\u62f7\u8d1d\u51fd\u6570 c = copy.deepcopy(a) c.append(44) print(a) print(b) print(c) if __name__ == \"__main__\": main() root@DESKTOP-P2IBM15:/mnt/c/Users/Night/Documents/python# python3 testPy.py [11, 22, 33] [11, 22, 33] [11, 22, 33, 44] \u79c1\u6709\u5316 xx: \u516c\u6709\u53d8\u91cf _x: \u5355\u524d\u7f6e\u4e0b\u5212\u7ebf,\u79c1\u6709\u5316\u5c5e\u6027\u6216\u65b9\u6cd5\uff0c from somemodule import * \u7981\u6b62\u5bfc\u5165,\u7c7b\u5bf9\u8c61\u548c\u5b50\u7c7b\u53ef\u4ee5\u8bbf\u95ee __xx\uff1a\u53cc\u524d\u7f6e\u4e0b\u5212\u7ebf,\u907f\u514d\u4e0e\u5b50\u7c7b\u4e2d\u7684\u5c5e\u6027\u547d\u540d\u51b2\u7a81\uff0c\u65e0\u6cd5\u5728\u5916\u90e8\u76f4\u63a5\u8bbf\u95ee(\u540d\u5b57\u91cd\u6574\u6240\u4ee5\u8bbf\u95ee\u4e0d\u5230) xx : \u53cc\u524d\u540e\u4e0b\u5212\u7ebf,\u7528\u6237\u540d\u5b57\u7a7a\u95f4\u7684\u9b54\u6cd5\u5bf9\u8c61\u6216\u5c5e\u6027\u3002\u4f8b\u5982: init , __ \u4e0d\u8981\u81ea\u5df1\u53d1\u660e\u8fd9\u6837\u7684\u540d\u5b57 xx_:\u5355\u540e\u7f6e\u4e0b\u5212\u7ebf,\u7528\u4e8e\u907f\u514d\u4e0ePython\u5173\u952e\u8bcd\u7684\u51b2\u7a81 Import \u5bfc\u5165\u6a21\u5757 1. Import \u641c\u7d22\u8def\u5f84 \u2022 \u4ece\u4e0a\u9762\u5217\u51fa\u7684\u76ee\u5f55\u91cc\u4f9d\u6b21\u67e5\u627e\u8981\u5bfc\u5165\u7684\u6a21\u5757\u6587\u4ef6 \u2022 '' \u8868\u793a\u5f53\u524d\u8def\u5f84 \u2022 \u5217\u8868\u4e2d\u7684\u8def\u5f84\u7684\u5148\u540e\u987a\u5e8f\u4ee3\u8868\u4e86python\u89e3\u91ca\u5668\u5728\u641c\u7d22\u6a21\u5757\u65f6\u7684\u5148\u540e\u987a\u5e8f import sys sys.path ['(\u5f53\u524d\u8def\u5f84)', '/usr/lib/python36.zip', '/usr/lib/python3.6', '/usr/lib/python3.6/lib-dynload', '/usr/local/lib/python3.6/dist-packages', '/usr/lib/python3/dist-packages'] 2. \u91cd\u65b0\u5bfc\u5165\u6a21\u5757 a. \u6a21\u5757\u88ab\u5bfc\u5165\u540e\uff0cimport module\u4e0d\u80fd\u91cd\u65b0\u5bfc\u5165\u6a21\u5757\uff0c\u91cd\u65b0\u5bfc\u5165\u9700\u7528reload from imp import reload reload(xx) \u5c01\u88c5\uff0c\u7ee7\u627f\uff0c\u591a\u6001 a. __class__ i. \u5bf9\u8c61 b. __dict__ i. \u5c5e\u6027\u5217\u8868 \u591a\u7ee7\u627f\u4ee5\u53caMRO\u987a\u5e8f 1. super().__init__\u76f8\u5bf9\u4e8e\u7c7b\u540d.__init__\uff0c\u5728\u5355\u7ee7\u627f\u4e0a\u7528\u6cd5\u57fa\u672c\u65e0\u5dee 2. \u4f46\u5728\u591a\u7ee7\u627f\u4e0a\u6709\u533a\u522b\uff0csuper\u65b9\u6cd5\u80fd\u4fdd\u8bc1\u6bcf\u4e2a\u7236\u7c7b\u7684\u65b9\u6cd5\u53ea\u4f1a\u6267\u884c\u4e00\u6b21\uff0c \u800c\u4f7f\u7528\u7c7b\u540d\u7684\u65b9\u6cd5\u4f1a\u5bfc\u81f4\u65b9\u6cd5\u88ab\u6267\u884c\u591a\u6b21\uff0c\u5177\u4f53\u770b\u524d\u9762\u7684\u8f93\u51fa\u7ed3\u679c 3. \u591a\u7ee7\u627f\u65f6\uff0c\u4f7f\u7528super\u65b9\u6cd5\uff0c\u5bf9\u7236\u7c7b\u7684\u4f20\u53c2\u6570\uff0c \u5e94\u8be5\u662f\u7531\u4e8epython\u4e2dsuper\u7684\u7b97\u6cd5\u5bfc\u81f4\u7684\u539f\u56e0\uff0c\u5fc5\u987b\u628a\u53c2\u6570\u5168\u90e8\u4f20\u9012\uff0c\u5426\u5219\u4f1a\u62a5\u9519 4. \u5355\u7ee7\u627f\u65f6\uff0c\u4f7f\u7528super\u65b9\u6cd5\uff0c\u5219\u4e0d\u80fd\u5168\u90e8\u4f20\u9012\uff0c \u53ea\u80fd\u4f20\u7236\u7c7b\u65b9\u6cd5\u6240\u9700\u7684\u53c2\u6570\uff0c\u5426\u5219\u4f1a\u62a5\u9519 5. \u591a\u7ee7\u627f\u65f6\uff0c\u76f8\u5bf9\u4e8e\u4f7f\u7528\u7c7b\u540d.__init__\u65b9\u6cd5\uff0c\u8981\u628a\u6bcf\u4e2a\u7236\u7c7b\u5168\u90e8\u5199\u4e00\u904d, \u800c\u4f7f\u7528super\u65b9\u6cd5\uff0c \u53ea\u9700\u5199\u4e00\u53e5\u8bdd\u4fbf\u6267\u884c\u4e86\u5168\u90e8\u7236\u7c7b\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e5f\u662f\u4e3a\u4f55\u591a\u7ee7\u627f\u9700\u8981\u5168\u90e8\u4f20\u53c2\u7684\u4e00\u4e2a\u539f\u56e0 With \u4e0a\u4e0b\u6587\u7ba1\u7406 1. \u4efb\u4f55\u5b9e\u73b0\u4e86 __enter__() \u548c __exit__() \u65b9\u6cd5\u7684\u5bf9\u8c61\u90fd\u53ef\u79f0\u4e4b\u4e3a\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5bf9\u8c61\u53ef\u4ee5\u4f7f\u7528 with \u5173\u952e\u5b57\u3002\u663e\u7136\uff0c\u6587\u4ef6\uff08file\uff09\u5bf9\u8c61\u4e5f\u5b9e\u73b0\u4e86\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002 2. Python \u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a contextmanager \u7684\u88c5\u9970\u5668\uff0c\u66f4\u8fdb\u4e00\u6b65\u7b80\u5316\u4e86\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002 \u901a\u8fc7 yield \u5c06\u51fd\u6570\u5206\u5272\u6210\u4e24\u90e8\u5206\uff0cyield \u4e4b\u524d\u7684\u8bed\u53e5\u5728 __enter__ \u65b9\u6cd5\u4e2d\u6267\u884c\uff0c yield \u4e4b\u540e\u7684\u8bed\u53e5\u5728 __exit__ \u65b9\u6cd5\u4e2d\u6267\u884c\u3002\u7d27\u8ddf\u5728 yield \u540e\u9762\u7684\u503c\u662f\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002 from contextlib import contextmanager @contextmanager \u95ed\u5305 1. \u601d\u8003\uff1a \u51fd\u6570\uff0c\u533f\u540d\u51fd\u6570\uff0c\u95ed\u5305\uff0c\u5bf9\u8c61 \u5f53\u505a\u53c2\u6570\u65f6\uff0c \u6709\u4ec0\u4e48\u533a\u522b i. \u533f\u540d\u51fd\u6570\u80fd\u591f\u5b8c\u6210\u57fa\u672c\u7684\u7b80\u5355\u529f\u80fd\uff0c\u4f20\u9012\u662f\u8fd9\u4e2a\u51fd\u6570\u7684\u5f15\u7528 \u53ea\u6709\u529f\u80fd ii. \u666e\u901a\u51fd\u6570\u80fd\u591f\u5b8c\u6210\u8f83\u4e3a\u590d\u6742\u7684\u529f\u80fd\uff0c\u4f20\u9012\u662f\u8fd9\u4e2a\u51fd\u6570\u7684\u5f15\u7528 \u53ea\u6709\u529f\u80fd iii. \u95ed\u5305\u80fd\u591f\u5c06\u8f83\u4e3a\u590d\u6742\u7684\u529f\u80fd\uff0c\u4f20\u9012\u65f6\u8fd9\u4e2a\u95ed\u5305\u4e2d\u7684\u51fd\u6570\u4ee5\u53ca\u6570\u636e\uff0c\u56e0\u6b64\u4f20\u9012\u65f6\u529f\u80fd + \u6570\u636e iv. \u5bf9\u8c61\u80fd\u591f\u5b8c\u6210\u6700\u4e3a\u590d\u6742\u7684\u529f\u80fd\uff0c\u4f20\u9012\u65f6\u5f88\u591a\u6570\u636e + \u5f88\u591a\u529f\u80fd\uff0c\u56e0\u6b64\u4f20\u9012\u662f\u529f\u80fd + \u6570\u636e 2. \u4fee\u6539\u5173\u952e\u5b57 i. Nonlocal \u88c5\u9970\u5668 1. @\u88c5\u9970\u5668\u540d \u51fd\u6570() 2. \u53c2\u6570\u88c5\u9970\u5668 # \u901a\u7528\u88c5\u9970\u5668 def secoratorFunc(func): def sec_func(*args, **wkargs): print(\"-- --\") return func(*args, **wkargs) return sec_func @ secoratorFunc def test(a, *args, **kwarge): print(\"-- --\", a, args, kwarge) return a print(test(1, 2, b = 3)) \"\"\" -- -- -- -- 1 (2,) {'b': 3} 1 \"\"\" \u5143\u7c7b 1. Globals 2. Type() type(\u7c7b\u540d, \u7531\u7236\u7c7b\u540d\u79f0\u7ec4\u6210\u7684\u5143\u7ec4\uff08\u9488\u5bf9\u7ee7\u627f\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u4e3a\u7a7a\uff09\uff0c\u5305\u542b\u5c5e\u6027\u7684\u5b57\u5178\uff08\u540d\u79f0\u548c\u503c)) >>> globals <built-in function globals> >>> globals() {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': None, '__annotations__': {}, '__builtins__': <module 'builtins' (built-in)>} >>> help(type)","title":"Python \u9762\u5411\u5bf9\u8c61"},{"location":"python2/#_1","text":"","title":"\u9762\u5411\u5bf9\u8c61"},{"location":"python2/#_2","text":"1 \u5b9a\u4e49\u7c7b self.\u5c5e\u6027 \u5f53\u524d\u7c7b\u7684\u5bf9\u8c61 2 \u5c5e\u6027 1. \u4f7f\u7528\u65b9\u6cd5\uff0c\u9690\u85cf\u5c5e\u6027 2. \u79c1\u6709\u5c5e\u6027 __name\uff0c_\u7c7b\u540d__.\u5c5e\u6027\u540d 3. \u7c7b\u5c5e\u6027 4. \u5b9e\u4f8b\u5c5e\u6027 5. \u9b54\u6cd5\u5c5e\u6027 a. __doc__ #\u8f93\u51fa\uff1a\u7c7b\u7684\u63cf\u8ff0\u4fe1\u606f b. __module__ \u548c __class__ __module__\u8868\u793a\u5f53\u524d\u64cd\u4f5c\u7684\u5bf9\u8c61\u5728\u90a3\u4e2a\u6a21\u5757 __class__ \u8868\u793a\u5f53\u524d\u64cd\u4f5c\u7684\u5bf9\u8c61\u7684\u7c7b\u662f\u4ec0\u4e48 c. __init__ \u521d\u59cb\u5316\u65b9\u6cd5\uff0c\u901a\u8fc7\u7c7b\u521b\u5efa\u5bf9\u8c61\u65f6\uff0c\u81ea\u52a8\u89e6\u53d1\u6267\u884c b. __del__ \u5f53\u5bf9\u8c61\u5728\u5185\u5b58\u4e2d\u88ab\u91ca\u653e\u65f6\uff0c\u81ea\u52a8\u89e6\u53d1\u6267\u884c\u3002 \u6ce8\uff1a\u6b64\u65b9\u6cd5\u4e00\u822c\u65e0\u987b\u5b9a\u4e49\uff0c\u56e0\u4e3a Python \u662f\u4e00\u95e8\u9ad8\u7ea7\u8bed\u8a00\uff0c \u7a0b\u5e8f\u5458\u5728\u4f7f\u7528\u65f6\u65e0\u9700\u5173\u5fc3\u5185\u5b58\u7684\u5206\u914d\u548c\u91ca\u653e\uff0c \u56e0\u4e3a\u6b64\u5de5\u4f5c\u90fd\u662f\u4ea4\u7ed9 Python \u89e3\u91ca\u5668\u6765\u6267\u884c\uff0c \u6240\u4ee5 __del__ \u7684\u8c03\u7528\u662f\u7531\u89e3\u91ca\u5668\u5728\u8fdb\u884c\u5783\u573e\u56de\u6536\u65f6\u81ea\u52a8\u89e6\u53d1\u6267\u884c\u7684\u3002 d. __call__ \u5bf9\u8c61\u540e\u9762\u52a0\u62ec\u53f7\uff0c\u89e6\u53d1\u6267\u884c\u3002 \u6ce8\uff1a __init__ \u65b9\u6cd5\u7684\u6267\u884c\u662f\u7531\u521b\u5efa\u5bf9\u8c61\u89e6\u53d1\u7684\uff0c\u5373\uff1a\u5bf9\u8c61 = \u7c7b\u540d() \u800c\u5bf9\u4e8e __call__ \u65b9\u6cd5\u7684\u6267\u884c\u662f\u7531\u5bf9\u8c61\u540e\u52a0\u62ec\u53f7\u89e6\u53d1\u7684\uff0c\u5373\uff1a\u5bf9\u8c61() \u6216\u8005 \u7c7b() e. __dict__ \u7c7b\u6216\u5bf9\u8c61\u4e2d\u7684\u6240\u6709\u5c5e\u6027 \u7c7b\u7684\u5b9e\u4f8b\u5c5e\u6027\u5c5e\u4e8e\u5bf9\u8c61\uff1b\u7c7b\u4e2d\u7684\u7c7b\u5c5e\u6027\u548c\u65b9\u6cd5\u7b49\u5c5e\u4e8e\u7c7b\uff0c\u5373\uff1a \u83b7\u53d6\u7c7b\u7684\u5c5e\u6027\uff0c\u5373\uff1a\u7c7b\u5c5e\u6027\u3001\u65b9\u6cd5\u3001 print(Province.__dict__) \u8f93\u51fa\uff1a {'__dict__': <attribute '__dict__' of 'Province' objects>, '__module__': '__main__', 'country': 'China', '__doc__': None, '__weakref__': <attribute '__weakref__' of 'Province' objects>, 'func': <function Province.func at 0x101897950>, '__init__': <function Province.__init__ at 0x1018978c8>} f. __str__ \u5982\u679c\u4e00\u4e2a\u7c7b\u4e2d\u5b9a\u4e49\u4e86`__str__`\u65b9\u6cd5\uff0c\u90a3\u4e48\u5728\u6253\u5370 \u5bf9\u8c61 \u65f6\uff0c\u9ed8\u8ba4\u8f93\u51fa\u8be5\u65b9\u6cd5\u7684\u8fd4\u56de\u503c\u3002 g. __getitem__\uff0c __setitem__\uff0c__delitem__ \u7528\u4e8e\u7d22\u5f15\u64cd\u4f5c\uff0c\u5982\u5b57\u5178\u3002\u4ee5\u4e0a\u5206\u522b\u8868\u793a\u83b7\u53d6\u3001\u8bbe\u7f6e\u3001\u5220\u9664\u6570\u636e h. __getslice__\uff0c _setslice__\uff0c __delslice__ \u8be5\u4e09\u4e2a\u65b9\u6cd5\u7528\u4e8e\u5206\u7247\u64cd\u4f5c\uff0c\u5982\uff1a\u5217\u8868 3. \u65b9\u6cd5 a. \u79c1\u6709\u65b9\u6cd5 __functionName( ), \u51fd\u6570\u5185\u90e8 self.__functionName() \u8c03\u7528 b. __del__\u65b9\u6cd5 \u5f53\u5bf9\u8c61\u88ab\u91ca\u653e\u7684\u65f6\u5019\uff0c\u89e6\u53d1\u8be5\u65b9\u6cd5\u3002 1) \u5982\u679c\u5728\u7a0b\u5e8f\u7ed3\u675f\u65f6\uff0c\u6709\u4e9b\u5bf9\u8c61\u8fd8\u5b58\u5728\uff0c \u5219python\u89e3\u91ca\u5668\u4f1a\u81ea\u52a8\u8c03\u7528\u4ed6\u4eec\u7684__del__\u65b9\u6cd5\u5b8c\u6210\u6e05\u7406\u5de5\u4f5c 2) \u5f15\u7528\u8ba1\u6570 import sys sys.getrefcount() c. \u9759\u6001\u65b9\u6cd5 d. __new__ \u65b9\u6cd5 #\u8c03\u7528\u7236\u7c7b\u7684new\u65b9\u6cd5\u521b\u5efa\u5bf9\u8c61 object.__new__(cls) e. \u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\uff0c3\u4ef6\u4e8b\u60c5 1) \u8c03\u7528 __new__ \u65b9\u6cd5\u521b\u5efa\u5bf9\u8c61\uff0c\u7136\u540e\u627e\u5230\u4e00\u4e2a\u53d8\u91cf\u6765\u63a5\u6536 __new__ \u7684\u8fd4\u56de\u503c\uff0c \u8fd9\u4e2a\u8fd4\u56de\u503c\u8868\u793a\u521b\u5efa\u51fa\u6765\u7684\u5bf9\u8c61\u7684\u5f15\u7528\u3002 2) __init__\uff08\u521a\u521a\u521b\u5efa\u51fa\u6765\u7684\u5bf9\u8c61\u7684\u5e94\u7528\uff09 3) \u8fd4\u56de\u5bf9\u8c61\u7684\u5f15\u7528 class ClassName: pass #\u5c5e\u6027 #\u65b9\u6cd5 def funcname(self, parameter_list): pass #\u5b9a\u4e49\u4e00\u4e2a\u7c7b class ClassName: pass #\u5c5e\u6027 #\u521d\u59cb\u5316\u5bf9\u8c61 -\u7c7b\u4f3c\u6784\u9020\u51fd\u6570 def __init__(self, a, b): #\u521d\u59cb\u5316\u5c5e\u6027 self.a = a self.b = b #\u8f93\u51fa\u5bf9\u8c61\u7684\u63cf\u8ff0\u4fe1\u606f,\u5728\u9700\u8981\u6253\u5370\u5bf9\u8c61\u65f6 def __str__(self): return \"%s -- %s\"%(self.a, self.b) #\u65b9\u6cd5 def funcname(self, parameter_list): print(\"%s - %s\", %(self.a, self.b)) #\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61 objectC = ClassName(a, b) #\u8c03\u7528\u5bf9\u8c61\u7684\u65b9\u6cd5 objectC.funcname() class Family: def __init__(self, area, info, addr): self.area = area self.info = info self.addr = addr self.leftArea = area self.containItem = [] def __str__(self): msg = \"\u9762\u79ef:%d M^2,\u53ef\u7528\u9762\u79ef:%d M^2,\u540d\u79f0\uff1a%s,\u5730\u5740\u662f%s,\u5206\u522b\u6709\" %(self.area, self.leftArea ,self.info, self.addr) homeNameitem = \":\" for item in self.containItem: homeNameitem += item.homeName + ',' homeNameitem += \"\u7b49\" msg += homeNameitem return msg def add_item(self, item): self.leftArea -= item.homeArea self.containItem.append(item) class Home: def __init__(self, homeName, homeArea): self.homeName = homeName self.homeArea = homeArea def __str__(self): return \"\u540d\u5b57\uff1a%s, \u9762\u79ef\uff1a%d M^2\"%(self.homeName, self.homeArea) family = Family(1000000, \"\u4e2d\u5357\u6d77\", \"\u897f\u957f\u5b89\u8857174\u53f7\u4e2d\u5357\u6d77\u65b0\u534e\u95e8\") ziGuangGe = Home(\"\u7d2b\u5149\u9601\", 1000) print(ziGuangGe) qinZhengDian = Home(\"\u52e4\u653f\u6bbf\", 8000) print(qinZhengDian) family.add_item(ziGuangGe) family.add_item(qinZhengDian) print(family)","title":"\u7c7b"},{"location":"python2/#_3","text":"1. \u5355\u7ee7\u627f 2. \u79c1\u6709\u65b9\u6cd5\uff0c\u79c1\u6709\u5c5e\u6027 1) \u79c1\u6709\u65b9\u6cd5\u4e0d\u4f1a\u88ab\u7ee7\u627f 2) \u79c1\u6709\u5c5e\u6027\u4e0d\u4f1a\u88ab\u7ee7\u627f _\u7c7b\u540d__\u5c5e\u6027\u540d 3) \u5982\u679c\u8c03\u7528\u7684\u65f6\u7ee7\u627f\u7684\u7236\u7c7b\u4e2d\u7684\u5171\u6709\u65b9\u6cd5\uff0c\u53ef\u4ee5\u5728\u8fd9\u4e2a\u5171\u6709\u65b9\u6cd5\u7ea2\u8bbf\u95ee\u7236\u7c7b\u4e2d\u7684\u79c1\u6709\u5c5e\u6027\u548c\u79c1\u6709\u65b9\u6cd5 4) \u5982\u679c\u5b50\u7c7b\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u5171\u6709\u65b9\u6cd5\uff0c\u90a3\u4e48\u8fd9\u4e2a\u65b9\u6cd5\u662f\u4e0d\u80fd\u591f\u8c03\u7528\u7ee7\u627f\u7684\u7236\u7c7b\u4e2d\u7684\u79c1\u6709\u65b9\u6cd5\u548c\u79c1\u6709\u5c5e\u6027\u7684 3. \u91cd\u5199 \u7236\u7c7b\u65b9\u6cd5\u540c\u540d\u8986\u76d6 1) \u5b50\u7c7b\u8c03\u7528\u7236\u7c7b\u65b9\u6cd5 4. \u591a\u7ee7\u627f 1) \u591a\u7ee7\u627f\u904d\u5386\u6811 # \u5355\u7ee7\u627f class ClassF: pass class ClassA(ClassF): pass # \u91cd\u5199 class ClassF: def funcName(self): pass #\u5b50\u7c7b\uff0c\u7ee7\u627f class ClassA(ClassF): pass #\u5b50\u7c7b\u91cd\u5199 class ClassB(ClassF): #\u91cd\u5199\u7236\u7c7b\u7684\u65b9\u6cd5 def funcName(self): pass # \u591a\u7ee7\u627f #\u7236\u7c7b class ClassF: def funcName(self): pass #\u5b50\u7c7b\uff0c\u7ee7\u627f class ClassA(ClassF): pass #\u5b50\u7c7b\u91cd\u5199 class ClassB(ClassF): #\u91cd\u5199\u7236\u7c7b\u7684\u65b9\u6cd5 def funcName(self): pass #\u5b50\u7c7b\u8c03\u7528\u7236\u7c7b\u7684\u65b9\u6cd5 #\u65b9\u6cd5\u4e00 ClassF.funcName(self) #\u65b9\u6cd5\u4e8c super().bark() class CatStore(object): def __init__(self): self.factory = Factory() def order(self, car_type): return self.factory.select_car_by_type(car_type) class Factory(object) def select_car_by_type(car_type): if car_type == 's': return Suonata() elif car_type == 'm': return Mingtu() # \u591a\u7ee7\u627f\u904d\u5386\u6811 #\u7236\u7c7b class ClassBase(object): pass #\u5b50\u7c7b\uff0c\u7ee7\u627f class ClassA(ClassBase): pass #\u5b50\u7c7b\u91cd\u5199 class ClassB(ClassBase): pass # \u591a\u7ee7\u627f class ClassAB(ClassA, ClassB): pass print(ClassAB.__mro__) # => (<class '__main__.ClassAB'>, # <class '__main__.ClassA'>, # <class '__main__.ClassB'>, # <class '__main__.ClassBase'>, # <class 'object'>) # C3\u7b97\u6cd5","title":"\u7ee7\u627f"},{"location":"python2/#_4","text":"\u5355\u4e00\u51fd\u6570\u8868\u73b0\u591a\u79cd\u72b6\u6001 #-*- coding:utf-8 -*- #Test word class C1(object): def pr(self): print(\"C1\") class C2(C1): def pr(self): print(\"C2\") def intr(temp): temp.pr() c1 = C1() c2 = C2() intr(c1) intr(c2)","title":"\u591a\u6001"},{"location":"python2/#_5","text":"1. \u7c7b\u5bf9\u8c61 1) \u7c7b\u5c5e\u6027\uff1a\u7c7b\u5c5e\u6027\u6240\u5c5e\u4e8e\u7c7b\u5bf9\u8c61\uff0c\u5e76\u4e14\u591a\u4e2a\u5b9e\u4f8b\u5bf9\u8c61\u4e4b\u95f4 \u7c7b\u540d.\u5c5e\u6027\u540d 2) \u7c7b\u65b9\u6cd5\uff1a\u53ef\u4ee5\u901a\u8fc7\u7c7b\u7684\u540d\u5b57\u8c03\u7528\u7c7b\u7684\u65b9\u6cd5\uff0c\u8fd8\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e2a\u7c7b\u521b\u5efa\u51fa\u6765\u7684\u5bf9\u8c61\uff0c\u53bb\u8c03\u7528\u8fd9\u4e2a\u7c7b\u7684\u65b9\u6cd5\u3002 2. \u5b9e\u4f8b\u5bf9\u8c61 1) \u5b9e\u4f8b\u5c5e\u6027\uff1a\u548c\u5177\u4f53\u7684\u67d0\u4e2a\u5b9e\u4f8b\u5bf9\u8c61\u6709\u5173\u7cfb\uff0c\u5e76\u4e14\u4e00\u4e2a\u5b9e\u4f8b\u5bf9\u8c61\u548c\u53e6\u4e00\u4e2a\u5b9e\u4f8b\u5bf9\u8c61\u662f\u4e0d\u5171\u4eab\u5c5e\u6027\u7684 2) \u5b9e\u4f8b\u65b9\u6cd5\uff1a\u5bf9\u8c61\u5185\u90e8\u65b9\u6cd5 3. \u9759\u6001\u65b9\u6cd5 a. Staticmethod b. Property \u7ecf\u5178\u7c7b\u4e2d\u7684\u5c5e\u6027\u53ea\u6709\u4e00\u79cd\u8bbf\u95ee\u65b9\u5f0f\uff0c\u5176\u5bf9\u5e94\u88ab @property \u4fee\u9970\u7684\u65b9\u6cd5 \u65b0\u5f0f\u7c7b\u4e2d\u7684\u5c5e\u6027\u6709\u4e09\u79cd\u8bbf\u95ee\u65b9\u5f0f\uff0c\u5e76\u5206\u522b\u5bf9\u5e94\u4e86\u4e09\u4e2a\u88ab @property @\u65b9\u6cd5\u540d.setter @\u65b9\u6cd5\u540d.deleter \u4fee\u9970\u7684\u65b9\u6cd5 \u7531\u4e8e\u65b0\u5f0f\u7c7b\u4e2d\u5177\u6709\u4e09\u79cd\u8bbf\u95ee\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u5b83\u4eec\u51e0\u4e2a\u5c5e\u6027\u7684\u8bbf\u95ee\u7279\u70b9\uff0c \u5206\u522b\u5c06\u4e09\u4e2a\u65b9\u6cd5\u5b9a\u4e49\u4e3a\u5bf9\u540c\u4e00\u4e2a\u5c5e\u6027\uff1a\u83b7\u53d6\u3001\u4fee\u6539\u3001\u5220\u9664 property \u65b9\u6cd5\u4e2d\u6709\u4e2a\u56db\u4e2a\u53c2\u6570 \u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u65b9\u6cd5\u540d\uff0c\u8c03\u7528 `\u5bf9\u8c61.\u5c5e\u6027` \u65f6\u81ea\u52a8\u89e6\u53d1\u6267\u884c\u65b9\u6cd5 \u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u65b9\u6cd5\u540d\uff0c\u8c03\u7528 `\u5bf9\u8c61.\u5c5e\u6027 \uff1d XXX` \u65f6\u81ea\u52a8\u89e6\u53d1\u6267\u884c\u65b9\u6cd5 \u7b2c\u4e09\u4e2a\u53c2\u6570\u662f\u65b9\u6cd5\u540d\uff0c\u8c03\u7528 `del \u5bf9\u8c61.\u5c5e\u6027` \u65f6\u81ea\u52a8\u89e6\u53d1\u6267\u884c\u65b9\u6cd5 \u7b2c\u56db\u4e2a\u53c2\u6570\u662f\u5b57\u7b26\u4e32\uff0c\u8c03\u7528 `\u5bf9\u8c61.\u5c5e\u6027.__doc__`,\u6b64\u53c2\u6570\u662f\u8be5\u5c5e\u6027\u7684\u63cf\u8ff0\u4fe1\u606f \u7531\u4e8e\u7c7b\u5c5e\u6027\u65b9\u5f0f\u521b\u5efa`property`\u5c5e\u6027\u5177\u67093\u79cd\u8bbf\u95ee\u65b9\u5f0f\uff0c \u6211\u4eec\u53ef\u4ee5\u6839\u636e\u5b83\u4eec\u51e0\u4e2a\u5c5e\u6027\u7684\u8bbf\u95ee\u7279\u70b9\uff0c\u5206\u522b\u5c06\u4e09\u4e2a\u65b9\u6cd5\u5b9a\u4e49\u4e3a\u5bf9\u540c\u4e00\u4e2a\u5c5e\u6027\uff1a\u83b7\u53d6\u3001\u4fee\u6539\u3001\u5220\u9664 4. \u65b9\u6cd5\u5305\u62ec\uff1a\u5b9e\u4f8b\u65b9\u6cd5\u3001\u9759\u6001\u65b9\u6cd5\u548c\u7c7b\u65b9\u6cd5\uff0c\u4e09\u79cd\u65b9\u6cd5\u5728\u5185\u5b58\u4e2d\u90fd\u5f52\u5c5e\u4e8e\u7c7b\uff0c\u533a\u522b\u5728\u4e8e\u8c03\u7528\u65b9\u5f0f\u4e0d\u540c\u3002 1) \u5b9e\u4f8b\u65b9\u6cd5\uff1a\u7531\u5bf9\u8c61\u8c03\u7528 \u81f3\u5c11\u4e00\u4e2a self \u53c2\u6570\uff1b \u6267\u884c\u5b9e\u4f8b\u65b9\u6cd5\u65f6\uff0c\u81ea\u52a8\u5c06\u8c03\u7528\u8be5\u65b9\u6cd5\u7684\u5bf9\u8c61\u8d4b\u503c\u7ed9 self ; 2) \u7c7b\u65b9\u6cd5\uff1a\u7531\u7c7b\u8c03\u7528 \u81f3\u5c11\u4e00\u4e2a cls \u53c2\u6570\uff1b \u6267\u884c\u7c7b\u65b9\u6cd5\u65f6\uff0c\u81ea\u52a8\u5c06\u8c03\u7528\u8be5\u65b9\u6cd5\u7684\u7c7b\u8d4b\u503c\u7ed9 cls ; 3) \u9759\u6001\u65b9\u6cd5\uff1a\u7531\u7c7b\u8c03\u7528\uff1b\u65e0\u9ed8\u8ba4\u53c2\u6570\uff1b 5. \u89e3\u8026 a. \u7b80\u5355\u5de5\u5382\u8bbe\u8ba1\u6a21\u5f0f b. \u5de5\u5382\u65b9\u6cd5\u6a21\u5f0f c. \u5355\u4f8b # \u9759\u6001\u65b9\u6cd5 class Game(object): #\u7c7b\u5c5e\u6027 num = 0 #\u5b9e\u4f8b\u65b9\u6cd5 def __init__(self): #\u5b9e\u4f8b\u5c5e\u6027 self.name = \"AAA\" #\u7c7b\u65b9\u6cd5 @classmethod def add_num(cls): cls.num = 1 #\u9759\u6001\u65b9\u6cd5 @staticmethod def pri(): print(\"-------------------\") Game.pri() game = Game() Game.add_num() print(Game.num) print(game.num) game.pri() # \u7b80\u5355\u5de5\u5382\u6a21\u5f0f class Car(object): def move(self): print(\" ==> \") def music(self): print(\" ==Music== \") def stop(self): print(\" =X=> \") class Suonata(Car): pass class Mingtu(Car): pass car_store = CatStore() car = car_store.order('s') # Property class Foo(object): @property def prop(self): pass fo = Foo() ret = fo.prop #\u5355\u4f8b,\u5355\u521d\u59cb\u5316 class DanLiTest(object): __instance = None __initFlag = False def __new__(cls, a): if cls.__instance == None: cls = object.__new__(cls) return cls.__instance def __init__(self, a): if Dag.__initFlag == False: self.a = a DanLiTest.__init__ = True; a = DanLiTest(\"aaa\") print(id(a)) b = DanLiTest(\"bbb\") print(id(b))","title":"\u7c7b\u5bf9\u8c61\uff0c\u5b9e\u4f8b\u5bf9\u8c61"},{"location":"python2/#_6","text":"1. \u5f02\u5e38\u6355\u83b7 2. \u5f02\u5e38\u4f20\u9012 \u82e5\u5f02\u5e38\u5728\u8be5\u51fd\u6570\u4e2d\u6ca1\u6709\u88ab\u6355\u83b7\uff0c\u5219\u5411\u4e0a\u4e00\u7ea7\u51fd\u6570\u4f20\u9012\u8be5\u5f02\u5e38\uff0c\u76f4\u5230\u88ab\u6355\u83b7\u3002 3. \u629b\u51fa\u81ea\u5b9a\u4e49\u5f02\u5e38 4. \u5f02\u5e38\u5904\u7406\u4e2d\u91cd\u65b0\u629b\u51fa\u8be5\u5f02\u5e38 # \u5728\u5f02\u5e38\u5904\u7406\u9636\u6bb5\uff0c\u67d0\u79cd\u6761\u4ef6\u4e0d\u6ee1\u8db3\uff0c\u5bfc\u81f4\u5f02\u5e38\u88ab\u65e0\u6cd5\u5904\u7406 # \u5219\u53ef\u4ee5\u91cd\u65b0\u629b\u51fa\u8be5\u5f02\u5e38\u3002 Raise #\u53ef\u80fd\u51fa\u73b0\u7684\u5f02\u5e38\u4ee3\u7801 try: pass #\u9488\u5bf9\u67d0\u5143\u7ec4\u7c7b\u578b\u7684\u5f02\u5e38\u6355\u83b7 except (expression1,expression2) pass #\u9664\u5143\u7ec4\u5185\u7684\u5f02\u5e38\u7c7b\u578b\uff0c\u6355\u83b7\u5176\u4ed6\u7c7b\u578b\u7684\u5f02\u5e38 #\u5e76\u5c06\u5f02\u5e38\u7c7b\u578b\u5b58\u50a8\u4e8eidentifier except Exception as identifier: pass #\u6ca1\u6709\u5f02\u5e38\u7684\u60c5\u51b5\u6267\u884c else: pass #\u4e0d\u7ba1\u6709\u6ca1\u6709\u5f02\u5e38\u60c5\u51b5\uff0c\u90fd\u4f1a\u6267\u884c finally: pass #\u81ea\u5b9a\u4e49\u5f02\u5e38 class DefException(Exception): pass #\u624b\u52a8\u629b\u51fa\u8be5\u5f02\u5e38 raise DefException()","title":"\u5f02\u5e38"},{"location":"python2/#_7","text":"1. \u6a21\u5757\u5bfc\u5165, \u5bfc\u5165\u6a21\u5757\u7684\u65b9\u5f0f \u5982\u679c\u4e00\u4e2a\u6587\u4ef6\u4e2d\u6709__all__\u53d8\u91cf\uff0c\u90a3\u4e48\u4e5f\u5c31\u610f\u5473\u7740\u8fd9\u4e2a\u53d8\u91cf\u4e2d\u7684\u5143\u7d20\uff0c \u4f1a\u88abfrom xxx import *\u65f6\u5bfc\u5165 \u800c\u6ca1\u6709\u5b58\u5728\u5728\u5217\u8868[\"xxx\"]\u4e2d\u5143\u7d20\u4e0d\u4f1a\u88ab\u5bfc\u5165 `__all__ = [\"defxxx1\", \"defxxx2\"]` 2. \u6a21\u5757\u522b\u540d #\u6a21\u5757\u522b\u540d 3. \u6a21\u5757\u6d4b\u8bd5 # 1 import impxxx impxxx.defxxx() from impxxx import defxxx1, defxxx2 defxxx1() from impxxx import * defxxx() # 2 import impxxx as ipmxxxx # 3 if __name__ == \"__impxxx__\": defxxx()","title":"\u6a21\u5757"},{"location":"python2/#python","text":"import impxxx def main(): pass if __name__ == '__main__': main()","title":"python\u683c\u5f0f"},{"location":"python2/#_8","text":"1. \u5728\u5305\u6587\u4ef6\u5939\u4e0b\uff0c\u521b\u5efa __init__.py \u6587\u4ef6 __all__ = [\"impxxx\"] 2. \u5305\u5185\u6a21\u5757 #\u5305\u5185\u5bfc\u5165\u76f8\u5e94\u7684\u6a21\u5757 __all__ = [\"impxxx\"] # \u5bfc\u5165\u5305\u540e\uff0c\u518d\u5bfc\u5165\u6a21\u5757\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 # \u5305\u540d.\u6a21\u5757\u540d.\u7c7b\u540d/\u65b9\u6cd5\u540d # \u7684\u65b9\u5f0f\u4f7f\u7528\uff0c\u4e0d\u9700\u8981\u518d\u989d\u5916\u5bfc\u5165\u5305\u5185\u6a21\u5757 # python2 import impxxx # python3 from .import impxxx 3. \u521b\u5efa\uff0c\u6253\u5305\uff0c\u5206\u4eab\uff0c\u5b89\u88c5 setup.py from distutils.core import setup # \u540d\u5b57 \u7248\u672c \u63cf\u8ff0\u4fe1\u606f \u4f5c\u8005 tree \u5305\u540d.\u6a21\u5757\u540d setup(name=\"Yvan\", version=\"1.0\", description=\"Yvan's module\", author=\"dongGe\", py_modules=['Msg.msgipmxxx1','Msg.msgipmxxx2']) python3 setup.py build => running build running build_py creating build creating build/lib creating build/lib/Msg copying Msg/__init__.py -> build/lib/Msg copying Msg/msgipmxxx1.py -> build/lib/Msg copying Msg/msgipmxxx2.py -> build/lib/Msg python3 setup.py sdist => running sdist running check warning: check: missing required meta-data: url warning: check: missing meta-data: if 'author' supplied, 'author_email' must be supplied too warning: sdist: manifest template 'MANIFEST.in' does not exist (using default file list) warning: sdist: standard file not found: should have one of README, README.txt writing manifest file 'MANIFEST' creating Yvan-1.0 creating Yvan-1.0/Msg making hard links in Yvan-1.0... hard linking setup.py -> Yvan-1.0 hard linking Msg/__init__.py -> Yvan-1.0/Msg hard linking Msg/msgipmxxx1.py -> Yvan-1.0/Msg hard linking Msg/msgipmxxx2.py -> Yvan-1.0/Msg creating dist Creating tar archive removing 'Yvan-1.0' (and everything under it) \u251c\u2500\u2500 dist \u2502 \u2514\u2500\u2500 Yvan-1.0.tar.gz tar -zxvf Yvan-1.0.tar.gz python3 setup.py install","title":"\u5305"},{"location":"python2/#_9","text":"import sys def main(): print(sys.argv) if __name__ == '__main__': main()","title":"\u7a0b\u5e8f\u53c2\u6570"},{"location":"python2/#_10","text":"#(10, 78) => 10 - 77 range(10, 78) #(10), 18, 2) => [10, 12, 14, 16] range(10, 18, 2) # range\u98ce\u9669 # python2 \u751f\u6210\u6570\u8f83\u5927\u65f6\uff0c\u4f1a\u5360\u7528\u5927\u91cf\u5185\u5b58\uff0c\u8fc7\u5927\u91cf\u5185\u5b58\u7cfb\u7edf\u6216\u5c06\u4e0d\u4e88\u5206\u914d # python3\u4e2d\u5ef6\u8fdf\u751f\u6210\uff0c\u5f53\u9700\u8981\u76f8\u5173\u6570\u636e\u65f6\uff0c\u4e34\u65f6\u751f\u6210 # => [1 - 17] a = [i for i in range(1, 18)] # => [0, 2, 4, 6, 8] b = [i for i in range(10) if i % 2 == 0] # => [0, 0, 1, 1, 2, 2] c = [i for i in range(3) for j in range(2)] # => [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)] d = [(i, j) for i in range(3) for j in range(2)] # => [(0, 0, 0), (0, 0, 1), ...] e = [(i, j, k) for i in range(3) for j in range(3) for k in range(3)]","title":"\u5217\u8868\u751f\u6210\u5f0f"},{"location":"python2/#setlisttuple","text":"set\u96c6\u5408 \u6ca1\u6709\u91cd\u590d\u9879","title":"set\u3001list\u3001tuple"},{"location":"python2/#gil","text":"GIL\uff08\u5168\u5c40\u89e3\u91ca\u5668\u9501\uff09 GIL\u9762\u8bd5\u9898\u5982\u4e0b \u63cf\u8ff0Python GIL\u7684\u6982\u5ff5\uff0c \u4ee5\u53ca\u5b83\u5bf9python\u591a\u7ebf\u7a0b\u7684\u5f71\u54cd\uff1f \u7f16\u5199\u4e00\u4e2a\u591a\u7ebf\u7a0b\u6293\u53d6\u7f51\u9875\u7684\u7a0b\u5e8f\uff0c\u5e76\u9610\u660e\u591a\u7ebf\u7a0b\u6293\u53d6\u7a0b\u5e8f\u662f\u5426\u53ef\u6bd4\u5355\u7ebf\u7a0b\u6027\u80fd\u6709\u63d0\u5347\uff0c\u5e76\u89e3\u91ca\u539f\u56e0\u3002 Guido\u7684\u58f0\u660e\uff1ahttp://www.artima.com/forums/flat.jsp?forum=106&thread=214235 he language doesn't require the GIL -- it's only the CPython virtual machine that has historically been unable to shed it. \u53c2\u8003\u7b54\u6848: Python\u8bed\u8a00\u548cGIL\u6ca1\u6709\u534a\u6bdb\u94b1\u5173\u7cfb\u3002\u4ec5\u4ec5\u662f\u7531\u4e8e\u5386\u53f2\u539f\u56e0\u5728Cpython\u865a\u62df\u673a(\u89e3\u91ca\u5668)\uff0c\u96be\u4ee5\u79fb\u9664GIL\u3002 GIL\uff1a\u5168\u5c40\u89e3\u91ca\u5668\u9501\u3002\u6bcf\u4e2a\u7ebf\u7a0b\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u90fd\u9700\u8981\u5148\u83b7\u53d6GIL\uff0c\u4fdd\u8bc1\u540c\u4e00\u65f6\u523b\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u6267\u884c\u4ee3\u7801\u3002 \u7ebf\u7a0b\u91ca\u653eGIL\u9501\u7684\u60c5\u51b5\uff1a \u5728IO\u64cd\u4f5c\u7b49\u53ef\u80fd\u4f1a\u5f15\u8d77\u963b\u585e\u7684system call\u4e4b\u524d,\u53ef\u4ee5\u6682\u65f6\u91ca\u653eGIL, \u4f46\u5728\u6267\u884c\u5b8c\u6bd5\u540e,\u5fc5\u987b\u91cd\u65b0\u83b7\u53d6GIL Python 3.x\u4f7f\u7528\u8ba1\u65f6\u5668\uff08\u6267\u884c\u65f6\u95f4\u8fbe\u5230\u9608\u503c\u540e\uff0c \u5f53\u524d\u7ebf\u7a0b\u91ca\u653eGIL\uff09\u6216Python 2.x\uff0ctickets\u8ba1\u6570\u8fbe\u5230100 Python\u4f7f\u7528\u591a\u8fdb\u7a0b\u662f\u53ef\u4ee5\u5229\u7528\u591a\u6838\u7684CPU\u8d44\u6e90\u7684\u3002 \u591a\u7ebf\u7a0b\u722c\u53d6\u6bd4\u5355\u7ebf\u7a0b\u6027\u80fd\u6709\u63d0\u5347\uff0c\u56e0\u4e3a\u9047\u5230IO\u963b\u585e\u4f1a\u81ea\u52a8\u91ca\u653eGIL\u9501","title":"GIL (\u5168\u5c40\u89e3\u91ca\u5668\u9501)"},{"location":"python2/#_11","text":"C\u8bed\u8a00\u80f6\u6c34\u7c98\u5408\u793a\u4f8b import threading import ctypes def main(): lib = ctypes.cdll.LoadLibrary(\"./xxx.so\") t = threading.Thread(target = lib.xxx) t.start() while True: pass if __name__ == \"__main__\": main()","title":"\u80f6\u6c34\u7c98\u5408"},{"location":"python2/#_12","text":"\u6df1\u6d45\u62f7\u8d1d\u5b9e\u4f8b import copy def main(): a = [11, 22] b = a b.append(33) # \u6d45\u62f7\u8d1d #copy.copy() # \u6df1\u62f7\u8d1d\u51fd\u6570 c = copy.deepcopy(a) c.append(44) print(a) print(b) print(c) if __name__ == \"__main__\": main() root@DESKTOP-P2IBM15:/mnt/c/Users/Night/Documents/python# python3 testPy.py [11, 22, 33] [11, 22, 33] [11, 22, 33, 44]","title":"\u6df1\u62f7\u8d1d\uff0c\u6d45\u62f7\u8d1d"},{"location":"python2/#_13","text":"xx: \u516c\u6709\u53d8\u91cf _x: \u5355\u524d\u7f6e\u4e0b\u5212\u7ebf,\u79c1\u6709\u5316\u5c5e\u6027\u6216\u65b9\u6cd5\uff0c from somemodule import * \u7981\u6b62\u5bfc\u5165,\u7c7b\u5bf9\u8c61\u548c\u5b50\u7c7b\u53ef\u4ee5\u8bbf\u95ee __xx\uff1a\u53cc\u524d\u7f6e\u4e0b\u5212\u7ebf,\u907f\u514d\u4e0e\u5b50\u7c7b\u4e2d\u7684\u5c5e\u6027\u547d\u540d\u51b2\u7a81\uff0c\u65e0\u6cd5\u5728\u5916\u90e8\u76f4\u63a5\u8bbf\u95ee(\u540d\u5b57\u91cd\u6574\u6240\u4ee5\u8bbf\u95ee\u4e0d\u5230) xx : \u53cc\u524d\u540e\u4e0b\u5212\u7ebf,\u7528\u6237\u540d\u5b57\u7a7a\u95f4\u7684\u9b54\u6cd5\u5bf9\u8c61\u6216\u5c5e\u6027\u3002\u4f8b\u5982: init , __ \u4e0d\u8981\u81ea\u5df1\u53d1\u660e\u8fd9\u6837\u7684\u540d\u5b57 xx_:\u5355\u540e\u7f6e\u4e0b\u5212\u7ebf,\u7528\u4e8e\u907f\u514d\u4e0ePython\u5173\u952e\u8bcd\u7684\u51b2\u7a81","title":"\u79c1\u6709\u5316"},{"location":"python2/#import","text":"1. Import \u641c\u7d22\u8def\u5f84 \u2022 \u4ece\u4e0a\u9762\u5217\u51fa\u7684\u76ee\u5f55\u91cc\u4f9d\u6b21\u67e5\u627e\u8981\u5bfc\u5165\u7684\u6a21\u5757\u6587\u4ef6 \u2022 '' \u8868\u793a\u5f53\u524d\u8def\u5f84 \u2022 \u5217\u8868\u4e2d\u7684\u8def\u5f84\u7684\u5148\u540e\u987a\u5e8f\u4ee3\u8868\u4e86python\u89e3\u91ca\u5668\u5728\u641c\u7d22\u6a21\u5757\u65f6\u7684\u5148\u540e\u987a\u5e8f import sys sys.path ['(\u5f53\u524d\u8def\u5f84)', '/usr/lib/python36.zip', '/usr/lib/python3.6', '/usr/lib/python3.6/lib-dynload', '/usr/local/lib/python3.6/dist-packages', '/usr/lib/python3/dist-packages'] 2. \u91cd\u65b0\u5bfc\u5165\u6a21\u5757 a. \u6a21\u5757\u88ab\u5bfc\u5165\u540e\uff0cimport module\u4e0d\u80fd\u91cd\u65b0\u5bfc\u5165\u6a21\u5757\uff0c\u91cd\u65b0\u5bfc\u5165\u9700\u7528reload from imp import reload reload(xx)","title":"Import \u5bfc\u5165\u6a21\u5757"},{"location":"python2/#_14","text":"a. __class__ i. \u5bf9\u8c61 b. __dict__ i. \u5c5e\u6027\u5217\u8868","title":"\u5c01\u88c5\uff0c\u7ee7\u627f\uff0c\u591a\u6001"},{"location":"python2/#mro","text":"1. super().__init__\u76f8\u5bf9\u4e8e\u7c7b\u540d.__init__\uff0c\u5728\u5355\u7ee7\u627f\u4e0a\u7528\u6cd5\u57fa\u672c\u65e0\u5dee 2. \u4f46\u5728\u591a\u7ee7\u627f\u4e0a\u6709\u533a\u522b\uff0csuper\u65b9\u6cd5\u80fd\u4fdd\u8bc1\u6bcf\u4e2a\u7236\u7c7b\u7684\u65b9\u6cd5\u53ea\u4f1a\u6267\u884c\u4e00\u6b21\uff0c \u800c\u4f7f\u7528\u7c7b\u540d\u7684\u65b9\u6cd5\u4f1a\u5bfc\u81f4\u65b9\u6cd5\u88ab\u6267\u884c\u591a\u6b21\uff0c\u5177\u4f53\u770b\u524d\u9762\u7684\u8f93\u51fa\u7ed3\u679c 3. \u591a\u7ee7\u627f\u65f6\uff0c\u4f7f\u7528super\u65b9\u6cd5\uff0c\u5bf9\u7236\u7c7b\u7684\u4f20\u53c2\u6570\uff0c \u5e94\u8be5\u662f\u7531\u4e8epython\u4e2dsuper\u7684\u7b97\u6cd5\u5bfc\u81f4\u7684\u539f\u56e0\uff0c\u5fc5\u987b\u628a\u53c2\u6570\u5168\u90e8\u4f20\u9012\uff0c\u5426\u5219\u4f1a\u62a5\u9519 4. \u5355\u7ee7\u627f\u65f6\uff0c\u4f7f\u7528super\u65b9\u6cd5\uff0c\u5219\u4e0d\u80fd\u5168\u90e8\u4f20\u9012\uff0c \u53ea\u80fd\u4f20\u7236\u7c7b\u65b9\u6cd5\u6240\u9700\u7684\u53c2\u6570\uff0c\u5426\u5219\u4f1a\u62a5\u9519 5. \u591a\u7ee7\u627f\u65f6\uff0c\u76f8\u5bf9\u4e8e\u4f7f\u7528\u7c7b\u540d.__init__\u65b9\u6cd5\uff0c\u8981\u628a\u6bcf\u4e2a\u7236\u7c7b\u5168\u90e8\u5199\u4e00\u904d, \u800c\u4f7f\u7528super\u65b9\u6cd5\uff0c \u53ea\u9700\u5199\u4e00\u53e5\u8bdd\u4fbf\u6267\u884c\u4e86\u5168\u90e8\u7236\u7c7b\u7684\u65b9\u6cd5\uff0c\u8fd9\u4e5f\u662f\u4e3a\u4f55\u591a\u7ee7\u627f\u9700\u8981\u5168\u90e8\u4f20\u53c2\u7684\u4e00\u4e2a\u539f\u56e0","title":"\u591a\u7ee7\u627f\u4ee5\u53caMRO\u987a\u5e8f"},{"location":"python2/#with","text":"1. \u4efb\u4f55\u5b9e\u73b0\u4e86 __enter__() \u548c __exit__() \u65b9\u6cd5\u7684\u5bf9\u8c61\u90fd\u53ef\u79f0\u4e4b\u4e3a\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u5bf9\u8c61\u53ef\u4ee5\u4f7f\u7528 with \u5173\u952e\u5b57\u3002\u663e\u7136\uff0c\u6587\u4ef6\uff08file\uff09\u5bf9\u8c61\u4e5f\u5b9e\u73b0\u4e86\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002 2. Python \u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e2a contextmanager \u7684\u88c5\u9970\u5668\uff0c\u66f4\u8fdb\u4e00\u6b65\u7b80\u5316\u4e86\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002 \u901a\u8fc7 yield \u5c06\u51fd\u6570\u5206\u5272\u6210\u4e24\u90e8\u5206\uff0cyield \u4e4b\u524d\u7684\u8bed\u53e5\u5728 __enter__ \u65b9\u6cd5\u4e2d\u6267\u884c\uff0c yield \u4e4b\u540e\u7684\u8bed\u53e5\u5728 __exit__ \u65b9\u6cd5\u4e2d\u6267\u884c\u3002\u7d27\u8ddf\u5728 yield \u540e\u9762\u7684\u503c\u662f\u51fd\u6570\u7684\u8fd4\u56de\u503c\u3002 from contextlib import contextmanager @contextmanager","title":"With \u4e0a\u4e0b\u6587\u7ba1\u7406"},{"location":"python2/#_15","text":"1. \u601d\u8003\uff1a \u51fd\u6570\uff0c\u533f\u540d\u51fd\u6570\uff0c\u95ed\u5305\uff0c\u5bf9\u8c61 \u5f53\u505a\u53c2\u6570\u65f6\uff0c \u6709\u4ec0\u4e48\u533a\u522b i. \u533f\u540d\u51fd\u6570\u80fd\u591f\u5b8c\u6210\u57fa\u672c\u7684\u7b80\u5355\u529f\u80fd\uff0c\u4f20\u9012\u662f\u8fd9\u4e2a\u51fd\u6570\u7684\u5f15\u7528 \u53ea\u6709\u529f\u80fd ii. \u666e\u901a\u51fd\u6570\u80fd\u591f\u5b8c\u6210\u8f83\u4e3a\u590d\u6742\u7684\u529f\u80fd\uff0c\u4f20\u9012\u662f\u8fd9\u4e2a\u51fd\u6570\u7684\u5f15\u7528 \u53ea\u6709\u529f\u80fd iii. \u95ed\u5305\u80fd\u591f\u5c06\u8f83\u4e3a\u590d\u6742\u7684\u529f\u80fd\uff0c\u4f20\u9012\u65f6\u8fd9\u4e2a\u95ed\u5305\u4e2d\u7684\u51fd\u6570\u4ee5\u53ca\u6570\u636e\uff0c\u56e0\u6b64\u4f20\u9012\u65f6\u529f\u80fd + \u6570\u636e iv. \u5bf9\u8c61\u80fd\u591f\u5b8c\u6210\u6700\u4e3a\u590d\u6742\u7684\u529f\u80fd\uff0c\u4f20\u9012\u65f6\u5f88\u591a\u6570\u636e + \u5f88\u591a\u529f\u80fd\uff0c\u56e0\u6b64\u4f20\u9012\u662f\u529f\u80fd + \u6570\u636e 2. \u4fee\u6539\u5173\u952e\u5b57 i. Nonlocal","title":"\u95ed\u5305"},{"location":"python2/#_16","text":"1. @\u88c5\u9970\u5668\u540d \u51fd\u6570() 2. \u53c2\u6570\u88c5\u9970\u5668 # \u901a\u7528\u88c5\u9970\u5668 def secoratorFunc(func): def sec_func(*args, **wkargs): print(\"-- --\") return func(*args, **wkargs) return sec_func @ secoratorFunc def test(a, *args, **kwarge): print(\"-- --\", a, args, kwarge) return a print(test(1, 2, b = 3)) \"\"\" -- -- -- -- 1 (2,) {'b': 3} 1 \"\"\"","title":"\u88c5\u9970\u5668"},{"location":"python2/#_17","text":"1. Globals 2. Type() type(\u7c7b\u540d, \u7531\u7236\u7c7b\u540d\u79f0\u7ec4\u6210\u7684\u5143\u7ec4\uff08\u9488\u5bf9\u7ee7\u627f\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u4e3a\u7a7a\uff09\uff0c\u5305\u542b\u5c5e\u6027\u7684\u5b57\u5178\uff08\u540d\u79f0\u548c\u503c)) >>> globals <built-in function globals> >>> globals() {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': None, '__annotations__': {}, '__builtins__': <module 'builtins' (built-in)>} >>> help(type)","title":"\u5143\u7c7b"},{"location":"python_wsgi/","text":"WSGI ENVIRON\u53d8\u91cf \u73af\u5883\u5b57\u5178\u9700\u8981\u5305\u542b\u8fd9\u4e9bCGI\u73af\u5883\u53d8\u91cf\uff0c\u5982\u516c\u5171\u7f51\u5173\u63a5\u53e3\u89c4\u8303\u6240\u5b9a\u4e49\u3002 \u5fc5\u987b\u5b58\u5728\u4ee5\u4e0b\u53d8\u91cf\uff0c\u9664\u975e\u5b83\u4eec\u7684\u503c\u662f\u7a7a\u5b57\u7b26\u4e32\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5b83\u4eec\u53ef\u4ee5\u7701\u7565\uff0c\u9664\u975e\u4e0b\u9762\u53e6\u6709\u8bf4\u660e\u3002 REQUEST_METHOD HTTP\u8bf7\u6c42\u65b9\u6cd5\uff0c\u4f8b\u5982\u201cGET\u201d\u6216\u201cPOST\u201d\u3002 \u8fd9\u4e0d\u53ef\u80fd\u662f\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\uff0c\u56e0\u6b64\u603b\u662f\u9700\u8981\u3002 SCRIPT_NAME \u8bf7\u6c42URL\u7684\u201c\u8def\u5f84\u201d\u7684\u521d\u59cb\u90e8\u5206\uff0c\u5b83\u5bf9\u5e94\u4e8e\u5e94\u7528\u7a0b\u5e8f\u5bf9\u8c61\uff0c\u4ee5\u4fbf\u5e94\u7528\u7a0b\u5e8f\u77e5\u9053\u5176\u865a\u62df\u201c\u4f4d\u7f6e\u201d\u3002 \u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u5bf9\u5e94\u4e8e\u670d\u52a1\u5668\u7684\u201c\u6839\u201d\uff0c\u5219\u8fd9\u53ef\u4ee5\u662f\u7a7a\u5b57\u7b26\u4e32\u3002 PATH_INFO \u8bf7\u6c42URL\u7684\u201c\u8def\u5f84\u201d\u7684\u5176\u4f59\u90e8\u5206\uff0c\u6307\u5b9a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u8bf7\u6c42\u76ee\u6807\u7684\u865a\u62df\u201c\u4f4d\u7f6e\u201d\u3002 \u5982\u679c\u8bf7\u6c42URL\u4ee5\u5e94\u7528\u7a0b\u5e8f\u6839\u76ee\u6807\u4e3a\u6b62\uff0c\u5e76\u4e14\u6ca1\u6709\u5c3e\u90e8\u659c\u6760\uff0c\u5219\u6b64\u5b57\u7b26\u4e32\u53ef\u80fd\u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002 QUERY_STRING \u8bf7\u6c42URL\u4e2d\u201c\uff1f\u201d\u540e\u9762\u7684\u90e8\u5206\uff0c\u5982\u679c\u6709\u7684\u8bdd\u3002 \u53ef\u80fd\u662f\u7a7a\u7684\u6216\u7f3a\u5e2d\u3002 CONTENT_TYPE HTTP\u8bf7\u6c42\u4e2d\u4efb\u4f55Content-Type\u5b57\u6bb5\u7684\u5185\u5bb9\u3002 \u53ef\u80fd\u662f\u7a7a\u7684\u6216\u7f3a\u5e2d\u3002 CONTENT_LENGTH HTTP\u8bf7\u6c42\u4e2d\u4efb\u4f55Content-Length\u5b57\u6bb5\u7684\u5185\u5bb9\u3002 \u53ef\u80fd\u662f\u7a7a\u7684\u6216\u7f3a\u5e2d\u3002 SERVER_NAME, SERVER_PORT \u4e0eSCRIPT_NAME\u548cPATH_INFO\u7ed3\u5408\u4f7f\u7528\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u53d8\u91cf\u6765\u5b8c\u6210URL\u3002 \u4f46\u8bf7\u6ce8\u610f\uff0cHTTP_HOST\uff08\u5982\u679c\u5b58\u5728\uff09\u5e94\u4f18\u5148\u4e8eSERVER_NAME\u7528\u4e8e\u91cd\u5efa\u8bf7\u6c42URL\u3002 \u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u4e0b\u9762\u7684URL\u91cd\u5efa\u90e8\u5206\u3002 SERVER_NAME\u548cSERVER_PORT\u6c38\u8fdc\u4e0d\u80fd\u662f\u7a7a\u5b57\u7b26\u4e32\uff0c\u56e0\u6b64\u59cb\u7ec8\u662f\u5fc5\u9700\u7684\u3002 SERVER_PROTOCOL \u5ba2\u6237\u7aef\u7528\u4e8e\u53d1\u9001\u8bf7\u6c42\u7684\u534f\u8bae\u7248\u672c\u3002 \u901a\u5e38\uff0c\u8fd9\u5c06\u7c7b\u4f3c\u4e8e\u201cHTTP / 1.0\u201d\u6216\u201cHTTP / 1.1\u201d\uff0c\u5e76\u4e14\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u786e\u5b9a\u5982\u4f55\u5904\u7406\u4efb\u4f55HTTP\u8bf7\u6c42\u6807\u5934\u3002 \uff08\u6b64\u53d8\u91cf\u53ef\u80fd\u5e94\u8be5\u79f0\u4e3aREQUEST_PROTOCOL\uff0c\u56e0\u4e3a\u5b83\u8868\u793a\u8bf7\u6c42\u4e2d\u4f7f\u7528\u7684\u534f\u8bae\uff0c\u5e76\u4e0d\u4e00\u5b9a\u662f\u670d\u52a1\u5668\u54cd\u5e94\u4e2d\u4f7f\u7528\u7684\u534f\u8bae\u3002 \u4f46\u662f\uff0c\u4e3a\u4e86\u4e0eCGI\u517c\u5bb9\uff0c\u6211\u4eec\u5fc5\u987b\u4fdd\u7559\u73b0\u6709\u540d\u79f0\u3002\uff09 HTTP_ Variables \u5bf9\u5e94\u4e8e\u5ba2\u6237\u7aef\u63d0\u4f9b\u7684HTTP\u8bf7\u6c42\u6807\u5934\u7684\u53d8\u91cf\uff08\u5373\u540d\u79f0\u4ee5\u201cHTTP_\u201d\u5f00\u5934\u7684\u53d8\u91cf\uff09\u3002 \u8fd9\u4e9b\u53d8\u91cf\u7684\u5b58\u5728\u4e0e\u5426\u5e94\u4e0e\u8bf7\u6c42\u4e2d\u662f\u5426\u5b58\u5728\u9002\u5f53\u7684HTTP\u5934\u76f8\u5bf9\u5e94 \u670d\u52a1\u5668\u6216\u7f51\u5173\u5e94\u5c1d\u8bd5\u63d0\u4f9b\u9002\u7528\u7684\u5176\u4ed6CGI\u53d8\u91cf\u3002 \u6b64\u5916\uff0c\u5982\u679c\u6b63\u5728\u4f7f\u7528SSL\uff0c\u5219\u670d\u52a1\u5668\u6216\u7f51\u5173\u8fd8\u5e94\u63d0\u4f9b\u5c3d\u53ef\u80fd\u591a\u7684\u9002\u7528\u7684Apache SSL\u73af\u5883\u53d8\u91cf\uff0c \u4f8b\u5982HTTPS = on\u548cSSL_PROTOCOL\u3002 \u4f46\u8bf7\u6ce8\u610f\uff0c\u4f7f\u7528\u9664\u4e0a\u9762\u5217\u51fa\u7684CGI\u53d8\u91cf\u4e4b\u5916\u7684\u4efb\u4f55CGI\u53d8\u91cf\u7684\u5e94\u7528\u7a0b\u5e8f\u5fc5\u7136\u4e0d\u53ef\u79fb\u690d\u5230\u4e0d\u652f\u6301\u76f8\u5173\u6269\u5c55\u7684Web\u670d\u52a1\u5668\u3002 \uff08\u4f8b\u5982\uff0c\u4e0d\u53d1\u5e03\u6587\u4ef6\u7684Web\u670d\u52a1\u5668\u5c06\u65e0\u6cd5\u63d0\u4f9b\u6709\u610f\u4e49\u7684DOCUMENT_ROOT\u6216PATH_TRANSLATED\u3002\uff09 \u7b26\u5408WSGI\u7684\u670d\u52a1\u5668\u6216\u7f51\u5173\u5e94\u8bb0\u5f55\u5b83\u63d0\u4f9b\u7684\u53d8\u91cf\u53ca\u5176\u5b9a\u4e49\u3002 \u5e94\u7528\u7a0b\u5e8f\u5e94\u68c0\u67e5\u662f\u5426\u5b58\u5728\u6240\u9700\u7684\u4efb\u4f55\u53d8\u91cf\uff0c\u5e76\u5728\u6ca1\u6709\u6b64\u7c7b\u53d8\u91cf\u7684\u60c5\u51b5\u4e0b\u5236\u5b9a\u5907\u7528\u8ba1\u5212\u3002 \u6ce8\u610f\uff1a\u7f3a\u5c11\u53d8\u91cf\uff08\u4f8b\u5982\u672a\u53d1\u751f\u8eab\u4efd\u9a8c\u8bc1\u65f6\u7684REMOTE_USER\uff09\u5e94\u8be5\u4e0d\u5728environ\u8bcd\u5178\u4e2d\u3002 \u53e6\u8bf7\u6ce8\u610f\uff0cCGI\u5b9a\u4e49\u7684\u53d8\u91cf\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u5b83\u4eec\u5b58\u5728\u7684\u8bdd\u3002 \u5982\u679cCGI\u53d8\u91cf\u7684\u503c\u4e0d\u662fstr\uff0c\u5219\u8fdd\u53cd\u6b64\u89c4\u8303\u3002 WSGI \u81ea\u5b9a\u4e49\u9879 wsgi.version \u5143\u7ec4\uff081,0\uff09\uff0c\u4ee3\u8868WSGI\u7248\u672c1.0\u3002 wsgi.url_scheme \u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u8c03\u7528\u5e94\u7528\u7a0b\u5e8f\u7684URL\u7684\u201c\u65b9\u6848\u201d\u90e8\u5206\u3002 \u901a\u5e38\uff0c\u8fd9\u5c06\u5177\u6709\u503c\u201chttp\u201d\u6216\u201chttps\u201d\uff0c\u89c6\u60c5\u51b5\u800c\u5b9a\u3002 wsgi.input \u53ef\u4ee5\u4ece\u4e2d\u8bfb\u53d6HTTP\u8bf7\u6c42\u6b63\u6587\u7684\u8f93\u5165\u6d41\uff08\u7c7b\u6587\u4ef6\u5bf9\u8c61\uff09\u3002 \uff08\u670d\u52a1\u5668\u6216\u7f51\u5173\u53ef\u4ee5\u6309\u7167\u5e94\u7528\u7a0b\u5e8f\u7684\u8bf7\u6c42\u6267\u884c\u6309\u9700\u8bfb\u53d6\uff0c \u6216\u8005\u5b83\u53ef\u4ee5\u9884\u5148\u8bfb\u53d6\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u4e3b\u4f53\u5e76\u5c06\u5176\u7f13\u51b2\u5728\u5185\u5b58\u4e2d\u6216\u78c1\u76d8\u4e0a\uff0c \u6216\u8005\u4f7f\u7528\u4efb\u4f55\u5176\u4ed6\u6280\u672f\u6765\u63d0\u4f9b\u8fd9\u6837\u7684\u8f93\u5165\u6d41\uff0c \u5b83\u7684\u504f\u597d\u3002\uff09 wsgi.errors \u53ef\u4ee5\u4ece\u4e2d\u8bfb\u53d6HTTP\u8bf7\u6c42\u6b63\u6587\u7684\u8f93\u5165\u6d41\uff08\u7c7b\u6587\u4ef6\u5bf9\u8c61\uff09\u3002 \uff08\u670d\u52a1\u5668\u6216\u7f51\u5173\u53ef\u4ee5\u6839\u636e\u5e94\u7528\u7a0b\u5e8f\u7684\u8bf7\u6c42\u6267\u884c\u6309\u9700\u8bfb\u53d6\uff0c \u6216\u8005\u53ef\u4ee5\u5199\u5165\u9519\u8bef\u8f93\u51fa\u7684\u8f93\u51fa\u6d41\uff08\u7c7b\u6587\u4ef6\u5bf9\u8c61\uff09\uff0c \u4ee5\u4fbf\u5728\u6807\u51c6\u5316\u548c\u53ef\u80fd\u96c6\u4e2d\u7684\u60c5\u51b5\u4e0b\u8bb0\u5f55\u7a0b\u5e8f\u6216\u5176\u4ed6\u9519\u8bef \u8fd9\u5e94\u8be5\u662f\u4e00\u4e2a\u201c\u6587\u672c\u6a21\u5f0f\u201d\u6d41;\u5373\uff0c\u5e94\u7528\u7a0b\u5e8f\u5e94\u4f7f\u7528\u201c\\ n\u201d\u4f5c\u4e3a\u884c\u7ed3\u5c3e\uff0c \u5e76\u5047\u8bbe\u5b83\u5c06\u88ab\u8f6c\u6362\u4e3a\u7531\u670d\u52a1\u5668/\u7f51\u5173\u7ed3\u675f\u7684\u6b63\u786e\u884c\u3002 \u5bf9\u4e8e\u8bb8\u591a\u670d\u52a1\u5668\uff0cwsgi.errors\u5c06\u662f\u670d\u52a1\u5668\u7684\u4e3b\u9519\u8bef\u65e5\u5fd7\u3002 \u6216\u8005\uff0c\u8fd9\u53ef\u80fd\u662fsys.stderr\uff0c\u6216\u67d0\u79cd\u65e5\u5fd7\u6587\u4ef6\u3002 \u670d\u52a1\u5668\u7684\u6587\u6863\u5e94\u5305\u62ec\u5982\u4f55\u914d\u7f6e\u6b64\u6587\u4ef6\u6216\u5728\u4f55\u5904\u67e5\u627e\u8bb0\u5f55\u7684\u8f93\u51fa\u7684\u8bf4\u660e\u3002 \u5982\u679c\u9700\u8981\uff0c\u670d\u52a1\u5668\u6216\u7f51\u5173\u53ef\u4ee5\u5411\u4e0d\u540c\u7684\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e0d\u540c\u7684\u9519\u8bef\u6d41\u3002 wsgi.multithread \u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u5bf9\u8c61\u53ef\u80fd\u7531\u540c\u4e00\u8fdb\u7a0b\u4e2d\u7684\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8c03\u7528\uff0c\u5219\u6b64\u503c\u5e94\u8be5\u4e3atrue\uff0c\u5426\u5219\u5e94\u8be5\u4e3afalse\u3002 wsgi.multiprocess \u5982\u679c\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u540c\u65f6\u8c03\u7528\u7b49\u6548\u7684\u5e94\u7528\u7a0b\u5e8f\u5bf9\u8c61\uff0c\u5219\u8be5\u503c\u5e94\u8be5\u4e3atrue\uff0c\u5426\u5219\u5e94\u8be5\u4e3afalse\u3002 wsgi.run_once \u5982\u679c\u670d\u52a1\u5668\u6216\u7f51\u5173\u671f\u671b\uff08\u4f46\u4e0d\u4fdd\u8bc1\uff01\uff09\u5e94\u7528\u7a0b\u5e8f\u5c06\u4ec5\u5728\u5176\u5305\u542b\u8fdb\u7a0b\u7684\u751f\u547d\u5468\u671f\u5185\u8c03\u7528\u4e00\u6b21\uff0c \u5219\u6b64\u503c\u5e94\u8bc4\u4f30\u4e3atrue\u3002 \u901a\u5e38\uff0c\u8fd9\u4ec5\u9002\u7528\u4e8e\u57fa\u4e8eCGI\uff08\u6216\u7c7b\u4f3c\u7684\u4e1c\u897f\uff09\u7684\u7f51\u5173\u3002 \u6700\u540e\uff0cenviron\u5b57\u5178\u8fd8\u53ef\u80fd\u5305\u542b\u670d\u52a1\u5668\u5b9a\u4e49\u7684\u53d8\u91cf\u3002 \u8fd9\u4e9b\u53d8\u91cf\u5e94\u4ec5\u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\uff0c\u6570\u5b57\uff0c\u70b9\u548c\u4e0b\u5212\u7ebf\u547d\u540d\uff0c \u5e76\u4e14\u5e94\u4f7f\u7528\u5bf9\u5b9a\u4e49\u670d\u52a1\u5668\u6216\u7f51\u5173\u552f\u4e00\u7684\u540d\u79f0\u4f5c\u4e3a\u524d\u7f00\u3002 \u4f8b\u5982\uff0cmod_python\u53ef\u80fd\u5b9a\u4e49\u540d\u79f0\u4e3amod_python.some_variable\u7684\u53d8\u91cf\u3002 \u8f93\u5165\u548c\u9519\u8bef\u6d41 \u670d\u52a1\u5668\u63d0\u4f9b\u7684\u8f93\u5165\u548c\u9519\u8bef\u6d41\u5fc5\u987b\u652f\u6301\u4ee5\u4e0b\u65b9\u6cd5\uff1a Method Stream Notes read(size) input 1 readline() input 1, 2 readlines(hint) input 1, 3 __iter__() input flush() errors 4 write(str) errors writelines(seq) errors \u6bcf\u4e2a\u65b9\u6cd5\u7684\u8bed\u4e49\u90fd\u5728Python Library Reference\u4e2d\u8bb0\u5f55\uff0c\u9664\u4e86\u4e0a\u8868\u4e2d\u5217\u51fa\u7684\u8fd9\u4e9b\u6ce8\u91ca\uff1a 1. \u670d\u52a1\u5668\u4e0d\u9700\u8981\u8bfb\u53d6\u5ba2\u6237\u7aef\u6307\u5b9a\u7684Content-Length\uff0c\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u5c1d\u8bd5\u8bfb\u53d6\u8be5\u70b9\uff0c\u5219\u5141\u8bb8\u670d\u52a1\u5668\u6a21\u62df\u6587\u4ef6\u7ed3\u675f\u6761\u4ef6\u3002 \u5e94\u7528\u7a0b\u5e8f\u4e0d\u5e94\u5c1d\u8bd5\u8bfb\u53d6\u6bd4CONTENT_LENGTH\u53d8\u91cf\u6307\u5b9a\u7684\u6570\u636e\u66f4\u591a\u7684\u6570\u636e\u3002 2. \u4e0d\u652f\u6301readline\uff08\uff09\u7684\u53ef\u9009\u201csize\u201d\u53c2\u6570\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u5bf9\u670d\u52a1\u5668\u4f5c\u8005\u6765\u8bf4\u5f88\u590d\u6742\uff0c\u5e76\u4e14\u5728\u5b9e\u8df5\u4e2d\u5e76\u4e0d\u7ecf\u5e38\u4f7f\u7528\u3002 3. \u8bf7\u6ce8\u610f\uff0creadlines\uff08\uff09\u7684\u63d0\u793a\u53c2\u6570\u5bf9\u4e8e\u8c03\u7528\u8005\u548c\u5b9e\u73b0\u8005\u90fd\u662f\u53ef\u9009\u7684\u3002 \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u514d\u8d39\u63d0\u4f9b\uff0c\u670d\u52a1\u5668\u6216\u7f51\u5173\u53ef\u4ee5\u81ea\u7531\u5ffd\u7565\u5b83 \u7531\u4e8e\u9519\u8bef\u6d41\u53ef\u80fd\u65e0\u6cd5\u5012\u5e26\uff0c\u56e0\u6b64\u670d\u52a1\u5668\u548c\u7f51\u5173\u53ef\u4ee5\u7acb\u5373\u81ea\u7531\u8f6c\u53d1\u5199\u5165\u64cd\u4f5c\uff0c\u800c\u65e0\u9700\u7f13\u51b2\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cflush\uff08\uff09\u65b9\u6cd5\u53ef\u4ee5\u662fno-op\u3002 \u4f46\u662f\uff0c\u4fbf\u643a\u5f0f\u5e94\u7528\u7a0b\u5e8f\u4e0d\u80fd\u5047\u8bbe\u8f93\u51fa\u662f\u65e0\u7f13\u51b2\u7684\uff0c\u6216\u8005flush\uff08\uff09\u662f\u65e0\u64cd\u4f5c\u3002 \u5982\u679c\u9700\u8981\u786e\u4fdd\u8f93\u51fa\u5b9e\u9645\u4e0a\u5df2\u88ab\u5199\u5165\uff0c\u5219\u5fc5\u987b\u8c03\u7528flush\uff08\uff09\u3002 \uff08\u4f8b\u5982\uff0c\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u6765\u81ea\u5199\u5165\u540c\u4e00\u9519\u8bef\u65e5\u5fd7\u7684\u591a\u4e2a\u8fdb\u7a0b\u7684\u6570\u636e\u6df7\u5408\u3002\uff09 \u4e0a\u8868\u4e2d\u5217\u51fa\u7684\u65b9\u6cd5\u5fc5\u987b\u5f97\u5230\u7b26\u5408\u6b64\u89c4\u8303\u7684\u6240\u6709\u670d\u52a1\u5668\u7684\u652f\u6301\u3002 \u7b26\u5408\u6b64\u89c4\u8303\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0d\u5f97\u4f7f\u7528\u8f93\u5165\u6216\u9519\u8bef\u5bf9\u8c61\u7684\u4efb\u4f55\u5176\u4ed6\u65b9\u6cd5\u6216\u5c5e\u6027\u3002 \u7279\u522b\u662f\uff0c\u5e94\u7528\u7a0b\u5e8f\u4e0d\u5f97\u5c1d\u8bd5\u5173\u95ed\u8fd9\u4e9b\u6d41\uff0c\u5373\u4f7f\u5b83\u4eec\u5177\u6709close\uff08\uff09\u65b9\u6cd5\u3002","title":"Python WSGI"},{"location":"python_wsgi/#wsgi","text":"","title":"WSGI"},{"location":"python_wsgi/#environ","text":"\u73af\u5883\u5b57\u5178\u9700\u8981\u5305\u542b\u8fd9\u4e9bCGI\u73af\u5883\u53d8\u91cf\uff0c\u5982\u516c\u5171\u7f51\u5173\u63a5\u53e3\u89c4\u8303\u6240\u5b9a\u4e49\u3002 \u5fc5\u987b\u5b58\u5728\u4ee5\u4e0b\u53d8\u91cf\uff0c\u9664\u975e\u5b83\u4eec\u7684\u503c\u662f\u7a7a\u5b57\u7b26\u4e32\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5b83\u4eec\u53ef\u4ee5\u7701\u7565\uff0c\u9664\u975e\u4e0b\u9762\u53e6\u6709\u8bf4\u660e\u3002 REQUEST_METHOD HTTP\u8bf7\u6c42\u65b9\u6cd5\uff0c\u4f8b\u5982\u201cGET\u201d\u6216\u201cPOST\u201d\u3002 \u8fd9\u4e0d\u53ef\u80fd\u662f\u4e00\u4e2a\u7a7a\u5b57\u7b26\u4e32\uff0c\u56e0\u6b64\u603b\u662f\u9700\u8981\u3002 SCRIPT_NAME \u8bf7\u6c42URL\u7684\u201c\u8def\u5f84\u201d\u7684\u521d\u59cb\u90e8\u5206\uff0c\u5b83\u5bf9\u5e94\u4e8e\u5e94\u7528\u7a0b\u5e8f\u5bf9\u8c61\uff0c\u4ee5\u4fbf\u5e94\u7528\u7a0b\u5e8f\u77e5\u9053\u5176\u865a\u62df\u201c\u4f4d\u7f6e\u201d\u3002 \u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u5bf9\u5e94\u4e8e\u670d\u52a1\u5668\u7684\u201c\u6839\u201d\uff0c\u5219\u8fd9\u53ef\u4ee5\u662f\u7a7a\u5b57\u7b26\u4e32\u3002 PATH_INFO \u8bf7\u6c42URL\u7684\u201c\u8def\u5f84\u201d\u7684\u5176\u4f59\u90e8\u5206\uff0c\u6307\u5b9a\u5e94\u7528\u7a0b\u5e8f\u4e2d\u8bf7\u6c42\u76ee\u6807\u7684\u865a\u62df\u201c\u4f4d\u7f6e\u201d\u3002 \u5982\u679c\u8bf7\u6c42URL\u4ee5\u5e94\u7528\u7a0b\u5e8f\u6839\u76ee\u6807\u4e3a\u6b62\uff0c\u5e76\u4e14\u6ca1\u6709\u5c3e\u90e8\u659c\u6760\uff0c\u5219\u6b64\u5b57\u7b26\u4e32\u53ef\u80fd\u4e3a\u7a7a\u5b57\u7b26\u4e32\u3002 QUERY_STRING \u8bf7\u6c42URL\u4e2d\u201c\uff1f\u201d\u540e\u9762\u7684\u90e8\u5206\uff0c\u5982\u679c\u6709\u7684\u8bdd\u3002 \u53ef\u80fd\u662f\u7a7a\u7684\u6216\u7f3a\u5e2d\u3002 CONTENT_TYPE HTTP\u8bf7\u6c42\u4e2d\u4efb\u4f55Content-Type\u5b57\u6bb5\u7684\u5185\u5bb9\u3002 \u53ef\u80fd\u662f\u7a7a\u7684\u6216\u7f3a\u5e2d\u3002 CONTENT_LENGTH HTTP\u8bf7\u6c42\u4e2d\u4efb\u4f55Content-Length\u5b57\u6bb5\u7684\u5185\u5bb9\u3002 \u53ef\u80fd\u662f\u7a7a\u7684\u6216\u7f3a\u5e2d\u3002 SERVER_NAME, SERVER_PORT \u4e0eSCRIPT_NAME\u548cPATH_INFO\u7ed3\u5408\u4f7f\u7528\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e9b\u53d8\u91cf\u6765\u5b8c\u6210URL\u3002 \u4f46\u8bf7\u6ce8\u610f\uff0cHTTP_HOST\uff08\u5982\u679c\u5b58\u5728\uff09\u5e94\u4f18\u5148\u4e8eSERVER_NAME\u7528\u4e8e\u91cd\u5efa\u8bf7\u6c42URL\u3002 \u6709\u5173\u66f4\u591a\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605\u4e0b\u9762\u7684URL\u91cd\u5efa\u90e8\u5206\u3002 SERVER_NAME\u548cSERVER_PORT\u6c38\u8fdc\u4e0d\u80fd\u662f\u7a7a\u5b57\u7b26\u4e32\uff0c\u56e0\u6b64\u59cb\u7ec8\u662f\u5fc5\u9700\u7684\u3002 SERVER_PROTOCOL \u5ba2\u6237\u7aef\u7528\u4e8e\u53d1\u9001\u8bf7\u6c42\u7684\u534f\u8bae\u7248\u672c\u3002 \u901a\u5e38\uff0c\u8fd9\u5c06\u7c7b\u4f3c\u4e8e\u201cHTTP / 1.0\u201d\u6216\u201cHTTP / 1.1\u201d\uff0c\u5e76\u4e14\u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u7528\u5b83\u6765\u786e\u5b9a\u5982\u4f55\u5904\u7406\u4efb\u4f55HTTP\u8bf7\u6c42\u6807\u5934\u3002 \uff08\u6b64\u53d8\u91cf\u53ef\u80fd\u5e94\u8be5\u79f0\u4e3aREQUEST_PROTOCOL\uff0c\u56e0\u4e3a\u5b83\u8868\u793a\u8bf7\u6c42\u4e2d\u4f7f\u7528\u7684\u534f\u8bae\uff0c\u5e76\u4e0d\u4e00\u5b9a\u662f\u670d\u52a1\u5668\u54cd\u5e94\u4e2d\u4f7f\u7528\u7684\u534f\u8bae\u3002 \u4f46\u662f\uff0c\u4e3a\u4e86\u4e0eCGI\u517c\u5bb9\uff0c\u6211\u4eec\u5fc5\u987b\u4fdd\u7559\u73b0\u6709\u540d\u79f0\u3002\uff09 HTTP_ Variables \u5bf9\u5e94\u4e8e\u5ba2\u6237\u7aef\u63d0\u4f9b\u7684HTTP\u8bf7\u6c42\u6807\u5934\u7684\u53d8\u91cf\uff08\u5373\u540d\u79f0\u4ee5\u201cHTTP_\u201d\u5f00\u5934\u7684\u53d8\u91cf\uff09\u3002 \u8fd9\u4e9b\u53d8\u91cf\u7684\u5b58\u5728\u4e0e\u5426\u5e94\u4e0e\u8bf7\u6c42\u4e2d\u662f\u5426\u5b58\u5728\u9002\u5f53\u7684HTTP\u5934\u76f8\u5bf9\u5e94 \u670d\u52a1\u5668\u6216\u7f51\u5173\u5e94\u5c1d\u8bd5\u63d0\u4f9b\u9002\u7528\u7684\u5176\u4ed6CGI\u53d8\u91cf\u3002 \u6b64\u5916\uff0c\u5982\u679c\u6b63\u5728\u4f7f\u7528SSL\uff0c\u5219\u670d\u52a1\u5668\u6216\u7f51\u5173\u8fd8\u5e94\u63d0\u4f9b\u5c3d\u53ef\u80fd\u591a\u7684\u9002\u7528\u7684Apache SSL\u73af\u5883\u53d8\u91cf\uff0c \u4f8b\u5982HTTPS = on\u548cSSL_PROTOCOL\u3002 \u4f46\u8bf7\u6ce8\u610f\uff0c\u4f7f\u7528\u9664\u4e0a\u9762\u5217\u51fa\u7684CGI\u53d8\u91cf\u4e4b\u5916\u7684\u4efb\u4f55CGI\u53d8\u91cf\u7684\u5e94\u7528\u7a0b\u5e8f\u5fc5\u7136\u4e0d\u53ef\u79fb\u690d\u5230\u4e0d\u652f\u6301\u76f8\u5173\u6269\u5c55\u7684Web\u670d\u52a1\u5668\u3002 \uff08\u4f8b\u5982\uff0c\u4e0d\u53d1\u5e03\u6587\u4ef6\u7684Web\u670d\u52a1\u5668\u5c06\u65e0\u6cd5\u63d0\u4f9b\u6709\u610f\u4e49\u7684DOCUMENT_ROOT\u6216PATH_TRANSLATED\u3002\uff09 \u7b26\u5408WSGI\u7684\u670d\u52a1\u5668\u6216\u7f51\u5173\u5e94\u8bb0\u5f55\u5b83\u63d0\u4f9b\u7684\u53d8\u91cf\u53ca\u5176\u5b9a\u4e49\u3002 \u5e94\u7528\u7a0b\u5e8f\u5e94\u68c0\u67e5\u662f\u5426\u5b58\u5728\u6240\u9700\u7684\u4efb\u4f55\u53d8\u91cf\uff0c\u5e76\u5728\u6ca1\u6709\u6b64\u7c7b\u53d8\u91cf\u7684\u60c5\u51b5\u4e0b\u5236\u5b9a\u5907\u7528\u8ba1\u5212\u3002 \u6ce8\u610f\uff1a\u7f3a\u5c11\u53d8\u91cf\uff08\u4f8b\u5982\u672a\u53d1\u751f\u8eab\u4efd\u9a8c\u8bc1\u65f6\u7684REMOTE_USER\uff09\u5e94\u8be5\u4e0d\u5728environ\u8bcd\u5178\u4e2d\u3002 \u53e6\u8bf7\u6ce8\u610f\uff0cCGI\u5b9a\u4e49\u7684\u53d8\u91cf\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u5b83\u4eec\u5b58\u5728\u7684\u8bdd\u3002 \u5982\u679cCGI\u53d8\u91cf\u7684\u503c\u4e0d\u662fstr\uff0c\u5219\u8fdd\u53cd\u6b64\u89c4\u8303\u3002","title":"ENVIRON\u53d8\u91cf"},{"location":"python_wsgi/#wsgi_1","text":"wsgi.version \u5143\u7ec4\uff081,0\uff09\uff0c\u4ee3\u8868WSGI\u7248\u672c1.0\u3002 wsgi.url_scheme \u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u8c03\u7528\u5e94\u7528\u7a0b\u5e8f\u7684URL\u7684\u201c\u65b9\u6848\u201d\u90e8\u5206\u3002 \u901a\u5e38\uff0c\u8fd9\u5c06\u5177\u6709\u503c\u201chttp\u201d\u6216\u201chttps\u201d\uff0c\u89c6\u60c5\u51b5\u800c\u5b9a\u3002 wsgi.input \u53ef\u4ee5\u4ece\u4e2d\u8bfb\u53d6HTTP\u8bf7\u6c42\u6b63\u6587\u7684\u8f93\u5165\u6d41\uff08\u7c7b\u6587\u4ef6\u5bf9\u8c61\uff09\u3002 \uff08\u670d\u52a1\u5668\u6216\u7f51\u5173\u53ef\u4ee5\u6309\u7167\u5e94\u7528\u7a0b\u5e8f\u7684\u8bf7\u6c42\u6267\u884c\u6309\u9700\u8bfb\u53d6\uff0c \u6216\u8005\u5b83\u53ef\u4ee5\u9884\u5148\u8bfb\u53d6\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u4e3b\u4f53\u5e76\u5c06\u5176\u7f13\u51b2\u5728\u5185\u5b58\u4e2d\u6216\u78c1\u76d8\u4e0a\uff0c \u6216\u8005\u4f7f\u7528\u4efb\u4f55\u5176\u4ed6\u6280\u672f\u6765\u63d0\u4f9b\u8fd9\u6837\u7684\u8f93\u5165\u6d41\uff0c \u5b83\u7684\u504f\u597d\u3002\uff09 wsgi.errors \u53ef\u4ee5\u4ece\u4e2d\u8bfb\u53d6HTTP\u8bf7\u6c42\u6b63\u6587\u7684\u8f93\u5165\u6d41\uff08\u7c7b\u6587\u4ef6\u5bf9\u8c61\uff09\u3002 \uff08\u670d\u52a1\u5668\u6216\u7f51\u5173\u53ef\u4ee5\u6839\u636e\u5e94\u7528\u7a0b\u5e8f\u7684\u8bf7\u6c42\u6267\u884c\u6309\u9700\u8bfb\u53d6\uff0c \u6216\u8005\u53ef\u4ee5\u5199\u5165\u9519\u8bef\u8f93\u51fa\u7684\u8f93\u51fa\u6d41\uff08\u7c7b\u6587\u4ef6\u5bf9\u8c61\uff09\uff0c \u4ee5\u4fbf\u5728\u6807\u51c6\u5316\u548c\u53ef\u80fd\u96c6\u4e2d\u7684\u60c5\u51b5\u4e0b\u8bb0\u5f55\u7a0b\u5e8f\u6216\u5176\u4ed6\u9519\u8bef \u8fd9\u5e94\u8be5\u662f\u4e00\u4e2a\u201c\u6587\u672c\u6a21\u5f0f\u201d\u6d41;\u5373\uff0c\u5e94\u7528\u7a0b\u5e8f\u5e94\u4f7f\u7528\u201c\\ n\u201d\u4f5c\u4e3a\u884c\u7ed3\u5c3e\uff0c \u5e76\u5047\u8bbe\u5b83\u5c06\u88ab\u8f6c\u6362\u4e3a\u7531\u670d\u52a1\u5668/\u7f51\u5173\u7ed3\u675f\u7684\u6b63\u786e\u884c\u3002 \u5bf9\u4e8e\u8bb8\u591a\u670d\u52a1\u5668\uff0cwsgi.errors\u5c06\u662f\u670d\u52a1\u5668\u7684\u4e3b\u9519\u8bef\u65e5\u5fd7\u3002 \u6216\u8005\uff0c\u8fd9\u53ef\u80fd\u662fsys.stderr\uff0c\u6216\u67d0\u79cd\u65e5\u5fd7\u6587\u4ef6\u3002 \u670d\u52a1\u5668\u7684\u6587\u6863\u5e94\u5305\u62ec\u5982\u4f55\u914d\u7f6e\u6b64\u6587\u4ef6\u6216\u5728\u4f55\u5904\u67e5\u627e\u8bb0\u5f55\u7684\u8f93\u51fa\u7684\u8bf4\u660e\u3002 \u5982\u679c\u9700\u8981\uff0c\u670d\u52a1\u5668\u6216\u7f51\u5173\u53ef\u4ee5\u5411\u4e0d\u540c\u7684\u5e94\u7528\u7a0b\u5e8f\u63d0\u4f9b\u4e0d\u540c\u7684\u9519\u8bef\u6d41\u3002 wsgi.multithread \u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u5bf9\u8c61\u53ef\u80fd\u7531\u540c\u4e00\u8fdb\u7a0b\u4e2d\u7684\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8c03\u7528\uff0c\u5219\u6b64\u503c\u5e94\u8be5\u4e3atrue\uff0c\u5426\u5219\u5e94\u8be5\u4e3afalse\u3002 wsgi.multiprocess \u5982\u679c\u53e6\u4e00\u4e2a\u8fdb\u7a0b\u53ef\u4ee5\u540c\u65f6\u8c03\u7528\u7b49\u6548\u7684\u5e94\u7528\u7a0b\u5e8f\u5bf9\u8c61\uff0c\u5219\u8be5\u503c\u5e94\u8be5\u4e3atrue\uff0c\u5426\u5219\u5e94\u8be5\u4e3afalse\u3002 wsgi.run_once \u5982\u679c\u670d\u52a1\u5668\u6216\u7f51\u5173\u671f\u671b\uff08\u4f46\u4e0d\u4fdd\u8bc1\uff01\uff09\u5e94\u7528\u7a0b\u5e8f\u5c06\u4ec5\u5728\u5176\u5305\u542b\u8fdb\u7a0b\u7684\u751f\u547d\u5468\u671f\u5185\u8c03\u7528\u4e00\u6b21\uff0c \u5219\u6b64\u503c\u5e94\u8bc4\u4f30\u4e3atrue\u3002 \u901a\u5e38\uff0c\u8fd9\u4ec5\u9002\u7528\u4e8e\u57fa\u4e8eCGI\uff08\u6216\u7c7b\u4f3c\u7684\u4e1c\u897f\uff09\u7684\u7f51\u5173\u3002 \u6700\u540e\uff0cenviron\u5b57\u5178\u8fd8\u53ef\u80fd\u5305\u542b\u670d\u52a1\u5668\u5b9a\u4e49\u7684\u53d8\u91cf\u3002 \u8fd9\u4e9b\u53d8\u91cf\u5e94\u4ec5\u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\uff0c\u6570\u5b57\uff0c\u70b9\u548c\u4e0b\u5212\u7ebf\u547d\u540d\uff0c \u5e76\u4e14\u5e94\u4f7f\u7528\u5bf9\u5b9a\u4e49\u670d\u52a1\u5668\u6216\u7f51\u5173\u552f\u4e00\u7684\u540d\u79f0\u4f5c\u4e3a\u524d\u7f00\u3002 \u4f8b\u5982\uff0cmod_python\u53ef\u80fd\u5b9a\u4e49\u540d\u79f0\u4e3amod_python.some_variable\u7684\u53d8\u91cf\u3002","title":"WSGI \u81ea\u5b9a\u4e49\u9879"},{"location":"python_wsgi/#_1","text":"\u670d\u52a1\u5668\u63d0\u4f9b\u7684\u8f93\u5165\u548c\u9519\u8bef\u6d41\u5fc5\u987b\u652f\u6301\u4ee5\u4e0b\u65b9\u6cd5\uff1a Method Stream Notes read(size) input 1 readline() input 1, 2 readlines(hint) input 1, 3 __iter__() input flush() errors 4 write(str) errors writelines(seq) errors \u6bcf\u4e2a\u65b9\u6cd5\u7684\u8bed\u4e49\u90fd\u5728Python Library Reference\u4e2d\u8bb0\u5f55\uff0c\u9664\u4e86\u4e0a\u8868\u4e2d\u5217\u51fa\u7684\u8fd9\u4e9b\u6ce8\u91ca\uff1a 1. \u670d\u52a1\u5668\u4e0d\u9700\u8981\u8bfb\u53d6\u5ba2\u6237\u7aef\u6307\u5b9a\u7684Content-Length\uff0c\u5982\u679c\u5e94\u7528\u7a0b\u5e8f\u5c1d\u8bd5\u8bfb\u53d6\u8be5\u70b9\uff0c\u5219\u5141\u8bb8\u670d\u52a1\u5668\u6a21\u62df\u6587\u4ef6\u7ed3\u675f\u6761\u4ef6\u3002 \u5e94\u7528\u7a0b\u5e8f\u4e0d\u5e94\u5c1d\u8bd5\u8bfb\u53d6\u6bd4CONTENT_LENGTH\u53d8\u91cf\u6307\u5b9a\u7684\u6570\u636e\u66f4\u591a\u7684\u6570\u636e\u3002 2. \u4e0d\u652f\u6301readline\uff08\uff09\u7684\u53ef\u9009\u201csize\u201d\u53c2\u6570\uff0c\u56e0\u4e3a\u5b83\u53ef\u80fd\u5bf9\u670d\u52a1\u5668\u4f5c\u8005\u6765\u8bf4\u5f88\u590d\u6742\uff0c\u5e76\u4e14\u5728\u5b9e\u8df5\u4e2d\u5e76\u4e0d\u7ecf\u5e38\u4f7f\u7528\u3002 3. \u8bf7\u6ce8\u610f\uff0creadlines\uff08\uff09\u7684\u63d0\u793a\u53c2\u6570\u5bf9\u4e8e\u8c03\u7528\u8005\u548c\u5b9e\u73b0\u8005\u90fd\u662f\u53ef\u9009\u7684\u3002 \u5e94\u7528\u7a0b\u5e8f\u53ef\u4ee5\u514d\u8d39\u63d0\u4f9b\uff0c\u670d\u52a1\u5668\u6216\u7f51\u5173\u53ef\u4ee5\u81ea\u7531\u5ffd\u7565\u5b83 \u7531\u4e8e\u9519\u8bef\u6d41\u53ef\u80fd\u65e0\u6cd5\u5012\u5e26\uff0c\u56e0\u6b64\u670d\u52a1\u5668\u548c\u7f51\u5173\u53ef\u4ee5\u7acb\u5373\u81ea\u7531\u8f6c\u53d1\u5199\u5165\u64cd\u4f5c\uff0c\u800c\u65e0\u9700\u7f13\u51b2\u3002 \u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cflush\uff08\uff09\u65b9\u6cd5\u53ef\u4ee5\u662fno-op\u3002 \u4f46\u662f\uff0c\u4fbf\u643a\u5f0f\u5e94\u7528\u7a0b\u5e8f\u4e0d\u80fd\u5047\u8bbe\u8f93\u51fa\u662f\u65e0\u7f13\u51b2\u7684\uff0c\u6216\u8005flush\uff08\uff09\u662f\u65e0\u64cd\u4f5c\u3002 \u5982\u679c\u9700\u8981\u786e\u4fdd\u8f93\u51fa\u5b9e\u9645\u4e0a\u5df2\u88ab\u5199\u5165\uff0c\u5219\u5fc5\u987b\u8c03\u7528flush\uff08\uff09\u3002 \uff08\u4f8b\u5982\uff0c\u6700\u5927\u9650\u5ea6\u5730\u51cf\u5c11\u6765\u81ea\u5199\u5165\u540c\u4e00\u9519\u8bef\u65e5\u5fd7\u7684\u591a\u4e2a\u8fdb\u7a0b\u7684\u6570\u636e\u6df7\u5408\u3002\uff09 \u4e0a\u8868\u4e2d\u5217\u51fa\u7684\u65b9\u6cd5\u5fc5\u987b\u5f97\u5230\u7b26\u5408\u6b64\u89c4\u8303\u7684\u6240\u6709\u670d\u52a1\u5668\u7684\u652f\u6301\u3002 \u7b26\u5408\u6b64\u89c4\u8303\u7684\u5e94\u7528\u7a0b\u5e8f\u4e0d\u5f97\u4f7f\u7528\u8f93\u5165\u6216\u9519\u8bef\u5bf9\u8c61\u7684\u4efb\u4f55\u5176\u4ed6\u65b9\u6cd5\u6216\u5c5e\u6027\u3002 \u7279\u522b\u662f\uff0c\u5e94\u7528\u7a0b\u5e8f\u4e0d\u5f97\u5c1d\u8bd5\u5173\u95ed\u8fd9\u4e9b\u6d41\uff0c\u5373\u4f7f\u5b83\u4eec\u5177\u6709close\uff08\uff09\u65b9\u6cd5\u3002","title":"\u8f93\u5165\u548c\u9519\u8bef\u6d41"},{"location":"resume/","text":"\u4e2a\u4eba\u7b80\u5386","title":"\u4e2a\u4eba\u7b80\u5386"},{"location":"resume/#_1","text":"","title":"\u4e2a\u4eba\u7b80\u5386"},{"location":"technology/","text":"","title":"Technology"}]}